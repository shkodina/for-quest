
Modbus_168.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001306  0000139a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000153  00800134  00800134  000013ce  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000585  00000000  00000000  0000156e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000217a  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000afd  00000000  00000000  00003c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015ab  00000000  00000000  0000476a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c0  00000000  00000000  00005d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cd5  00000000  00000000  000060d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013bf  00000000  00000000  00006dad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 01 	jmp	0x268	; 0x268 <__ctors_end>
       4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
       8:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
       c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      10:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      14:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      18:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      1c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      20:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      24:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      28:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      2c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      30:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      34:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      38:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__vector_14>
      3c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      40:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      44:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      48:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__vector_18>
      4c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_19>
      50:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      54:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      58:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      5c:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      60:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>
      64:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__bad_interrupt>

00000068 <aucCRCHi>:
      68:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      78:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      88:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      98:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      a8:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      b8:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      c8:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      d8:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      e8:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      f8:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     108:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     118:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     128:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     138:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     148:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     158:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@

00000168 <aucCRCLo>:
     168:	00 c0 c1 01 c3 03 02 c2 c6 06 07 c7 05 c5 c4 04     ................
     178:	cc 0c 0d cd 0f cf ce 0e 0a ca cb 0b c9 09 08 c8     ................
     188:	d8 18 19 d9 1b db da 1a 1e de df 1f dd 1d 1c dc     ................
     198:	14 d4 d5 15 d7 17 16 d6 d2 12 13 d3 11 d1 d0 10     ................
     1a8:	f0 30 31 f1 33 f3 f2 32 36 f6 f7 37 f5 35 34 f4     .01.3..26..7.54.
     1b8:	3c fc fd 3d ff 3f 3e fe fa 3a 3b fb 39 f9 f8 38     <..=.?>..:;.9..8
     1c8:	28 e8 e9 29 eb 2b 2a ea ee 2e 2f ef 2d ed ec 2c     (..).+*.../.-..,
     1d8:	e4 24 25 e5 27 e7 e6 26 22 e2 e3 23 e1 21 20 e0     .$%.'..&"..#.! .
     1e8:	a0 60 61 a1 63 a3 a2 62 66 a6 a7 67 a5 65 64 a4     .`a.c..bf..g.ed.
     1f8:	6c ac ad 6d af 6f 6e ae aa 6a 6b ab 69 a9 a8 68     l..m.on..jk.i..h
     208:	78 b8 b9 79 bb 7b 7a ba be 7e 7f bf 7d bd bc 7c     x..y.{z..~..}..|
     218:	b4 74 75 b5 77 b7 b6 76 72 b2 b3 73 b1 71 70 b0     .tu.w..vr..s.qp.
     228:	50 90 91 51 93 53 52 92 96 56 57 97 55 95 94 54     P..Q.SR..VW.U..T
     238:	9c 5c 5d 9d 5f 9f 9e 5e 5a 9a 9b 5b 99 59 58 98     .\]._..^Z..[.YX.
     248:	88 48 49 89 4b 8b 8a 4a 4e 8e 8f 4f 8d 4d 4c 8c     .HI.K..JN..O.ML.
     258:	44 84 85 45 87 47 46 86 82 42 43 83 41 81 80 40     D..E.GF..BC.A..@

00000268 <__ctors_end>:
     268:	11 24       	eor	r1, r1
     26a:	1f be       	out	0x3f, r1	; 63
     26c:	cf ef       	ldi	r28, 0xFF	; 255
     26e:	d4 e0       	ldi	r29, 0x04	; 4
     270:	de bf       	out	0x3e, r29	; 62
     272:	cd bf       	out	0x3d, r28	; 61

00000274 <__do_copy_data>:
     274:	11 e0       	ldi	r17, 0x01	; 1
     276:	a0 e0       	ldi	r26, 0x00	; 0
     278:	b1 e0       	ldi	r27, 0x01	; 1
     27a:	e6 e0       	ldi	r30, 0x06	; 6
     27c:	f3 e1       	ldi	r31, 0x13	; 19
     27e:	02 c0       	rjmp	.+4      	; 0x284 <.do_copy_data_start>

00000280 <.do_copy_data_loop>:
     280:	05 90       	lpm	r0, Z+
     282:	0d 92       	st	X+, r0

00000284 <.do_copy_data_start>:
     284:	a4 33       	cpi	r26, 0x34	; 52
     286:	b1 07       	cpc	r27, r17
     288:	d9 f7       	brne	.-10     	; 0x280 <.do_copy_data_loop>

0000028a <__do_clear_bss>:
     28a:	12 e0       	ldi	r17, 0x02	; 2
     28c:	a4 e3       	ldi	r26, 0x34	; 52
     28e:	b1 e0       	ldi	r27, 0x01	; 1
     290:	01 c0       	rjmp	.+2      	; 0x294 <.do_clear_bss_start>

00000292 <.do_clear_bss_loop>:
     292:	1d 92       	st	X+, r1

00000294 <.do_clear_bss_start>:
     294:	a7 38       	cpi	r26, 0x87	; 135
     296:	b1 07       	cpc	r27, r17
     298:	e1 f7       	brne	.-8      	; 0x292 <.do_clear_bss_loop>
     29a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <main>
     29e:	0c 94 81 09 	jmp	0x1302	; 0x1302 <_exit>

000002a2 <__bad_interrupt>:
     2a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a6 <eMBRegInputCB>:
    }
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
     2a6:	dc 01       	movw	r26, r24
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
     2a8:	23 e0       	ldi	r18, 0x03	; 3
     2aa:	68 3e       	cpi	r22, 0xE8	; 232
     2ac:	72 07       	cpc	r23, r18
     2ae:	d8 f0       	brcs	.+54     	; 0x2e6 <eMBRegInputCB+0x40>
     2b0:	ca 01       	movw	r24, r20
     2b2:	86 0f       	add	r24, r22
     2b4:	97 1f       	adc	r25, r23
     2b6:	8d 5e       	subi	r24, 0xED	; 237
     2b8:	93 40       	sbci	r25, 0x03	; 3
     2ba:	a8 f4       	brcc	.+42     	; 0x2e6 <eMBRegInputCB+0x40>
     2bc:	fb 01       	movw	r30, r22
     2be:	ee 0f       	add	r30, r30
     2c0:	ff 1f       	adc	r31, r31
     2c2:	ec 59       	subi	r30, 0x9C	; 156
     2c4:	f6 40       	sbci	r31, 0x06	; 6
     2c6:	0a c0       	rjmp	.+20     	; 0x2dc <eMBRegInputCB+0x36>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
        while( usNRegs > 0 )
        {
            *pucRegBuffer++ =
     2c8:	90 81       	ld	r25, Z
     2ca:	81 81       	ldd	r24, Z+1	; 0x01
     2cc:	8c 93       	st	X, r24
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
            *pucRegBuffer++ =
     2ce:	11 96       	adiw	r26, 0x01	; 1
     2d0:	9c 93       	st	X, r25
     2d2:	11 97       	sbiw	r26, 0x01	; 1
    }
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
     2d4:	12 96       	adiw	r26, 0x02	; 2
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
            iRegIndex++;
            usNRegs--;
     2d6:	41 50       	subi	r20, 0x01	; 1
     2d8:	50 40       	sbci	r21, 0x00	; 0
     2da:	32 96       	adiw	r30, 0x02	; 2

    if( ( usAddress >= REG_INPUT_START )
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
        while( usNRegs > 0 )
     2dc:	41 15       	cp	r20, r1
     2de:	51 05       	cpc	r21, r1
     2e0:	99 f7       	brne	.-26     	; 0x2c8 <eMBRegInputCB+0x22>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	08 95       	ret
     2e6:	81 e0       	ldi	r24, 0x01	; 1
    {
        eStatus = MB_ENOREG;
    }

    return eStatus;
}
     2e8:	08 95       	ret

000002ea <eMBRegHoldingCB>:
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	08 95       	ret

000002ee <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	08 95       	ret

000002f2 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	08 95       	ret

000002f6 <main>:
static USHORT   usRegInputBuf[REG_INPUT_NREGS];

/* ----------------------- Start implementation -----------------------------*/
int
main( void )
{
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
    const UCHAR     ucSlaveID[] = { 0xAA, 0xBB, 0xCC };
    eMBErrorCode    eStatus;
	ULONG			my_counter = 0;

    eStatus = eMBInit( MB_RTU, 0x0A, 0, 38400, MB_PAR_EVEN );
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	6a e0       	ldi	r22, 0x0A	; 10
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	00 e0       	ldi	r16, 0x00	; 0
     30a:	16 e9       	ldi	r17, 0x96	; 150
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	92 e0       	ldi	r25, 0x02	; 2
     312:	e9 2e       	mov	r14, r25
     314:	0e 94 df 08 	call	0x11be	; 0x11be <eMBInit>

    eStatus = eMBSetSlaveID( 0x34, TRUE, ucSlaveID, 3 );
     318:	84 e3       	ldi	r24, 0x34	; 52
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	51 e0       	ldi	r21, 0x01	; 1
     320:	23 e0       	ldi	r18, 0x03	; 3
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	0e 94 84 04 	call	0x908	; 0x908 <eMBSetSlaveID>
    sei(  );
     328:	78 94       	sei

    /* Enable the Modbus Protocol Stack. */
    eStatus = eMBEnable(  );
     32a:	0e 94 31 08 	call	0x1062	; 0x1062 <eMBEnable>
     32e:	ee 24       	eor	r14, r14
     330:	ff 24       	eor	r15, r15
     332:	87 01       	movw	r16, r14
		if( my_counter++ > 100000) {
			my_counter = 0;
			usRegInputBuf[0]++;
		}
        /* The constant value. */
        usRegInputBuf[1] = 33;
     334:	c1 e2       	ldi	r28, 0x21	; 33
     336:	d0 e0       	ldi	r29, 0x00	; 0
    /* Enable the Modbus Protocol Stack. */
    eStatus = eMBEnable(  );

    for( ;; )
    {
        ( void )eMBPoll(  );
     338:	0e 94 54 08 	call	0x10a8	; 0x10a8 <eMBPoll>

        /* Here we simply count the number of poll cycles. */
		if( my_counter++ > 100000) {
     33c:	81 ea       	ldi	r24, 0xA1	; 161
     33e:	e8 16       	cp	r14, r24
     340:	86 e8       	ldi	r24, 0x86	; 134
     342:	f8 06       	cpc	r15, r24
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	08 07       	cpc	r16, r24
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	18 07       	cpc	r17, r24
     34c:	30 f4       	brcc	.+12     	; 0x35a <main+0x64>
     34e:	08 94       	sec
     350:	e1 1c       	adc	r14, r1
     352:	f1 1c       	adc	r15, r1
     354:	01 1d       	adc	r16, r1
     356:	11 1d       	adc	r17, r1
     358:	0c c0       	rjmp	.+24     	; 0x372 <main+0x7c>
			my_counter = 0;
			usRegInputBuf[0]++;
     35a:	80 91 34 01 	lds	r24, 0x0134
     35e:	90 91 35 01 	lds	r25, 0x0135
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	90 93 35 01 	sts	0x0135, r25
     368:	80 93 34 01 	sts	0x0134, r24
     36c:	ee 24       	eor	r14, r14
     36e:	ff 24       	eor	r15, r15
     370:	87 01       	movw	r16, r14
		}
        /* The constant value. */
        usRegInputBuf[1] = 33;
     372:	d0 93 37 01 	sts	0x0137, r29
     376:	c0 93 36 01 	sts	0x0136, r28
     37a:	de cf       	rjmp	.-68     	; 0x338 <main+0x42>

0000037c <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	fc 01       	movw	r30, r24
     382:	eb 01       	movw	r28, r22
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     384:	88 81       	ld	r24, Y
     386:	99 81       	ldd	r25, Y+1	; 0x01
     388:	06 97       	sbiw	r24, 0x06	; 6
     38a:	c0 f1       	brcs	.+112    	; 0x3fc <eMBFuncWriteMultipleCoils+0x80>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     38c:	a1 81       	ldd	r26, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     38e:	b2 81       	ldd	r27, Z+2	; 0x02
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
     390:	93 81       	ldd	r25, Z+3	; 0x03
     392:	80 e0       	ldi	r24, 0x00	; 0
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
     394:	24 81       	ldd	r18, Z+4	; 0x04
     396:	42 2f       	mov	r20, r18
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	48 2b       	or	r20, r24
     39c:	59 2b       	or	r21, r25

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
     39e:	35 81       	ldd	r19, Z+5	; 0x05

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
     3a0:	ca 01       	movw	r24, r20
     3a2:	87 70       	andi	r24, 0x07	; 7
     3a4:	90 70       	andi	r25, 0x00	; 0
     3a6:	ba 01       	movw	r22, r20
     3a8:	23 e0       	ldi	r18, 0x03	; 3
     3aa:	76 95       	lsr	r23
     3ac:	67 95       	ror	r22
     3ae:	2a 95       	dec	r18
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <eMBFuncWriteMultipleCoils+0x2e>
     3b2:	89 2b       	or	r24, r25
     3b4:	19 f0       	breq	.+6      	; 0x3bc <eMBFuncWriteMultipleCoils+0x40>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
     3b6:	26 2f       	mov	r18, r22
     3b8:	2f 5f       	subi	r18, 0xFF	; 255
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <eMBFuncWriteMultipleCoils+0x42>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
     3bc:	26 2f       	mov	r18, r22
        }

        if( ( usCoilCnt >= 1 ) &&
     3be:	ca 01       	movw	r24, r20
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	80 5b       	subi	r24, 0xB0	; 176
     3c4:	97 40       	sbci	r25, 0x07	; 7
     3c6:	d0 f4       	brcc	.+52     	; 0x3fc <eMBFuncWriteMultipleCoils+0x80>
     3c8:	23 17       	cp	r18, r19
     3ca:	c1 f4       	brne	.+48     	; 0x3fc <eMBFuncWriteMultipleCoils+0x80>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     3cc:	7a 2f       	mov	r23, r26
     3ce:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     3d0:	8b 2f       	mov	r24, r27
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	68 2b       	or	r22, r24
     3d6:	79 2b       	or	r23, r25

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
     3d8:	6f 5f       	subi	r22, 0xFF	; 255
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	cf 01       	movw	r24, r30
     3de:	06 96       	adiw	r24, 0x06	; 6
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	0e 94 77 01 	call	0x2ee	; 0x2ee <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     3e6:	88 23       	and	r24, r24
     3e8:	19 f0       	breq	.+6      	; 0x3f0 <eMBFuncWriteMultipleCoils+0x74>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     3ea:	0e 94 15 05 	call	0xa2a	; 0xa2a <prveMBError2Exception>
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <eMBFuncWriteMultipleCoils+0x82>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
     3f0:	85 e0       	ldi	r24, 0x05	; 5
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	99 83       	std	Y+1, r25	; 0x01
     3f6:	88 83       	st	Y, r24
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <eMBFuncWriteMultipleCoils+0x82>
     3fc:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <eMBFuncWriteCoil>:
}

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
     404:	df 93       	push	r29
     406:	cf 93       	push	r28
     408:	00 d0       	rcall	.+0      	; 0x40a <eMBFuncWriteCoil+0x6>
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	dc 01       	movw	r26, r24
     410:	fb 01       	movw	r30, r22
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     412:	80 81       	ld	r24, Z
     414:	91 81       	ldd	r25, Z+1	; 0x01
     416:	05 97       	sbiw	r24, 0x05	; 5
     418:	61 f5       	brne	.+88     	; 0x472 <eMBFuncWriteCoil+0x6e>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     41a:	11 96       	adiw	r26, 0x01	; 1
     41c:	2c 91       	ld	r18, X
     41e:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     420:	12 96       	adiw	r26, 0x02	; 2
     422:	3c 91       	ld	r19, X
     424:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
     426:	14 96       	adiw	r26, 0x04	; 4
     428:	8c 91       	ld	r24, X
     42a:	14 97       	sbiw	r26, 0x04	; 4
     42c:	88 23       	and	r24, r24
     42e:	09 f5       	brne	.+66     	; 0x472 <eMBFuncWriteCoil+0x6e>
     430:	13 96       	adiw	r26, 0x03	; 3
     432:	9c 91       	ld	r25, X
     434:	89 2f       	mov	r24, r25
     436:	81 50       	subi	r24, 0x01	; 1
     438:	8e 3f       	cpi	r24, 0xFE	; 254
     43a:	d8 f0       	brcs	.+54     	; 0x472 <eMBFuncWriteCoil+0x6e>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
     43c:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
     43e:	9f 3f       	cpi	r25, 0xFF	; 255
     440:	19 f4       	brne	.+6      	; 0x448 <eMBFuncWriteCoil+0x44>
            {
                ucBuf[0] = 1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	89 83       	std	Y+1, r24	; 0x01
     446:	01 c0       	rjmp	.+2      	; 0x44a <eMBFuncWriteCoil+0x46>
            }
            else
            {
                ucBuf[0] = 0;
     448:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     44a:	72 2f       	mov	r23, r18
     44c:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     44e:	83 2f       	mov	r24, r19
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	68 2b       	or	r22, r24
     454:	79 2b       	or	r23, r25
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
     456:	6f 5f       	subi	r22, 0xFF	; 255
     458:	7f 4f       	sbci	r23, 0xFF	; 255
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	21 e0       	ldi	r18, 0x01	; 1
     464:	0e 94 77 01 	call	0x2ee	; 0x2ee <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     468:	88 23       	and	r24, r24
     46a:	21 f0       	breq	.+8      	; 0x474 <eMBFuncWriteCoil+0x70>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     46c:	0e 94 15 05 	call	0xa2a	; 0xa2a <prveMBError2Exception>
     470:	01 c0       	rjmp	.+2      	; 0x474 <eMBFuncWriteCoil+0x70>
     472:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	cf 91       	pop	r28
     47a:	df 91       	pop	r29
     47c:	08 95       	ret

0000047e <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	fc 01       	movw	r30, r24
     488:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     48a:	88 81       	ld	r24, Y
     48c:	99 81       	ldd	r25, Y+1	; 0x01
     48e:	05 97       	sbiw	r24, 0x05	; 5
     490:	09 f0       	breq	.+2      	; 0x494 <eMBFuncReadCoils+0x16>
     492:	47 c0       	rjmp	.+142    	; 0x522 <__stack+0x23>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     494:	01 81       	ldd	r16, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     496:	df 01       	movw	r26, r30
     498:	12 96       	adiw	r26, 0x02	; 2
     49a:	32 81       	ldd	r19, Z+2	; 0x02
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
     49c:	93 81       	ldd	r25, Z+3	; 0x03
     49e:	80 e0       	ldi	r24, 0x00	; 0
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
     4a0:	24 81       	ldd	r18, Z+4	; 0x04
     4a2:	42 2f       	mov	r20, r18
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	48 2b       	or	r20, r24
     4a8:	59 2b       	or	r21, r25

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
     4aa:	ca 01       	movw	r24, r20
     4ac:	01 97       	sbiw	r24, 0x01	; 1
     4ae:	8f 5c       	subi	r24, 0xCF	; 207
     4b0:	97 40       	sbci	r25, 0x07	; 7
     4b2:	b8 f5       	brcc	.+110    	; 0x522 <__stack+0x23>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     4b4:	19 82       	std	Y+1, r1	; 0x01
     4b6:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 83       	st	Z, r24
            *usLen += 1;
     4bc:	88 81       	ld	r24, Y
     4be:	99 81       	ldd	r25, Y+1	; 0x01
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	99 83       	std	Y+1, r25	; 0x01
     4c4:	88 83       	st	Y, r24

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
     4c6:	ca 01       	movw	r24, r20
     4c8:	87 70       	andi	r24, 0x07	; 7
     4ca:	90 70       	andi	r25, 0x00	; 0
     4cc:	ba 01       	movw	r22, r20
     4ce:	13 e0       	ldi	r17, 0x03	; 3
     4d0:	76 95       	lsr	r23
     4d2:	67 95       	ror	r22
     4d4:	1a 95       	dec	r17
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <eMBFuncReadCoils+0x52>
     4d8:	89 2b       	or	r24, r25
     4da:	19 f0       	breq	.+6      	; 0x4e2 <eMBFuncReadCoils+0x64>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
     4dc:	16 2f       	mov	r17, r22
     4de:	1f 5f       	subi	r17, 0xFF	; 255
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <eMBFuncReadCoils+0x66>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
     4e2:	16 2f       	mov	r17, r22
            }
            *pucFrameCur++ = ucNBytes;
     4e4:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
     4e6:	88 81       	ld	r24, Y
     4e8:	99 81       	ldd	r25, Y+1	; 0x01
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	99 83       	std	Y+1, r25	; 0x01
     4ee:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     4f0:	70 2f       	mov	r23, r16
     4f2:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     4f4:	83 2f       	mov	r24, r19
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	68 2b       	or	r22, r24
     4fa:	79 2b       	or	r23, r25
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
     4fc:	6f 5f       	subi	r22, 0xFF	; 255
     4fe:	7f 4f       	sbci	r23, 0xFF	; 255
     500:	cd 01       	movw	r24, r26
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	0e 94 77 01 	call	0x2ee	; 0x2ee <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     508:	88 23       	and	r24, r24
     50a:	19 f0       	breq	.+6      	; 0x512 <__stack+0x13>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     50c:	0e 94 15 05 	call	0xa2a	; 0xa2a <prveMBError2Exception>
     510:	09 c0       	rjmp	.+18     	; 0x524 <__stack+0x25>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
     512:	88 81       	ld	r24, Y
     514:	99 81       	ldd	r25, Y+1	; 0x01
     516:	81 0f       	add	r24, r17
     518:	91 1d       	adc	r25, r1
     51a:	99 83       	std	Y+1, r25	; 0x01
     51c:	88 83       	st	Y, r24
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	01 c0       	rjmp	.+2      	; 0x524 <__stack+0x25>
     522:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	08 95       	ret

0000052e <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	fc 01       	movw	r30, r24
     538:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     53a:	88 81       	ld	r24, Y
     53c:	99 81       	ldd	r25, Y+1	; 0x01
     53e:	05 97       	sbiw	r24, 0x05	; 5
     540:	09 f0       	breq	.+2      	; 0x544 <eMBFuncReadDiscreteInputs+0x16>
     542:	46 c0       	rjmp	.+140    	; 0x5d0 <eMBFuncReadDiscreteInputs+0xa2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     544:	01 81       	ldd	r16, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     546:	df 01       	movw	r26, r30
     548:	12 96       	adiw	r26, 0x02	; 2
     54a:	32 81       	ldd	r19, Z+2	; 0x02
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
     54c:	93 81       	ldd	r25, Z+3	; 0x03
     54e:	80 e0       	ldi	r24, 0x00	; 0
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
     550:	24 81       	ldd	r18, Z+4	; 0x04
     552:	42 2f       	mov	r20, r18
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	48 2b       	or	r20, r24
     558:	59 2b       	or	r21, r25

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
     55a:	ca 01       	movw	r24, r20
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	8f 5c       	subi	r24, 0xCF	; 207
     560:	97 40       	sbci	r25, 0x07	; 7
     562:	b0 f5       	brcc	.+108    	; 0x5d0 <eMBFuncReadDiscreteInputs+0xa2>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     564:	19 82       	std	Y+1, r1	; 0x01
     566:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	80 83       	st	Z, r24
            *usLen += 1;
     56c:	88 81       	ld	r24, Y
     56e:	99 81       	ldd	r25, Y+1	; 0x01
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	99 83       	std	Y+1, r25	; 0x01
     574:	88 83       	st	Y, r24

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
     576:	ca 01       	movw	r24, r20
     578:	87 70       	andi	r24, 0x07	; 7
     57a:	90 70       	andi	r25, 0x00	; 0
     57c:	ba 01       	movw	r22, r20
     57e:	23 e0       	ldi	r18, 0x03	; 3
     580:	76 95       	lsr	r23
     582:	67 95       	ror	r22
     584:	2a 95       	dec	r18
     586:	e1 f7       	brne	.-8      	; 0x580 <eMBFuncReadDiscreteInputs+0x52>
     588:	89 2b       	or	r24, r25
     58a:	19 f0       	breq	.+6      	; 0x592 <eMBFuncReadDiscreteInputs+0x64>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
     58c:	16 2f       	mov	r17, r22
     58e:	1f 5f       	subi	r17, 0xFF	; 255
     590:	01 c0       	rjmp	.+2      	; 0x594 <eMBFuncReadDiscreteInputs+0x66>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
     592:	16 2f       	mov	r17, r22
            }
            *pucFrameCur++ = ucNBytes;
     594:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
     596:	88 81       	ld	r24, Y
     598:	99 81       	ldd	r25, Y+1	; 0x01
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	99 83       	std	Y+1, r25	; 0x01
     59e:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     5a0:	70 2f       	mov	r23, r16
     5a2:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     5a4:	83 2f       	mov	r24, r19
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	68 2b       	or	r22, r24
     5aa:	79 2b       	or	r23, r25
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
     5ac:	6f 5f       	subi	r22, 0xFF	; 255
     5ae:	7f 4f       	sbci	r23, 0xFF	; 255
     5b0:	cd 01       	movw	r24, r26
     5b2:	0e 94 79 01 	call	0x2f2	; 0x2f2 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     5b6:	88 23       	and	r24, r24
     5b8:	19 f0       	breq	.+6      	; 0x5c0 <eMBFuncReadDiscreteInputs+0x92>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     5ba:	0e 94 15 05 	call	0xa2a	; 0xa2a <prveMBError2Exception>
     5be:	09 c0       	rjmp	.+18     	; 0x5d2 <eMBFuncReadDiscreteInputs+0xa4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
     5c0:	88 81       	ld	r24, Y
     5c2:	99 81       	ldd	r25, Y+1	; 0x01
     5c4:	81 0f       	add	r24, r17
     5c6:	91 1d       	adc	r25, r1
     5c8:	99 83       	std	Y+1, r25	; 0x01
     5ca:	88 83       	st	Y, r24
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <eMBFuncReadDiscreteInputs+0xa4>
     5d0:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	08 95       	ret

000005dc <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	cf 92       	push	r12
     5e6:	df 92       	push	r13
     5e8:	ef 92       	push	r14
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	ec 01       	movw	r28, r24
     5f6:	8b 01       	movw	r16, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
     5f8:	fb 01       	movw	r30, r22
     5fa:	80 81       	ld	r24, Z
     5fc:	91 81       	ldd	r25, Z+1	; 0x01
     5fe:	0a 97       	sbiw	r24, 0x0a	; 10
     600:	08 f4       	brcc	.+2      	; 0x604 <eMBFuncReadWriteMultipleHoldingRegister+0x28>
     602:	67 c0       	rjmp	.+206    	; 0x6d2 <eMBFuncReadWriteMultipleHoldingRegister+0xf6>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
     604:	89 80       	ldd	r8, Y+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
     606:	22 e0       	ldi	r18, 0x02	; 2
     608:	a2 2e       	mov	r10, r18
     60a:	b1 2c       	mov	r11, r1
     60c:	ac 0e       	add	r10, r28
     60e:	bd 1e       	adc	r11, r29
     610:	9a 80       	ldd	r9, Y+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
     612:	9b 81       	ldd	r25, Y+3	; 0x03
     614:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
     616:	2c 81       	ldd	r18, Y+4	; 0x04
     618:	e2 2e       	mov	r14, r18
     61a:	ff 24       	eor	r15, r15
     61c:	e8 2a       	or	r14, r24
     61e:	f9 2a       	or	r15, r25

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
     620:	ed 81       	ldd	r30, Y+5	; 0x05
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
     622:	fe 81       	ldd	r31, Y+6	; 0x06
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
     624:	6f 81       	ldd	r22, Y+7	; 0x07
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
     626:	28 85       	ldd	r18, Y+8	; 0x08

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
     628:	79 85       	ldd	r23, Y+9	; 0x09

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
     62a:	c7 01       	movw	r24, r14
     62c:	01 97       	sbiw	r24, 0x01	; 1
     62e:	8d 37       	cpi	r24, 0x7D	; 125
     630:	91 05       	cpc	r25, r1
     632:	08 f0       	brcs	.+2      	; 0x636 <eMBFuncReadWriteMultipleHoldingRegister+0x5a>
     634:	53 c0       	rjmp	.+166    	; 0x6dc <eMBFuncReadWriteMultipleHoldingRegister+0x100>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
     636:	96 2f       	mov	r25, r22
     638:	80 e0       	ldi	r24, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
     63a:	42 2f       	mov	r20, r18
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	48 2b       	or	r20, r24
     640:	59 2b       	or	r21, r25

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
     642:	41 15       	cp	r20, r1
     644:	51 05       	cpc	r21, r1
     646:	09 f4       	brne	.+2      	; 0x64a <eMBFuncReadWriteMultipleHoldingRegister+0x6e>
     648:	49 c0       	rjmp	.+146    	; 0x6dc <eMBFuncReadWriteMultipleHoldingRegister+0x100>
     64a:	4a 37       	cpi	r20, 0x7A	; 122
     64c:	51 05       	cpc	r21, r1
     64e:	08 f0       	brcs	.+2      	; 0x652 <eMBFuncReadWriteMultipleHoldingRegister+0x76>
     650:	45 c0       	rjmp	.+138    	; 0x6dc <eMBFuncReadWriteMultipleHoldingRegister+0x100>
     652:	9a 01       	movw	r18, r20
     654:	22 0f       	add	r18, r18
     656:	33 1f       	adc	r19, r19
     658:	87 2f       	mov	r24, r23
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	28 17       	cp	r18, r24
     65e:	39 07       	cpc	r19, r25
     660:	e9 f5       	brne	.+122    	; 0x6dc <eMBFuncReadWriteMultipleHoldingRegister+0x100>
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
     662:	7e 2f       	mov	r23, r30
     664:	60 e0       	ldi	r22, 0x00	; 0
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
     666:	8f 2f       	mov	r24, r31
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	68 2b       	or	r22, r24
     66c:	79 2b       	or	r23, r25
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
     66e:	6f 5f       	subi	r22, 0xFF	; 255
     670:	7f 4f       	sbci	r23, 0xFF	; 255
     672:	ce 01       	movw	r24, r28
     674:	0a 96       	adiw	r24, 0x0a	; 10
     676:	21 e0       	ldi	r18, 0x01	; 1
     678:	0e 94 75 01 	call	0x2ea	; 0x2ea <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
     67c:	88 23       	and	r24, r24
     67e:	59 f5       	brne	.+86     	; 0x6d6 <eMBFuncReadWriteMultipleHoldingRegister+0xfa>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
     680:	f8 01       	movw	r30, r16
     682:	11 82       	std	Z+1, r1	; 0x01
     684:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
     686:	87 e1       	ldi	r24, 0x17	; 23
     688:	88 83       	st	Y, r24
                *usLen += 1;
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	91 83       	std	Z+1, r25	; 0x01
     692:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
     694:	67 01       	movw	r12, r14
     696:	cc 0c       	add	r12, r12
     698:	dd 1c       	adc	r13, r13
     69a:	c9 82       	std	Y+1, r12	; 0x01
                *usLen += 1;
     69c:	80 81       	ld	r24, Z
     69e:	91 81       	ldd	r25, Z+1	; 0x01
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	91 83       	std	Z+1, r25	; 0x01
     6a4:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
     6a6:	78 2d       	mov	r23, r8
     6a8:	60 e0       	ldi	r22, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
     6aa:	89 2d       	mov	r24, r9
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	68 2b       	or	r22, r24
     6b0:	79 2b       	or	r23, r25
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
     6b2:	6f 5f       	subi	r22, 0xFF	; 255
     6b4:	7f 4f       	sbci	r23, 0xFF	; 255
     6b6:	c5 01       	movw	r24, r10
     6b8:	a7 01       	movw	r20, r14
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	0e 94 75 01 	call	0x2ea	; 0x2ea <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
     6c0:	88 23       	and	r24, r24
     6c2:	49 f4       	brne	.+18     	; 0x6d6 <eMBFuncReadWriteMultipleHoldingRegister+0xfa>
                {
                    *usLen += 2 * usRegReadCount;
     6c4:	f8 01       	movw	r30, r16
     6c6:	80 81       	ld	r24, Z
     6c8:	91 81       	ldd	r25, Z+1	; 0x01
     6ca:	8c 0d       	add	r24, r12
     6cc:	9d 1d       	adc	r25, r13
     6ce:	91 83       	std	Z+1, r25	; 0x01
     6d0:	80 83       	st	Z, r24
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <eMBFuncReadWriteMultipleHoldingRegister+0x102>
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
     6d6:	0e 94 15 05 	call	0xa2a	; 0xa2a <prveMBError2Exception>
     6da:	01 c0       	rjmp	.+2      	; 0x6de <eMBFuncReadWriteMultipleHoldingRegister+0x102>
     6dc:	83 e0       	ldi	r24, 0x03	; 3
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
        }
    }
    return eStatus;
}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	0f 91       	pop	r16
     6e6:	ff 90       	pop	r15
     6e8:	ef 90       	pop	r14
     6ea:	df 90       	pop	r13
     6ec:	cf 90       	pop	r12
     6ee:	bf 90       	pop	r11
     6f0:	af 90       	pop	r10
     6f2:	9f 90       	pop	r9
     6f4:	8f 90       	pop	r8
     6f6:	08 95       	ret

000006f8 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	fc 01       	movw	r30, r24
     702:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     704:	88 81       	ld	r24, Y
     706:	99 81       	ldd	r25, Y+1	; 0x01
     708:	05 97       	sbiw	r24, 0x05	; 5
     70a:	c1 f5       	brne	.+112    	; 0x77c <eMBFuncReadHoldingRegister+0x84>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     70c:	b1 81       	ldd	r27, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     70e:	9f 01       	movw	r18, r30
     710:	2e 5f       	subi	r18, 0xFE	; 254
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	a2 81       	ldd	r26, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     716:	84 81       	ldd	r24, Z+4	; 0x04
     718:	48 2f       	mov	r20, r24
     71a:	50 e0       	ldi	r21, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
     71c:	ca 01       	movw	r24, r20
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	8d 37       	cpi	r24, 0x7D	; 125
     722:	91 05       	cpc	r25, r1
     724:	58 f5       	brcc	.+86     	; 0x77c <eMBFuncReadHoldingRegister+0x84>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     726:	19 82       	std	Y+1, r1	; 0x01
     728:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	80 83       	st	Z, r24
            *usLen += 1;
     72e:	88 81       	ld	r24, Y
     730:	99 81       	ldd	r25, Y+1	; 0x01
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	99 83       	std	Y+1, r25	; 0x01
     736:	88 83       	st	Y, r24

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
     738:	8a 01       	movw	r16, r20
     73a:	00 0f       	add	r16, r16
     73c:	11 1f       	adc	r17, r17
     73e:	01 83       	std	Z+1, r16	; 0x01
            *usLen += 1;
     740:	88 81       	ld	r24, Y
     742:	99 81       	ldd	r25, Y+1	; 0x01
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	99 83       	std	Y+1, r25	; 0x01
     748:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     74a:	7b 2f       	mov	r23, r27
     74c:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     74e:	8a 2f       	mov	r24, r26
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	68 2b       	or	r22, r24
     754:	79 2b       	or	r23, r25
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
     756:	6f 5f       	subi	r22, 0xFF	; 255
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	c9 01       	movw	r24, r18
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	0e 94 75 01 	call	0x2ea	; 0x2ea <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     762:	88 23       	and	r24, r24
     764:	19 f0       	breq	.+6      	; 0x76c <eMBFuncReadHoldingRegister+0x74>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     766:	0e 94 15 05 	call	0xa2a	; 0xa2a <prveMBError2Exception>
     76a:	09 c0       	rjmp	.+18     	; 0x77e <eMBFuncReadHoldingRegister+0x86>
            }
            else
            {
                *usLen += usRegCount * 2;
     76c:	88 81       	ld	r24, Y
     76e:	99 81       	ldd	r25, Y+1	; 0x01
     770:	80 0f       	add	r24, r16
     772:	91 1f       	adc	r25, r17
     774:	99 83       	std	Y+1, r25	; 0x01
     776:	88 83       	st	Y, r24
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	01 c0       	rjmp	.+2      	; 0x77e <eMBFuncReadHoldingRegister+0x86>
     77c:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	fc 01       	movw	r30, r24
     78e:	eb 01       	movw	r28, r22
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
     790:	88 81       	ld	r24, Y
     792:	99 81       	ldd	r25, Y+1	; 0x01
     794:	06 97       	sbiw	r24, 0x06	; 6
     796:	60 f1       	brcs	.+88     	; 0x7f0 <eMBFuncWriteMultipleHoldingRegister+0x68>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     798:	31 81       	ldd	r19, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     79a:	a2 81       	ldd	r26, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
     79c:	93 81       	ldd	r25, Z+3	; 0x03
     79e:	80 e0       	ldi	r24, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
     7a0:	24 81       	ldd	r18, Z+4	; 0x04
     7a2:	42 2f       	mov	r20, r18
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	48 2b       	or	r20, r24
     7a8:	59 2b       	or	r21, r25

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
     7aa:	25 81       	ldd	r18, Z+5	; 0x05

        if( ( usRegCount >= 1 ) &&
     7ac:	ca 01       	movw	r24, r20
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	88 37       	cpi	r24, 0x78	; 120
     7b2:	91 05       	cpc	r25, r1
     7b4:	e8 f4       	brcc	.+58     	; 0x7f0 <eMBFuncWriteMultipleHoldingRegister+0x68>
     7b6:	ca 01       	movw	r24, r20
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	28 17       	cp	r18, r24
     7be:	c1 f4       	brne	.+48     	; 0x7f0 <eMBFuncWriteMultipleHoldingRegister+0x68>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     7c0:	73 2f       	mov	r23, r19
     7c2:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     7c4:	8a 2f       	mov	r24, r26
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	68 2b       	or	r22, r24
     7ca:	79 2b       	or	r23, r25
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
     7cc:	6f 5f       	subi	r22, 0xFF	; 255
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	cf 01       	movw	r24, r30
     7d2:	06 96       	adiw	r24, 0x06	; 6
     7d4:	21 e0       	ldi	r18, 0x01	; 1
     7d6:	0e 94 75 01 	call	0x2ea	; 0x2ea <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     7da:	88 23       	and	r24, r24
     7dc:	19 f0       	breq	.+6      	; 0x7e4 <eMBFuncWriteMultipleHoldingRegister+0x5c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     7de:	0e 94 15 05 	call	0xa2a	; 0xa2a <prveMBError2Exception>
     7e2:	07 c0       	rjmp	.+14     	; 0x7f2 <eMBFuncWriteMultipleHoldingRegister+0x6a>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
     7e4:	85 e0       	ldi	r24, 0x05	; 5
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	99 83       	std	Y+1, r25	; 0x01
     7ea:	88 83       	st	Y, r24
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <eMBFuncWriteMultipleHoldingRegister+0x6a>
     7f0:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     7f8:	dc 01       	movw	r26, r24
     7fa:	fb 01       	movw	r30, r22
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     7fc:	80 81       	ld	r24, Z
     7fe:	91 81       	ldd	r25, Z+1	; 0x01
     800:	05 97       	sbiw	r24, 0x05	; 5
     802:	11 f0       	breq	.+4      	; 0x808 <eMBFuncWriteHoldingRegister+0x10>
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	08 95       	ret
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     808:	11 96       	adiw	r26, 0x01	; 1
     80a:	7c 91       	ld	r23, X
     80c:	11 97       	sbiw	r26, 0x01	; 1
     80e:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	8c 91       	ld	r24, X
     814:	12 97       	sbiw	r26, 0x02	; 2
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	68 2b       	or	r22, r24
     81a:	79 2b       	or	r23, r25
        usRegAddress++;

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
     81c:	6f 5f       	subi	r22, 0xFF	; 255
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	cd 01       	movw	r24, r26
     822:	03 96       	adiw	r24, 0x03	; 3
     824:	41 e0       	ldi	r20, 0x01	; 1
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	21 e0       	ldi	r18, 0x01	; 1
     82a:	0e 94 75 01 	call	0x2ea	; 0x2ea <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
     82e:	88 23       	and	r24, r24
     830:	11 f0       	breq	.+4      	; 0x836 <eMBFuncWriteHoldingRegister+0x3e>
        {
            eStatus = prveMBError2Exception( eRegStatus );
     832:	0e 94 15 05 	call	0xa2a	; 0xa2a <prveMBError2Exception>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     836:	08 95       	ret

00000838 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	fc 01       	movw	r30, r24
     844:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     846:	88 81       	ld	r24, Y
     848:	99 81       	ldd	r25, Y+1	; 0x01
     84a:	05 97       	sbiw	r24, 0x05	; 5
     84c:	d1 f5       	brne	.+116    	; 0x8c2 <eMBFuncReadInputRegister+0x8a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     84e:	f1 80       	ldd	r15, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     850:	df 01       	movw	r26, r30
     852:	12 96       	adiw	r26, 0x02	; 2
     854:	32 81       	ldd	r19, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
     856:	93 81       	ldd	r25, Z+3	; 0x03
     858:	80 e0       	ldi	r24, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     85a:	24 81       	ldd	r18, Z+4	; 0x04
     85c:	42 2f       	mov	r20, r18
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	48 2b       	or	r20, r24
     862:	59 2b       	or	r21, r25

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
     864:	ca 01       	movw	r24, r20
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	8c 37       	cpi	r24, 0x7C	; 124
     86a:	91 05       	cpc	r25, r1
     86c:	50 f5       	brcc	.+84     	; 0x8c2 <eMBFuncReadInputRegister+0x8a>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     86e:	19 82       	std	Y+1, r1	; 0x01
     870:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
     872:	84 e0       	ldi	r24, 0x04	; 4
     874:	80 83       	st	Z, r24
            *usLen += 1;
     876:	88 81       	ld	r24, Y
     878:	99 81       	ldd	r25, Y+1	; 0x01
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	99 83       	std	Y+1, r25	; 0x01
     87e:	88 83       	st	Y, r24

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
     880:	8a 01       	movw	r16, r20
     882:	00 0f       	add	r16, r16
     884:	11 1f       	adc	r17, r17
     886:	01 83       	std	Z+1, r16	; 0x01
            *usLen += 1;
     888:	88 81       	ld	r24, Y
     88a:	99 81       	ldd	r25, Y+1	; 0x01
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	99 83       	std	Y+1, r25	; 0x01
     890:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     892:	7f 2d       	mov	r23, r15
     894:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     896:	83 2f       	mov	r24, r19
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	68 2b       	or	r22, r24
     89c:	79 2b       	or	r23, r25

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
     89e:	6f 5f       	subi	r22, 0xFF	; 255
     8a0:	7f 4f       	sbci	r23, 0xFF	; 255
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     8a8:	88 23       	and	r24, r24
     8aa:	19 f0       	breq	.+6      	; 0x8b2 <eMBFuncReadInputRegister+0x7a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     8ac:	0e 94 15 05 	call	0xa2a	; 0xa2a <prveMBError2Exception>
     8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <eMBFuncReadInputRegister+0x8c>
            }
            else
            {
                *usLen += usRegCount * 2;
     8b2:	88 81       	ld	r24, Y
     8b4:	99 81       	ldd	r25, Y+1	; 0x01
     8b6:	80 0f       	add	r24, r16
     8b8:	91 1f       	adc	r25, r17
     8ba:	99 83       	std	Y+1, r25	; 0x01
     8bc:	88 83       	st	Y, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <eMBFuncReadInputRegister+0x8c>
     8c2:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	08 95       	ret

000008d0 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
     8d6:	9c 01       	movw	r18, r24
     8d8:	2f 5f       	subi	r18, 0xFF	; 255
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	ec e3       	ldi	r30, 0x3C	; 60
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	40 91 5c 01 	lds	r20, 0x015C
     8e4:	50 91 5d 01 	lds	r21, 0x015D
     8e8:	c9 01       	movw	r24, r18
     8ea:	bf 01       	movw	r22, r30
     8ec:	0e 94 78 09 	call	0x12f0	; 0x12f0 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
     8f0:	80 91 5c 01 	lds	r24, 0x015C
     8f4:	90 91 5d 01 	lds	r25, 0x015D
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	f8 01       	movw	r30, r16
     8fc:	91 83       	std	Z+1, r25	; 0x01
     8fe:	80 83       	st	Z, r24
    return MB_EX_NONE;
}
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	08 95       	ret

00000908 <eMBSetSlaveID>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	e8 2f       	mov	r30, r24
     90e:	e9 01       	movw	r28, r18
    eMBErrorCode    eStatus = MB_ENOERR;

    /* the first byte and second byte in the buffer is reserved for
     * the parameter ucSlaveID and the running flag. The rest of
     * the buffer is available for additional data. */
    if( usAdditionalLen + 2 < MB_FUNC_OTHER_REP_SLAVEID_BUF )
     910:	c9 01       	movw	r24, r18
     912:	02 96       	adiw	r24, 0x02	; 2
     914:	80 97       	sbiw	r24, 0x20	; 32
     916:	10 f0       	brcs	.+4      	; 0x91c <eMBSetSlaveID+0x14>
     918:	84 e0       	ldi	r24, 0x04	; 4
     91a:	23 c0       	rjmp	.+70     	; 0x962 <eMBSetSlaveID+0x5a>
    {
        usMBSlaveIDLen = 0;
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
     91c:	e0 93 3c 01 	sts	0x013C, r30
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
     920:	66 23       	and	r22, r22
     922:	11 f4       	brne	.+4      	; 0x928 <eMBSetSlaveID+0x20>
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	01 c0       	rjmp	.+2      	; 0x92a <eMBSetSlaveID+0x22>
     928:	8f ef       	ldi	r24, 0xFF	; 255
     92a:	80 93 3d 01 	sts	0x013D, r24
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	90 93 5d 01 	sts	0x015D, r25
     936:	80 93 5c 01 	sts	0x015C, r24
        if( usAdditionalLen > 0 )
     93a:	20 97       	sbiw	r28, 0x00	; 0
     93c:	89 f0       	breq	.+34     	; 0x960 <eMBSetSlaveID+0x58>
        {
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
     93e:	2e e3       	ldi	r18, 0x3E	; 62
     940:	31 e0       	ldi	r19, 0x01	; 1
     942:	c9 01       	movw	r24, r18
     944:	ba 01       	movw	r22, r20
     946:	ae 01       	movw	r20, r28
     948:	0e 94 78 09 	call	0x12f0	; 0x12f0 <memcpy>
                    ( size_t )usAdditionalLen );
            usMBSlaveIDLen += usAdditionalLen;
     94c:	80 91 5c 01 	lds	r24, 0x015C
     950:	90 91 5d 01 	lds	r25, 0x015D
     954:	8c 0f       	add	r24, r28
     956:	9d 1f       	adc	r25, r29
     958:	90 93 5d 01 	sts	0x015D, r25
     95c:	80 93 5c 01 	sts	0x015C, r24
     960:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENORES;
    }
    return eStatus;
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
     970:	30 e0       	ldi	r19, 0x00	; 0

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
     972:	db 01       	movw	r26, r22
     974:	53 e0       	ldi	r21, 0x03	; 3
     976:	b6 95       	lsr	r27
     978:	a7 95       	ror	r26
     97a:	5a 95       	dec	r21
     97c:	e1 f7       	brne	.-8      	; 0x976 <xMBUtilSetBits+0xe>
     97e:	67 70       	andi	r22, 0x07	; 7
     980:	70 70       	andi	r23, 0x00	; 0

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
     982:	e1 e0       	ldi	r30, 0x01	; 1
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	02 c0       	rjmp	.+4      	; 0x98c <xMBUtilSetBits+0x24>
     988:	ee 0f       	add	r30, r30
     98a:	ff 1f       	adc	r31, r31
     98c:	4a 95       	dec	r20
     98e:	e2 f7       	brpl	.-8      	; 0x988 <xMBUtilSetBits+0x20>
     990:	31 97       	sbiw	r30, 0x01	; 1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
     992:	8c 01       	movw	r16, r24
     994:	0a 0f       	add	r16, r26
     996:	1b 1f       	adc	r17, r27
     998:	e8 01       	movw	r28, r16
     99a:	48 81       	ld	r20, Y
     99c:	50 e0       	ldi	r21, 0x00	; 0
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
     99e:	11 96       	adiw	r26, 0x01	; 1
     9a0:	a8 0f       	add	r26, r24
     9a2:	b9 1f       	adc	r27, r25

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
     9a4:	9c 91       	ld	r25, X
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	48 2b       	or	r20, r24
     9aa:	59 2b       	or	r21, r25
     9ac:	06 2e       	mov	r0, r22
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <xMBUtilSetBits+0x4c>
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	0a 94       	dec	r0
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <xMBUtilSetBits+0x48>
     9b8:	e0 95       	com	r30
     9ba:	f0 95       	com	r31
     9bc:	4e 23       	and	r20, r30
     9be:	5f 23       	and	r21, r31
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <xMBUtilSetBits+0x5e>
     9c2:	22 0f       	add	r18, r18
     9c4:	33 1f       	adc	r19, r19
     9c6:	6a 95       	dec	r22
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <xMBUtilSetBits+0x5a>
     9ca:	42 2b       	or	r20, r18
     9cc:	53 2b       	or	r21, r19

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
     9ce:	48 83       	st	Y, r20
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
     9d0:	5c 93       	st	X, r21
}
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	1f 91       	pop	r17
     9d8:	0f 91       	pop	r16
     9da:	08 95       	ret

000009dc <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
     9dc:	fb 01       	movw	r30, r22
     9de:	b3 e0       	ldi	r27, 0x03	; 3
     9e0:	f6 95       	lsr	r31
     9e2:	e7 95       	ror	r30
     9e4:	ba 95       	dec	r27
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <xMBUtilGetBits+0x4>

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
     9e8:	dc 01       	movw	r26, r24
     9ea:	ae 0f       	add	r26, r30
     9ec:	bf 1f       	adc	r27, r31
     9ee:	2c 91       	ld	r18, X
     9f0:	30 e0       	ldi	r19, 0x00	; 0
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
     9f2:	11 96       	adiw	r26, 0x01	; 1
     9f4:	9c 91       	ld	r25, X
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	82 2b       	or	r24, r18
     9fa:	93 2b       	or	r25, r19

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
     9fc:	a3 e0       	ldi	r26, 0x03	; 3
     9fe:	ee 0f       	add	r30, r30
     a00:	ff 1f       	adc	r31, r31
     a02:	aa 95       	dec	r26
     a04:	e1 f7       	brne	.-8      	; 0x9fe <xMBUtilGetBits+0x22>
     a06:	6e 1b       	sub	r22, r30
     a08:	7f 0b       	sbc	r23, r31
     a0a:	02 c0       	rjmp	.+4      	; 0xa10 <xMBUtilGetBits+0x34>
     a0c:	96 95       	lsr	r25
     a0e:	87 95       	ror	r24
     a10:	6a 95       	dec	r22
     a12:	e2 f7       	brpl	.-8      	; 0xa0c <xMBUtilGetBits+0x30>
     a14:	21 e0       	ldi	r18, 0x01	; 1
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <xMBUtilGetBits+0x42>
     a1a:	22 0f       	add	r18, r18
     a1c:	33 1f       	adc	r19, r19
     a1e:	4a 95       	dec	r20
     a20:	e2 f7       	brpl	.-8      	; 0xa1a <xMBUtilGetBits+0x3e>
     a22:	21 50       	subi	r18, 0x01	; 1
     a24:	30 40       	sbci	r19, 0x00	; 0

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;

    return ( UCHAR ) usWordBuf;
}
     a26:	82 23       	and	r24, r18
     a28:	08 95       	ret

00000a2a <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
     a2a:	81 30       	cpi	r24, 0x01	; 1
     a2c:	29 f0       	breq	.+10     	; 0xa38 <prveMBError2Exception+0xe>
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	28 f0       	brcs	.+10     	; 0xa3c <prveMBError2Exception+0x12>
     a32:	87 30       	cpi	r24, 0x07	; 7
     a34:	39 f4       	brne	.+14     	; 0xa44 <prveMBError2Exception+0x1a>
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <prveMBError2Exception+0x16>
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	08 95       	ret
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	08 95       	ret
     a40:	86 e0       	ldi	r24, 0x06	; 6
     a42:	08 95       	ret
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;
     a44:	84 e0       	ldi	r24, 0x04	; 4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
     a46:	08 95       	ret

00000a48 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
     a48:	dc 01       	movw	r26, r24
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	2f ef       	ldi	r18, 0xFF	; 255
     a4e:	11 c0       	rjmp	.+34     	; 0xa72 <usMBCRC16+0x2a>
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
     a50:	8d 91       	ld	r24, X+
        ucCRCLo = ( UCHAR )( ucCRCHi ^ pgm_read_byte(aucCRCHi+iIndex) );
     a52:	42 2f       	mov	r20, r18
     a54:	48 27       	eor	r20, r24
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	ca 01       	movw	r24, r20
     a5a:	88 59       	subi	r24, 0x98	; 152
     a5c:	9f 4f       	sbci	r25, 0xFF	; 255
     a5e:	fc 01       	movw	r30, r24
     a60:	24 91       	lpm	r18, Z+
     a62:	23 27       	eor	r18, r19
        ucCRCHi = pgm_read_byte(aucCRCLo+iIndex);
     a64:	48 59       	subi	r20, 0x98	; 152
     a66:	5e 4f       	sbci	r21, 0xFE	; 254
     a68:	fa 01       	movw	r30, r20
     a6a:	84 91       	lpm	r24, Z+
     a6c:	61 50       	subi	r22, 0x01	; 1
     a6e:	70 40       	sbci	r23, 0x00	; 0
     a70:	38 2f       	mov	r19, r24
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
     a72:	61 15       	cp	r22, r1
     a74:	71 05       	cpc	r23, r1
     a76:	61 f7       	brne	.-40     	; 0xa50 <usMBCRC16+0x8>
     a78:	93 2f       	mov	r25, r19
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	28 2b       	or	r18, r24
     a80:	39 2b       	or	r19, r25
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ pgm_read_byte(aucCRCHi+iIndex) );
        ucCRCHi = pgm_read_byte(aucCRCLo+iIndex);
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
     a82:	c9 01       	movw	r24, r18
     a84:	08 95       	ret

00000a86 <xMBRTUTimerT35Expired>:
    return xNeedPoll;
}

BOOL
xMBRTUTimerT35Expired( void )
{
     a86:	1f 93       	push	r17
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
     a88:	80 91 5f 01 	lds	r24, 0x015F
     a8c:	88 23       	and	r24, r24
     a8e:	21 f0       	breq	.+8      	; 0xa98 <xMBRTUTimerT35Expired+0x12>
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	21 f0       	breq	.+8      	; 0xa9c <xMBRTUTimerT35Expired+0x16>
     a94:	10 e0       	ldi	r17, 0x00	; 0
     a96:	06 c0       	rjmp	.+12     	; 0xaa4 <xMBRTUTimerT35Expired+0x1e>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <xMBRTUTimerT35Expired+0x18>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 b1 06 	call	0xd62	; 0xd62 <xMBPortEventPost>
     aa2:	18 2f       	mov	r17, r24
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
     aa4:	0e 94 89 07 	call	0xf12	; 0xf12 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 93 5f 01 	sts	0x015F, r24

    return xNeedPoll;
}
     aae:	81 2f       	mov	r24, r17
     ab0:	1f 91       	pop	r17
     ab2:	08 95       	ret

00000ab4 <eMBRTUStop>:
}

void
eMBRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
     ab4:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	0e 94 c4 06 	call	0xd88	; 0xd88 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
     abe:	0e 94 89 07 	call	0xf12	; 0xf12 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
     ac2:	78 94       	sei
}
     ac4:	08 95       	ret

00000ac6 <xMBRTUTransmitFSM>:
    return xTaskNeedSwitch;
}

BOOL
xMBRTUTransmitFSM( void )
{
     ac6:	1f 93       	push	r17
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
     ac8:	80 91 5e 01 	lds	r24, 0x015E
     acc:	88 23       	and	r24, r24
     ace:	19 f0       	breq	.+6      	; 0xad6 <xMBRTUTransmitFSM+0x10>
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	29 f4       	brne	.+10     	; 0xade <xMBRTUTransmitFSM+0x18>
     ad4:	06 c0       	rjmp	.+12     	; 0xae2 <xMBRTUTransmitFSM+0x1c>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	0e 94 c4 06 	call	0xd88	; 0xd88 <vMBPortSerialEnable>
     ade:	10 e0       	ldi	r17, 0x00	; 0
     ae0:	2a c0       	rjmp	.+84     	; 0xb36 <xMBRTUTransmitFSM+0x70>
        break;

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
     ae2:	80 91 62 01 	lds	r24, 0x0162
     ae6:	90 91 63 01 	lds	r25, 0x0163
     aea:	89 2b       	or	r24, r25
     aec:	d1 f0       	breq	.+52     	; 0xb22 <xMBRTUTransmitFSM+0x5c>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
     aee:	e0 91 60 01 	lds	r30, 0x0160
     af2:	f0 91 61 01 	lds	r31, 0x0161
     af6:	80 81       	ld	r24, Z
     af8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
     afc:	80 91 60 01 	lds	r24, 0x0160
     b00:	90 91 61 01 	lds	r25, 0x0161
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	90 93 61 01 	sts	0x0161, r25
     b0a:	80 93 60 01 	sts	0x0160, r24
            usSndBufferCount--;
     b0e:	80 91 62 01 	lds	r24, 0x0162
     b12:	90 91 63 01 	lds	r25, 0x0163
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	90 93 63 01 	sts	0x0163, r25
     b1c:	80 93 62 01 	sts	0x0162, r24
     b20:	de cf       	rjmp	.-68     	; 0xade <xMBRTUTransmitFSM+0x18>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	0e 94 b1 06 	call	0xd62	; 0xd62 <xMBPortEventPost>
     b28:	18 2f       	mov	r17, r24
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	0e 94 c4 06 	call	0xd88	; 0xd88 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
     b32:	10 92 5e 01 	sts	0x015E, r1
        }
        break;
    }

    return xNeedPoll;
}
     b36:	81 2f       	mov	r24, r17
     b38:	1f 91       	pop	r17
     b3a:	08 95       	ret

00000b3c <xMBRTUReceiveFSM>:
    return eStatus;
}

BOOL
xMBRTUReceiveFSM( void )
{
     b3c:	df 93       	push	r29
     b3e:	cf 93       	push	r28
     b40:	0f 92       	push	r0
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	0e 94 23 07 	call	0xe46	; 0xe46 <xMBPortSerialGetByte>

    switch ( eRcvState )
     b4e:	80 91 5f 01 	lds	r24, 0x015F
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	39 f0       	breq	.+14     	; 0xb64 <xMBRTUReceiveFSM+0x28>
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	98 f1       	brcs	.+102    	; 0xbc0 <xMBRTUReceiveFSM+0x84>
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	b9 f0       	breq	.+46     	; 0xb8c <xMBRTUReceiveFSM+0x50>
     b5e:	83 30       	cpi	r24, 0x03	; 3
     b60:	89 f5       	brne	.+98     	; 0xbc4 <xMBRTUReceiveFSM+0x88>
     b62:	2e c0       	rjmp	.+92     	; 0xbc0 <xMBRTUReceiveFSM+0x84>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
     b64:	10 92 65 01 	sts	0x0165, r1
     b68:	10 92 64 01 	sts	0x0164, r1
        ucRTUBuf[usRcvBufferPos++] = ucByte;
     b6c:	80 91 64 01 	lds	r24, 0x0164
     b70:	90 91 65 01 	lds	r25, 0x0165
     b74:	29 81       	ldd	r18, Y+1	; 0x01
     b76:	fc 01       	movw	r30, r24
     b78:	e3 58       	subi	r30, 0x83	; 131
     b7a:	fe 4f       	sbci	r31, 0xFE	; 254
     b7c:	20 83       	st	Z, r18
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	90 93 65 01 	sts	0x0165, r25
     b84:	80 93 64 01 	sts	0x0164, r24
        eRcvState = STATE_RX_RCV;
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	18 c0       	rjmp	.+48     	; 0xbbc <xMBRTUReceiveFSM+0x80>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
     b8c:	80 91 64 01 	lds	r24, 0x0164
     b90:	90 91 65 01 	lds	r25, 0x0165
     b94:	8f 3f       	cpi	r24, 0xFF	; 255
     b96:	91 05       	cpc	r25, r1
     b98:	09 f0       	breq	.+2      	; 0xb9c <xMBRTUReceiveFSM+0x60>
     b9a:	78 f4       	brcc	.+30     	; 0xbba <xMBRTUReceiveFSM+0x7e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
     b9c:	80 91 64 01 	lds	r24, 0x0164
     ba0:	90 91 65 01 	lds	r25, 0x0165
     ba4:	29 81       	ldd	r18, Y+1	; 0x01
     ba6:	fc 01       	movw	r30, r24
     ba8:	e3 58       	subi	r30, 0x83	; 131
     baa:	fe 4f       	sbci	r31, 0xFE	; 254
     bac:	20 83       	st	Z, r18
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	90 93 65 01 	sts	0x0165, r25
     bb4:	80 93 64 01 	sts	0x0164, r24
     bb8:	03 c0       	rjmp	.+6      	; 0xbc0 <xMBRTUReceiveFSM+0x84>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	80 93 5f 01 	sts	0x015F, r24
        }
        vMBPortTimersEnable(  );
     bc0:	0e 94 77 07 	call	0xeee	; 0xeee <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	0f 90       	pop	r0
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <eMBRTUStart>:
}

void
eMBRTUStart( void )
{
    ENTER_CRITICAL_SECTION(  );
     bce:	f8 94       	cli
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
     bd0:	10 92 5f 01 	sts	0x015F, r1
    vMBPortSerialEnable( TRUE, FALSE );
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	0e 94 c4 06 	call	0xd88	; 0xd88 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
     bdc:	0e 94 77 07 	call	0xeee	; 0xeee <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
     be0:	78 94       	sei
}
     be2:	08 95       	ret

00000be4 <eMBRTUSend>:
    return eStatus;
}

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
     be4:	1f 93       	push	r17
     be6:	28 2f       	mov	r18, r24
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
     be8:	f8 94       	cli

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
     bea:	10 91 5f 01 	lds	r17, 0x015F
     bee:	11 30       	cpi	r17, 0x01	; 1
     bf0:	11 f0       	breq	.+4      	; 0xbf6 <eMBRTUSend+0x12>
     bf2:	85 e0       	ldi	r24, 0x05	; 5
     bf4:	41 c0       	rjmp	.+130    	; 0xc78 <eMBRTUSend+0x94>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
     bf6:	fb 01       	movw	r30, r22
     bf8:	31 97       	sbiw	r30, 0x01	; 1
     bfa:	f0 93 61 01 	sts	0x0161, r31
     bfe:	e0 93 60 01 	sts	0x0160, r30
        usSndBufferCount = 1;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	90 93 63 01 	sts	0x0163, r25
     c0a:	80 93 62 01 	sts	0x0162, r24

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
     c0e:	20 83       	st	Z, r18
        usSndBufferCount += usLength;
     c10:	80 91 62 01 	lds	r24, 0x0162
     c14:	90 91 63 01 	lds	r25, 0x0163
     c18:	84 0f       	add	r24, r20
     c1a:	95 1f       	adc	r25, r21
     c1c:	90 93 63 01 	sts	0x0163, r25
     c20:	80 93 62 01 	sts	0x0162, r24

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
     c24:	60 91 62 01 	lds	r22, 0x0162
     c28:	70 91 63 01 	lds	r23, 0x0163
     c2c:	cf 01       	movw	r24, r30
     c2e:	0e 94 24 05 	call	0xa48	; 0xa48 <usMBCRC16>
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
     c32:	20 91 62 01 	lds	r18, 0x0162
     c36:	30 91 63 01 	lds	r19, 0x0163
     c3a:	f9 01       	movw	r30, r18
     c3c:	e3 58       	subi	r30, 0x83	; 131
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	80 83       	st	Z, r24
     c42:	2f 5f       	subi	r18, 0xFF	; 255
     c44:	3f 4f       	sbci	r19, 0xFF	; 255
     c46:	30 93 63 01 	sts	0x0163, r19
     c4a:	20 93 62 01 	sts	0x0162, r18
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
     c4e:	20 91 62 01 	lds	r18, 0x0162
     c52:	30 91 63 01 	lds	r19, 0x0163
     c56:	f9 01       	movw	r30, r18
     c58:	e3 58       	subi	r30, 0x83	; 131
     c5a:	fe 4f       	sbci	r31, 0xFE	; 254
     c5c:	90 83       	st	Z, r25
     c5e:	2f 5f       	subi	r18, 0xFF	; 255
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
     c62:	30 93 63 01 	sts	0x0163, r19
     c66:	20 93 62 01 	sts	0x0162, r18

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
     c6a:	10 93 5e 01 	sts	0x015E, r17
        vMBPortSerialEnable( FALSE, TRUE );
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	0e 94 c4 06 	call	0xd88	; 0xd88 <vMBPortSerialEnable>
     c76:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
    {
        eStatus = MB_EIO;
    }
    EXIT_CRITICAL_SECTION(  );
     c78:	78 94       	sei
    return eStatus;
}
     c7a:	1f 91       	pop	r17
     c7c:	08 95       	ret

00000c7e <eMBRTUReceive>:
    EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	ec 01       	movw	r28, r24
     c8c:	7b 01       	movw	r14, r22
     c8e:	8a 01       	movw	r16, r20
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
     c90:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
     c92:	80 91 64 01 	lds	r24, 0x0164
     c96:	90 91 65 01 	lds	r25, 0x0165
     c9a:	04 97       	sbiw	r24, 0x04	; 4
     c9c:	e0 f0       	brcs	.+56     	; 0xcd6 <eMBRTUReceive+0x58>
     c9e:	60 91 64 01 	lds	r22, 0x0164
     ca2:	70 91 65 01 	lds	r23, 0x0165
     ca6:	8d e7       	ldi	r24, 0x7D	; 125
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	0e 94 24 05 	call	0xa48	; 0xa48 <usMBCRC16>
     cae:	89 2b       	or	r24, r25
     cb0:	91 f4       	brne	.+36     	; 0xcd6 <eMBRTUReceive+0x58>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
     cb2:	80 91 7d 01 	lds	r24, 0x017D
     cb6:	88 83       	st	Y, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
     cb8:	80 91 64 01 	lds	r24, 0x0164
     cbc:	90 91 65 01 	lds	r25, 0x0165
     cc0:	03 97       	sbiw	r24, 0x03	; 3
     cc2:	f8 01       	movw	r30, r16
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
     cc8:	8e e7       	ldi	r24, 0x7E	; 126
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	f7 01       	movw	r30, r14
     cce:	91 83       	std	Z+1, r25	; 0x01
     cd0:	80 83       	st	Z, r24
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <eMBRTUReceive+0x5a>

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
     cd6:	85 e0       	ldi	r24, 0x05	; 5
    else
    {
        eStatus = MB_EIO;
    }

    EXIT_CRITICAL_SECTION(  );
     cd8:	78 94       	sei
    return eStatus;
}
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	08 95       	ret

00000ce8 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	86 2f       	mov	r24, r22
     cf4:	69 01       	movw	r12, r18
     cf6:	7a 01       	movw	r14, r20
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
     cf8:	f8 94       	cli

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
     cfa:	ba 01       	movw	r22, r20
     cfc:	a9 01       	movw	r20, r18
     cfe:	28 e0       	ldi	r18, 0x08	; 8
     d00:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <xMBPortSerialInit>
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	09 f5       	brne	.+66     	; 0xd4a <eMBRTUInit+0x62>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	c8 16       	cp	r12, r24
     d0c:	8b e4       	ldi	r24, 0x4B	; 75
     d0e:	d8 06       	cpc	r13, r24
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	e8 06       	cpc	r14, r24
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	f8 06       	cpc	r15, r24
     d18:	28 f0       	brcs	.+10     	; 0xd24 <eMBRTUInit+0x3c>
     d1a:	83 e2       	ldi	r24, 0x23	; 35
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	a0 e0       	ldi	r26, 0x00	; 0
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	0d c0       	rjmp	.+26     	; 0xd3e <eMBRTUInit+0x56>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
     d24:	cc 0c       	add	r12, r12
     d26:	dd 1c       	adc	r13, r13
     d28:	ee 1c       	adc	r14, r14
     d2a:	ff 1c       	adc	r15, r15
     d2c:	60 ea       	ldi	r22, 0xA0	; 160
     d2e:	7f e7       	ldi	r23, 0x7F	; 127
     d30:	87 e1       	ldi	r24, 0x17	; 23
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	a7 01       	movw	r20, r14
     d36:	96 01       	movw	r18, r12
     d38:	0e 94 56 09 	call	0x12ac	; 0x12ac <__udivmodsi4>
     d3c:	c9 01       	movw	r24, r18
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
     d3e:	0e 94 93 07 	call	0xf26	; 0xf26 <xMBPortTimersInit>
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	11 f4       	brne	.+4      	; 0xd4a <eMBRTUInit+0x62>
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <eMBRTUInit+0x64>
     d4a:	83 e0       	ldi	r24, 0x03	; 3
        {
            eStatus = MB_EPORTERR;
        }
    }
    EXIT_CRITICAL_SECTION(  );
     d4c:	78 94       	sei

    return eStatus;
}
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	08 95       	ret

00000d5a <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
     d5a:	10 92 67 01 	sts	0x0167, r1
    return TRUE;
}
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	08 95       	ret

00000d62 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	90 93 67 01 	sts	0x0167, r25
    eQueuedEvent = eEvent;
     d68:	80 93 66 01 	sts	0x0166, r24
    return TRUE;
}
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	08 95       	ret

00000d70 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
     d70:	fc 01       	movw	r30, r24
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
     d72:	80 91 67 01 	lds	r24, 0x0167
     d76:	88 23       	and	r24, r24
     d78:	31 f0       	breq	.+12     	; 0xd86 <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
     d7a:	80 91 66 01 	lds	r24, 0x0166
     d7e:	80 83       	st	Z, r24
        xEventInQueue = FALSE;
     d80:	10 92 67 01 	sts	0x0167, r1
     d84:	81 e0       	ldi	r24, 0x01	; 1
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
     d86:	08 95       	ret

00000d88 <vMBPortSerialEnable>:
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
    UCSRB |= _BV( TXEN ) | _BV(TXCIE);
#else
    UCSRB |= _BV( TXEN );
     d88:	90 91 c1 00 	lds	r25, 0x00C1
     d8c:	98 60       	ori	r25, 0x08	; 8
     d8e:	90 93 c1 00 	sts	0x00C1, r25
#endif

    if( xRxEnable )
     d92:	88 23       	and	r24, r24
     d94:	21 f0       	breq	.+8      	; 0xd9e <vMBPortSerialEnable+0x16>
    {
        UCSRB |= _BV( RXEN ) | _BV( RXCIE );
     d96:	80 91 c1 00 	lds	r24, 0x00C1
     d9a:	80 69       	ori	r24, 0x90	; 144
     d9c:	03 c0       	rjmp	.+6      	; 0xda4 <vMBPortSerialEnable+0x1c>
    }
    else
    {
        UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
     d9e:	80 91 c1 00 	lds	r24, 0x00C1
     da2:	8f 76       	andi	r24, 0x6F	; 111
     da4:	80 93 c1 00 	sts	0x00C1, r24
    }

    if( xTxEnable )
     da8:	66 23       	and	r22, r22
     daa:	21 f0       	breq	.+8      	; 0xdb4 <vMBPortSerialEnable+0x2c>
    {
        UCSRB |= _BV( TXEN ) | _BV( UDRE );
     dac:	80 91 c1 00 	lds	r24, 0x00C1
     db0:	88 62       	ori	r24, 0x28	; 40
     db2:	03 c0       	rjmp	.+6      	; 0xdba <vMBPortSerialEnable+0x32>
        RTS_HIGH;
#endif
    }
    else
    {
        UCSRB &= ~( _BV( UDRE ) );
     db4:	80 91 c1 00 	lds	r24, 0x00C1
     db8:	8f 7d       	andi	r24, 0xDF	; 223
     dba:	80 93 c1 00 	sts	0x00C1, r24
     dbe:	08 95       	ret

00000dc0 <xMBPortSerialInit>:
    }
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	6a 01       	movw	r12, r20
     dce:	7b 01       	movw	r14, r22
     dd0:	12 2f       	mov	r17, r18
    UCHAR ucUCSRC = 0;

    /* prevent compiler warning. */
    (void)ucPORT;
	
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	cc 0c       	add	r12, r12
     dd6:	dd 1c       	adc	r13, r13
     dd8:	ee 1c       	adc	r14, r14
     dda:	ff 1c       	adc	r15, r15
     ddc:	8a 95       	dec	r24
     dde:	d1 f7       	brne	.-12     	; 0xdd4 <xMBPortSerialInit+0x14>
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	74 e2       	ldi	r23, 0x24	; 36
     de4:	84 ef       	ldi	r24, 0xF4	; 244
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	a7 01       	movw	r20, r14
     dea:	96 01       	movw	r18, r12
     dec:	0e 94 56 09 	call	0x12ac	; 0x12ac <__udivmodsi4>
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	30 40       	sbci	r19, 0x00	; 0
     df4:	30 93 c5 00 	sts	0x00C5, r19
     df8:	20 93 c4 00 	sts	0x00C4, r18

    switch ( eParity )
     dfc:	01 30       	cpi	r16, 0x01	; 1
     dfe:	31 f0       	breq	.+12     	; 0xe0c <xMBPortSerialInit+0x4c>
     e00:	02 30       	cpi	r16, 0x02	; 2
     e02:	11 f4       	brne	.+4      	; 0xe08 <xMBPortSerialInit+0x48>
     e04:	90 e2       	ldi	r25, 0x20	; 32
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <xMBPortSerialInit+0x4e>
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <xMBPortSerialInit+0x4e>
     e0c:	90 e3       	ldi	r25, 0x30	; 48
            break;
        case MB_PAR_NONE:
            break;
    }

    switch ( ucDataBits )
     e0e:	17 30       	cpi	r17, 0x07	; 7
     e10:	21 f0       	breq	.+8      	; 0xe1a <xMBPortSerialInit+0x5a>
     e12:	18 30       	cpi	r17, 0x08	; 8
     e14:	19 f4       	brne	.+6      	; 0xe1c <xMBPortSerialInit+0x5c>
    {
        case 8:
            ucUCSRC |= _BV( UCSZ0 ) | _BV( UCSZ1 );
     e16:	96 60       	ori	r25, 0x06	; 6
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <xMBPortSerialInit+0x5c>
            break;
        case 7:
            ucUCSRC |= _BV( UCSZ1 );
     e1a:	94 60       	ori	r25, 0x04	; 4
            break;
    }

#if defined (__AVR_ATmega168__)
    UCSRC |= ucUCSRC;
     e1c:	80 91 c2 00 	lds	r24, 0x00C2
     e20:	98 2b       	or	r25, r24
     e22:	90 93 c2 00 	sts	0x00C2, r25
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega128__)
    UCSRC |= ucUCSRC;
#endif

    vMBPortSerialEnable( FALSE, FALSE );
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	0e 94 c4 06 	call	0xd88	; 0xd88 <vMBPortSerialEnable>

#ifdef RTS_ENABLE
    RTS_INIT;
#endif
    return TRUE;
}
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	08 95       	ret

00000e3e <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
    UDR = ucByte;
     e3e:	80 93 c6 00 	sts	0x00C6, r24
    return TRUE;
}
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	08 95       	ret

00000e46 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
     e46:	fc 01       	movw	r30, r24
    *pucByte = UDR;
     e48:	80 91 c6 00 	lds	r24, 0x00C6
     e4c:	80 83       	st	Z, r24
    return TRUE;
}
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	08 95       	ret

00000e52 <__vector_19>:

SIGNAL( SIG_USART_DATA )
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
    pxMBFrameCBTransmitterEmpty(  );
     e74:	e0 91 7d 02 	lds	r30, 0x027D
     e78:	f0 91 7e 02 	lds	r31, 0x027E
     e7c:	09 95       	icall
}
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <__vector_18>:

SIGNAL( SIG_USART_RECV )
{
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	2f 93       	push	r18
     eac:	3f 93       	push	r19
     eae:	4f 93       	push	r20
     eb0:	5f 93       	push	r21
     eb2:	6f 93       	push	r22
     eb4:	7f 93       	push	r23
     eb6:	8f 93       	push	r24
     eb8:	9f 93       	push	r25
     eba:	af 93       	push	r26
     ebc:	bf 93       	push	r27
     ebe:	ef 93       	push	r30
     ec0:	ff 93       	push	r31
    pxMBFrameCBByteReceived(  );
     ec2:	e0 91 81 02 	lds	r30, 0x0281
     ec6:	f0 91 82 02 	lds	r31, 0x0282
     eca:	09 95       	icall
}
     ecc:	ff 91       	pop	r31
     ece:	ef 91       	pop	r30
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	0f 90       	pop	r0
     eea:	1f 90       	pop	r1
     eec:	18 95       	reti

00000eee <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
    TCNT0 = 0x0000;
     eee:	16 bc       	out	0x26, r1	; 38
    if( usTimerOCRADelta > 0 )
     ef0:	20 91 68 01 	lds	r18, 0x0168
     ef4:	30 91 69 01 	lds	r19, 0x0169
     ef8:	21 15       	cp	r18, r1
     efa:	31 05       	cpc	r19, r1
     efc:	31 f0       	breq	.+12     	; 0xf0a <vMBPortTimersEnable+0x1c>
    {
        TIMSK0 |= _BV( OCIE0A );
     efe:	80 91 6e 00 	lds	r24, 0x006E
     f02:	82 60       	ori	r24, 0x02	; 2
     f04:	80 93 6e 00 	sts	0x006E, r24
        OCR0A = usTimerOCRADelta;	// MUST be < 256
     f08:	27 bd       	out	0x27, r18	; 39
    }

    TCCR0B |= _BV( CS12 ) | _BV( CS10 );	// Fosc/1024
     f0a:	85 b5       	in	r24, 0x25	; 37
     f0c:	85 60       	ori	r24, 0x05	; 5
     f0e:	85 bd       	out	0x25, r24	; 37
}
     f10:	08 95       	ret

00000f12 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
    /* Disable the timer. */
    TCCR0B &= ~( _BV( CS12 ) | _BV( CS10 ) );
     f12:	85 b5       	in	r24, 0x25	; 37
     f14:	8a 7f       	andi	r24, 0xFA	; 250
     f16:	85 bd       	out	0x25, r24	; 37
    /* Disable the output compare interrupts for channel A */
    TIMSK0 &= ~( _BV( OCIE0A ) );
     f18:	ee e6       	ldi	r30, 0x6E	; 110
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8d 7f       	andi	r24, 0xFD	; 253
     f20:	80 83       	st	Z, r24
    /* Clear output compare flags for channel A/B. */
    TIFR0 |= _BV( OCF0A ) ;
     f22:	a9 9a       	sbi	0x15, 1	; 21
}
     f24:	08 95       	ret

00000f26 <xMBPortTimersInit>:
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTimerout50us )
{
    /* Calculate overflow counter an OCR values for Timer0. */
    usTimerOCRADelta =
     f26:	a0 e0       	ldi	r26, 0x00	; 0
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	29 e0       	ldi	r18, 0x09	; 9
     f30:	3d e3       	ldi	r19, 0x3D	; 61
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	0e 94 37 09 	call	0x126e	; 0x126e <__mulsi3>
     f3a:	20 e2       	ldi	r18, 0x20	; 32
     f3c:	3e e4       	ldi	r19, 0x4E	; 78
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	0e 94 56 09 	call	0x12ac	; 0x12ac <__udivmodsi4>
     f46:	30 93 69 01 	sts	0x0169, r19
     f4a:	20 93 68 01 	sts	0x0168, r18
        ( MB_TIMER_TICKS * usTimerout50us ) / ( MB_50US_TICKS );
	if( usTimerOCRADelta > 255) return FALSE;
     f4e:	2f 3f       	cpi	r18, 0xFF	; 255
     f50:	31 05       	cpc	r19, r1
     f52:	19 f0       	breq	.+6      	; 0xf5a <xMBPortTimersInit+0x34>
     f54:	10 f0       	brcs	.+4      	; 0xf5a <xMBPortTimersInit+0x34>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	08 95       	ret
    TCCR0A = 0x00;		// Normal Mode + Output Compare interrupt
     f5a:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     f5c:	15 bc       	out	0x25, r1	; 37
//    TCCR1C = 0x00;

    vMBPortTimersDisable(  );
     f5e:	0e 94 89 07 	call	0xf12	; 0xf12 <vMBPortTimersDisable>
     f62:	81 e0       	ldi	r24, 0x01	; 1

    return TRUE;
}
     f64:	08 95       	ret

00000f66 <__vector_14>:
    /* Clear output compare flags for channel A/B. */
    TIFR0 |= _BV( OCF0A ) ;
}

SIGNAL( SIG_OUTPUT_COMPARE0A )
{
     f66:	1f 92       	push	r1
     f68:	0f 92       	push	r0
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	0f 92       	push	r0
     f6e:	11 24       	eor	r1, r1
     f70:	2f 93       	push	r18
     f72:	3f 93       	push	r19
     f74:	4f 93       	push	r20
     f76:	5f 93       	push	r21
     f78:	6f 93       	push	r22
     f7a:	7f 93       	push	r23
     f7c:	8f 93       	push	r24
     f7e:	9f 93       	push	r25
     f80:	af 93       	push	r26
     f82:	bf 93       	push	r27
     f84:	ef 93       	push	r30
     f86:	ff 93       	push	r31
    ( void )pxMBPortCBTimerExpired(  );
     f88:	e0 91 7f 02 	lds	r30, 0x027F
     f8c:	f0 91 80 02 	lds	r31, 0x0280
     f90:	09 95       	icall
}
     f92:	ff 91       	pop	r31
     f94:	ef 91       	pop	r30
     f96:	bf 91       	pop	r27
     f98:	af 91       	pop	r26
     f9a:	9f 91       	pop	r25
     f9c:	8f 91       	pop	r24
     f9e:	7f 91       	pop	r23
     fa0:	6f 91       	pop	r22
     fa2:	5f 91       	pop	r21
     fa4:	4f 91       	pop	r20
     fa6:	3f 91       	pop	r19
     fa8:	2f 91       	pop	r18
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <eMBRegisterCB>:
}
#endif

eMBErrorCode
eMBRegisterCB( UCHAR ucFunctionCode, pxMBFunctionHandler pxHandler )
{
     fb4:	48 2f       	mov	r20, r24
    int             i;
    eMBErrorCode    eStatus;

    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
     fb6:	18 16       	cp	r1, r24
     fb8:	14 f0       	brlt	.+4      	; 0xfbe <eMBRegisterCB+0xa>
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	08 95       	ret
    {
        ENTER_CRITICAL_SECTION(  );
     fbe:	f8 94       	cli
        if( pxHandler != NULL )
     fc0:	61 15       	cp	r22, r1
     fc2:	71 05       	cpc	r23, r1
     fc4:	f9 f0       	breq	.+62     	; 0x1004 <eMBRegisterCB+0x50>
     fc6:	e5 e0       	ldi	r30, 0x05	; 5
     fc8:	f1 e0       	ldi	r31, 0x01	; 1
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 e0       	ldi	r25, 0x00	; 0
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                if( ( xFuncHandlers[i].pxHandler == NULL ) ||
     fce:	20 81       	ld	r18, Z
     fd0:	31 81       	ldd	r19, Z+1	; 0x01
     fd2:	21 15       	cp	r18, r1
     fd4:	31 05       	cpc	r19, r1
     fd6:	19 f0       	breq	.+6      	; 0xfde <eMBRegisterCB+0x2a>
     fd8:	26 17       	cp	r18, r22
     fda:	37 07       	cpc	r19, r23
     fdc:	69 f4       	brne	.+26     	; 0xff8 <eMBRegisterCB+0x44>
                    ( xFuncHandlers[i].pxHandler == pxHandler ) )
                {
                    xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
     fde:	fc 01       	movw	r30, r24
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	e8 0f       	add	r30, r24
     fe6:	f9 1f       	adc	r31, r25
     fe8:	ec 5f       	subi	r30, 0xFC	; 252
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	40 83       	st	Z, r20
                    xFuncHandlers[i].pxHandler = pxHandler;
     fee:	72 83       	std	Z+2, r23	; 0x02
     ff0:	61 83       	std	Z+1, r22	; 0x01
                    break;
                }
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
     ff2:	40 97       	sbiw	r24, 0x10	; 16
     ff4:	11 f5       	brne	.+68     	; 0x103a <eMBRegisterCB+0x86>
     ff6:	1f c0       	rjmp	.+62     	; 0x1036 <eMBRegisterCB+0x82>
    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	33 96       	adiw	r30, 0x03	; 3
     ffc:	80 31       	cpi	r24, 0x10	; 16
     ffe:	91 05       	cpc	r25, r1
    1000:	31 f7       	brne	.-52     	; 0xfce <eMBRegisterCB+0x1a>
    1002:	19 c0       	rjmp	.+50     	; 0x1036 <eMBRegisterCB+0x82>
    1004:	e4 e0       	ldi	r30, 0x04	; 4
    1006:	f1 e0       	ldi	r31, 0x01	; 1
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
        }
        else
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    100c:	80 81       	ld	r24, Z
    100e:	84 17       	cp	r24, r20
    1010:	59 f4       	brne	.+22     	; 0x1028 <eMBRegisterCB+0x74>
                {
                    xFuncHandlers[i].ucFunctionCode = 0;
    1012:	f9 01       	movw	r30, r18
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	e2 0f       	add	r30, r18
    101a:	f3 1f       	adc	r31, r19
    101c:	ec 5f       	subi	r30, 0xFC	; 252
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	10 82       	st	Z, r1
                    xFuncHandlers[i].pxHandler = NULL;
    1022:	12 82       	std	Z+2, r1	; 0x02
    1024:	11 82       	std	Z+1, r1	; 0x01
    1026:	09 c0       	rjmp	.+18     	; 0x103a <eMBRegisterCB+0x86>
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
        }
        else
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    1028:	2f 5f       	subi	r18, 0xFF	; 255
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	33 96       	adiw	r30, 0x03	; 3
    102e:	20 31       	cpi	r18, 0x10	; 16
    1030:	31 05       	cpc	r19, r1
    1032:	61 f7       	brne	.-40     	; 0x100c <eMBRegisterCB+0x58>
    1034:	02 c0       	rjmp	.+4      	; 0x103a <eMBRegisterCB+0x86>
    1036:	84 e0       	ldi	r24, 0x04	; 4
    1038:	01 c0       	rjmp	.+2      	; 0x103c <eMBRegisterCB+0x88>
    103a:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
            /* Remove can't fail. */
            eStatus = MB_ENOERR;
        }
        EXIT_CRITICAL_SECTION(  );
    103c:	78 94       	sei
    else
    {
        eStatus = MB_EINVAL;
    }
    return eStatus;
}
    103e:	08 95       	ret

00001040 <eMBClose>:
eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
    1040:	80 91 03 01 	lds	r24, 0x0103
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	11 f0       	breq	.+4      	; 0x104c <eMBClose+0xc>
    1048:	86 e0       	ldi	r24, 0x06	; 6
    104a:	08 95       	ret
    {
        if( pvMBFrameCloseCur != NULL )
    104c:	e0 91 7b 01 	lds	r30, 0x017B
    1050:	f0 91 7c 01 	lds	r31, 0x017C
    1054:	30 97       	sbiw	r30, 0x00	; 0
    1056:	11 f4       	brne	.+4      	; 0x105c <eMBClose+0x1c>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	08 95       	ret
        {
            pvMBFrameCloseCur(  );
    105c:	09 95       	icall
    105e:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
    1060:	08 95       	ret

00001062 <eMBEnable>:
eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
    1062:	80 91 03 01 	lds	r24, 0x0103
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	11 f0       	breq	.+4      	; 0x106e <eMBEnable+0xc>
    106a:	86 e0       	ldi	r24, 0x06	; 6
    106c:	08 95       	ret
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
    106e:	e0 91 75 01 	lds	r30, 0x0175
    1072:	f0 91 76 01 	lds	r31, 0x0176
    1076:	09 95       	icall
        eMBState = STATE_ENABLED;
    1078:	10 92 03 01 	sts	0x0103, r1
    107c:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
    107e:	08 95       	ret

00001080 <eMBDisable>:
eMBErrorCode
eMBDisable( void )
{
    eMBErrorCode    eStatus;

    if( eMBState == STATE_ENABLED )
    1080:	80 91 03 01 	lds	r24, 0x0103
    1084:	88 23       	and	r24, r24
    1086:	51 f4       	brne	.+20     	; 0x109c <eMBDisable+0x1c>
    {
        pvMBFrameStopCur(  );
    1088:	e0 91 77 01 	lds	r30, 0x0177
    108c:	f0 91 78 01 	lds	r31, 0x0178
    1090:	09 95       	icall
        eMBState = STATE_DISABLED;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	80 93 03 01 	sts	0x0103, r24
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret
        eStatus = MB_ENOERR;
    }
    else if( eMBState == STATE_DISABLED )
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	11 f0       	breq	.+4      	; 0x10a4 <eMBDisable+0x24>
    10a0:	86 e0       	ldi	r24, 0x06	; 6
    10a2:	08 95       	ret
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
    10a6:	08 95       	ret

000010a8 <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    10b2:	80 91 03 01 	lds	r24, 0x0103
    10b6:	88 23       	and	r24, r24
    10b8:	11 f0       	breq	.+4      	; 0x10be <eMBPoll+0x16>
    10ba:	86 e0       	ldi	r24, 0x06	; 6
    10bc:	7c c0       	rjmp	.+248    	; 0x11b6 <eMBPoll+0x10e>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
    10be:	ce 01       	movw	r24, r28
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	0e 94 b8 06 	call	0xd70	; 0xd70 <xMBPortEventGet>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	09 f0       	breq	.+2      	; 0x10cc <eMBPoll+0x24>
    10ca:	74 c0       	rjmp	.+232    	; 0x11b4 <eMBPoll+0x10c>
    {
        switch ( eEvent )
    10cc:	99 81       	ldd	r25, Y+1	; 0x01
    10ce:	91 30       	cpi	r25, 0x01	; 1
    10d0:	21 f0       	breq	.+8      	; 0x10da <eMBPoll+0x32>
    10d2:	92 30       	cpi	r25, 0x02	; 2
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <eMBPoll+0x30>
    10d6:	6e c0       	rjmp	.+220    	; 0x11b4 <eMBPoll+0x10c>
    10d8:	1b c0       	rjmp	.+54     	; 0x1110 <eMBPoll+0x68>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
    10da:	e0 91 79 01 	lds	r30, 0x0179
    10de:	f0 91 7a 01 	lds	r31, 0x017A
    10e2:	8e e6       	ldi	r24, 0x6E	; 110
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	6f e6       	ldi	r22, 0x6F	; 111
    10e8:	71 e0       	ldi	r23, 0x01	; 1
    10ea:	4b e6       	ldi	r20, 0x6B	; 107
    10ec:	51 e0       	ldi	r21, 0x01	; 1
    10ee:	09 95       	icall
            if( eStatus == MB_ENOERR )
    10f0:	88 23       	and	r24, r24
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <eMBPoll+0x4e>
    10f4:	5f c0       	rjmp	.+190    	; 0x11b4 <eMBPoll+0x10c>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
    10f6:	90 91 6e 01 	lds	r25, 0x016E
    10fa:	80 91 71 01 	lds	r24, 0x0171
    10fe:	98 17       	cp	r25, r24
    1100:	19 f0       	breq	.+6      	; 0x1108 <eMBPoll+0x60>
    1102:	99 23       	and	r25, r25
    1104:	09 f0       	breq	.+2      	; 0x1108 <eMBPoll+0x60>
    1106:	56 c0       	rjmp	.+172    	; 0x11b4 <eMBPoll+0x10c>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	0e 94 b1 06 	call	0xd62	; 0xd62 <xMBPortEventPost>
    110e:	52 c0       	rjmp	.+164    	; 0x11b4 <eMBPoll+0x10c>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
    1110:	a0 91 6f 01 	lds	r26, 0x016F
    1114:	b0 91 70 01 	lds	r27, 0x0170
    1118:	3c 91       	ld	r19, X
    111a:	30 93 6d 01 	sts	0x016D, r19
            eException = MB_EX_ILLEGAL_FUNCTION;
    111e:	80 93 6a 01 	sts	0x016A, r24
    1122:	e4 e0       	ldi	r30, 0x04	; 4
    1124:	f1 e0       	ldi	r31, 0x01	; 1
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
    112a:	20 81       	ld	r18, Z
    112c:	22 23       	and	r18, r18
    112e:	c1 f0       	breq	.+48     	; 0x1160 <eMBPoll+0xb8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    1130:	23 17       	cp	r18, r19
    1132:	89 f4       	brne	.+34     	; 0x1156 <eMBPoll+0xae>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
    1134:	fc 01       	movw	r30, r24
    1136:	ee 0f       	add	r30, r30
    1138:	ff 1f       	adc	r31, r31
    113a:	e8 0f       	add	r30, r24
    113c:	f9 1f       	adc	r31, r25
    113e:	ec 5f       	subi	r30, 0xFC	; 252
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	01 80       	ldd	r0, Z+1	; 0x01
    1144:	f2 81       	ldd	r31, Z+2	; 0x02
    1146:	e0 2d       	mov	r30, r0
    1148:	cd 01       	movw	r24, r26
    114a:	6b e6       	ldi	r22, 0x6B	; 107
    114c:	71 e0       	ldi	r23, 0x01	; 1
    114e:	09 95       	icall
    1150:	80 93 6a 01 	sts	0x016A, r24
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <eMBPoll+0xb8>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	33 96       	adiw	r30, 0x03	; 3
    115a:	80 31       	cpi	r24, 0x10	; 16
    115c:	91 05       	cpc	r25, r1
    115e:	29 f7       	brne	.-54     	; 0x112a <eMBPoll+0x82>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
    1160:	80 91 6e 01 	lds	r24, 0x016E
    1164:	88 23       	and	r24, r24
    1166:	31 f1       	breq	.+76     	; 0x11b4 <eMBPoll+0x10c>
            {
                if( eException != MB_EX_NONE )
    1168:	90 91 6a 01 	lds	r25, 0x016A
    116c:	99 23       	and	r25, r25
    116e:	99 f0       	breq	.+38     	; 0x1196 <eMBPoll+0xee>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
    1170:	e0 91 6f 01 	lds	r30, 0x016F
    1174:	f0 91 70 01 	lds	r31, 0x0170
    1178:	80 91 6d 01 	lds	r24, 0x016D
    117c:	80 68       	ori	r24, 0x80	; 128
    117e:	80 83       	st	Z, r24
                    ucMBFrame[usLength++] = eException;
    1180:	e0 91 6f 01 	lds	r30, 0x016F
    1184:	f0 91 70 01 	lds	r31, 0x0170
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	90 93 6c 01 	sts	0x016C, r25
    1192:	80 93 6b 01 	sts	0x016B, r24
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
    1196:	60 91 6f 01 	lds	r22, 0x016F
    119a:	70 91 70 01 	lds	r23, 0x0170
    119e:	40 91 6b 01 	lds	r20, 0x016B
    11a2:	50 91 6c 01 	lds	r21, 0x016C
    11a6:	e0 91 73 01 	lds	r30, 0x0173
    11aa:	f0 91 74 01 	lds	r31, 0x0174
    11ae:	80 91 71 01 	lds	r24, 0x0171
    11b2:	09 95       	icall
    11b4:	80 e0       	ldi	r24, 0x00	; 0
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    11be:	ef 92       	push	r14
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	98 2f       	mov	r25, r24
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
    11c6:	86 2f       	mov	r24, r22
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	87 3f       	cpi	r24, 0xF7	; 247
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <eMBInit+0x12>
    11ce:	49 c0       	rjmp	.+146    	; 0x1262 <eMBInit+0xa4>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
    11d0:	60 93 71 01 	sts	0x0171, r22

        switch ( eMode )
    11d4:	99 23       	and	r25, r25
    11d6:	09 f0       	breq	.+2      	; 0x11da <eMBInit+0x1c>
    11d8:	44 c0       	rjmp	.+136    	; 0x1262 <eMBInit+0xa4>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
    11da:	87 ee       	ldi	r24, 0xE7	; 231
    11dc:	95 e0       	ldi	r25, 0x05	; 5
    11de:	90 93 76 01 	sts	0x0176, r25
    11e2:	80 93 75 01 	sts	0x0175, r24
            pvMBFrameStopCur = eMBRTUStop;
    11e6:	8a e5       	ldi	r24, 0x5A	; 90
    11e8:	95 e0       	ldi	r25, 0x05	; 5
    11ea:	90 93 78 01 	sts	0x0178, r25
    11ee:	80 93 77 01 	sts	0x0177, r24
            peMBFrameSendCur = eMBRTUSend;
    11f2:	82 ef       	ldi	r24, 0xF2	; 242
    11f4:	95 e0       	ldi	r25, 0x05	; 5
    11f6:	90 93 74 01 	sts	0x0174, r25
    11fa:	80 93 73 01 	sts	0x0173, r24
            peMBFrameReceiveCur = eMBRTUReceive;
    11fe:	8f e3       	ldi	r24, 0x3F	; 63
    1200:	96 e0       	ldi	r25, 0x06	; 6
    1202:	90 93 7a 01 	sts	0x017A, r25
    1206:	80 93 79 01 	sts	0x0179, r24
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
    120a:	10 92 7c 01 	sts	0x017C, r1
    120e:	10 92 7b 01 	sts	0x017B, r1
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
    1212:	8e e9       	ldi	r24, 0x9E	; 158
    1214:	95 e0       	ldi	r25, 0x05	; 5
    1216:	90 93 82 02 	sts	0x0282, r25
    121a:	80 93 81 02 	sts	0x0281, r24
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
    121e:	83 e6       	ldi	r24, 0x63	; 99
    1220:	95 e0       	ldi	r25, 0x05	; 5
    1222:	90 93 7e 02 	sts	0x027E, r25
    1226:	80 93 7d 02 	sts	0x027D, r24
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
    122a:	83 e4       	ldi	r24, 0x43	; 67
    122c:	95 e0       	ldi	r25, 0x05	; 5
    122e:	90 93 80 02 	sts	0x0280, r25
    1232:	80 93 7f 02 	sts	0x027F, r24

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
    1236:	86 2f       	mov	r24, r22
    1238:	64 2f       	mov	r22, r20
    123a:	a9 01       	movw	r20, r18
    123c:	98 01       	movw	r18, r16
    123e:	0e 2d       	mov	r16, r14
    1240:	0e 94 74 06 	call	0xce8	; 0xce8 <eMBRTUInit>
    1244:	18 2f       	mov	r17, r24
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
    1246:	88 23       	and	r24, r24
    1248:	69 f4       	brne	.+26     	; 0x1264 <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
    124a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <xMBPortEventInit>
    124e:	88 23       	and	r24, r24
    1250:	11 f4       	brne	.+4      	; 0x1256 <eMBInit+0x98>
    1252:	13 e0       	ldi	r17, 0x03	; 3
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <eMBInit+0xa6>
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
    1256:	10 92 72 01 	sts	0x0172, r1
                eMBState = STATE_DISABLED;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	80 93 03 01 	sts	0x0103, r24
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <eMBInit+0xa6>
    1262:	12 e0       	ldi	r17, 0x02	; 2
            }
        }
    }
    return eStatus;
}
    1264:	81 2f       	mov	r24, r17
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ef 90       	pop	r14
    126c:	08 95       	ret

0000126e <__mulsi3>:
    126e:	62 9f       	mul	r22, r18
    1270:	d0 01       	movw	r26, r0
    1272:	73 9f       	mul	r23, r19
    1274:	f0 01       	movw	r30, r0
    1276:	82 9f       	mul	r24, r18
    1278:	e0 0d       	add	r30, r0
    127a:	f1 1d       	adc	r31, r1
    127c:	64 9f       	mul	r22, r20
    127e:	e0 0d       	add	r30, r0
    1280:	f1 1d       	adc	r31, r1
    1282:	92 9f       	mul	r25, r18
    1284:	f0 0d       	add	r31, r0
    1286:	83 9f       	mul	r24, r19
    1288:	f0 0d       	add	r31, r0
    128a:	74 9f       	mul	r23, r20
    128c:	f0 0d       	add	r31, r0
    128e:	65 9f       	mul	r22, r21
    1290:	f0 0d       	add	r31, r0
    1292:	99 27       	eor	r25, r25
    1294:	72 9f       	mul	r23, r18
    1296:	b0 0d       	add	r27, r0
    1298:	e1 1d       	adc	r30, r1
    129a:	f9 1f       	adc	r31, r25
    129c:	63 9f       	mul	r22, r19
    129e:	b0 0d       	add	r27, r0
    12a0:	e1 1d       	adc	r30, r1
    12a2:	f9 1f       	adc	r31, r25
    12a4:	bd 01       	movw	r22, r26
    12a6:	cf 01       	movw	r24, r30
    12a8:	11 24       	eor	r1, r1
    12aa:	08 95       	ret

000012ac <__udivmodsi4>:
    12ac:	a1 e2       	ldi	r26, 0x21	; 33
    12ae:	1a 2e       	mov	r1, r26
    12b0:	aa 1b       	sub	r26, r26
    12b2:	bb 1b       	sub	r27, r27
    12b4:	fd 01       	movw	r30, r26
    12b6:	0d c0       	rjmp	.+26     	; 0x12d2 <__udivmodsi4_ep>

000012b8 <__udivmodsi4_loop>:
    12b8:	aa 1f       	adc	r26, r26
    12ba:	bb 1f       	adc	r27, r27
    12bc:	ee 1f       	adc	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	a2 17       	cp	r26, r18
    12c2:	b3 07       	cpc	r27, r19
    12c4:	e4 07       	cpc	r30, r20
    12c6:	f5 07       	cpc	r31, r21
    12c8:	20 f0       	brcs	.+8      	; 0x12d2 <__udivmodsi4_ep>
    12ca:	a2 1b       	sub	r26, r18
    12cc:	b3 0b       	sbc	r27, r19
    12ce:	e4 0b       	sbc	r30, r20
    12d0:	f5 0b       	sbc	r31, r21

000012d2 <__udivmodsi4_ep>:
    12d2:	66 1f       	adc	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	88 1f       	adc	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	1a 94       	dec	r1
    12dc:	69 f7       	brne	.-38     	; 0x12b8 <__udivmodsi4_loop>
    12de:	60 95       	com	r22
    12e0:	70 95       	com	r23
    12e2:	80 95       	com	r24
    12e4:	90 95       	com	r25
    12e6:	9b 01       	movw	r18, r22
    12e8:	ac 01       	movw	r20, r24
    12ea:	bd 01       	movw	r22, r26
    12ec:	cf 01       	movw	r24, r30
    12ee:	08 95       	ret

000012f0 <memcpy>:
    12f0:	fb 01       	movw	r30, r22
    12f2:	dc 01       	movw	r26, r24
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <memcpy+0xa>
    12f6:	01 90       	ld	r0, Z+
    12f8:	0d 92       	st	X+, r0
    12fa:	41 50       	subi	r20, 0x01	; 1
    12fc:	50 40       	sbci	r21, 0x00	; 0
    12fe:	d8 f7       	brcc	.-10     	; 0x12f6 <memcpy+0x6>
    1300:	08 95       	ret

00001302 <_exit>:
    1302:	f8 94       	cli

00001304 <__stop_program>:
    1304:	ff cf       	rjmp	.-2      	; 0x1304 <__stop_program>
