
berlios_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000012c2  00001356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000153  008000a0  008000a0  00001396  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000057a  00000000  00000000  00001d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000226e  00000000  00000000  000022e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000aa6  00000000  00000000  00004557  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001882  00000000  00000000  00004ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003d0  00000000  00000000  00006880  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c7d  00000000  00000000  00006c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017ec  00000000  00000000  000078cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000004b6  00000000  00000000  000090b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 c7 02 	jmp	0x58e	; 0x58e <__vector_6>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <__vector_11>
      30:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_12>
      34:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_13>
      38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      48:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>

00000054 <aucCRCHi>:
      54:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      64:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      74:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      84:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      94:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      a4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      b4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      c4:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      d4:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      e4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      f4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     104:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     114:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     124:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     134:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     144:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@

00000154 <aucCRCLo>:
     154:	00 c0 c1 01 c3 03 02 c2 c6 06 07 c7 05 c5 c4 04     ................
     164:	cc 0c 0d cd 0f cf ce 0e 0a ca cb 0b c9 09 08 c8     ................
     174:	d8 18 19 d9 1b db da 1a 1e de df 1f dd 1d 1c dc     ................
     184:	14 d4 d5 15 d7 17 16 d6 d2 12 13 d3 11 d1 d0 10     ................
     194:	f0 30 31 f1 33 f3 f2 32 36 f6 f7 37 f5 35 34 f4     .01.3..26..7.54.
     1a4:	3c fc fd 3d ff 3f 3e fe fa 3a 3b fb 39 f9 f8 38     <..=.?>..:;.9..8
     1b4:	28 e8 e9 29 eb 2b 2a ea ee 2e 2f ef 2d ed ec 2c     (..).+*.../.-..,
     1c4:	e4 24 25 e5 27 e7 e6 26 22 e2 e3 23 e1 21 20 e0     .$%.'..&"..#.! .
     1d4:	a0 60 61 a1 63 a3 a2 62 66 a6 a7 67 a5 65 64 a4     .`a.c..bf..g.ed.
     1e4:	6c ac ad 6d af 6f 6e ae aa 6a 6b ab 69 a9 a8 68     l..m.on..jk.i..h
     1f4:	78 b8 b9 79 bb 7b 7a ba be 7e 7f bf 7d bd bc 7c     x..y.{z..~..}..|
     204:	b4 74 75 b5 77 b7 b6 76 72 b2 b3 73 b1 71 70 b0     .tu.w..vr..s.qp.
     214:	50 90 91 51 93 53 52 92 96 56 57 97 55 95 94 54     P..Q.SR..VW.U..T
     224:	9c 5c 5d 9d 5f 9f 9e 5e 5a 9a 9b 5b 99 59 58 98     .\]._..^Z..[.YX.
     234:	88 48 49 89 4b 8b 8a 4a 4e 8e 8f 4f 8d 4d 4c 8c     .HI.K..JN..O.ML.
     244:	44 84 85 45 87 47 46 86 82 42 43 83 41 81 80 40     D..E.GF..BC.A..@

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf e5       	ldi	r28, 0x5F	; 95
     25a:	d4 e0       	ldi	r29, 0x04	; 4
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	cd bf       	out	0x3d, r28	; 61

00000260 <__do_copy_data>:
     260:	10 e0       	ldi	r17, 0x00	; 0
     262:	a0 e6       	ldi	r26, 0x60	; 96
     264:	b0 e0       	ldi	r27, 0x00	; 0
     266:	e2 ec       	ldi	r30, 0xC2	; 194
     268:	f2 e1       	ldi	r31, 0x12	; 18
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x10>
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a0 3a       	cpi	r26, 0xA0	; 160
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0xc>

00000276 <__do_clear_bss>:
     276:	11 e0       	ldi	r17, 0x01	; 1
     278:	a0 ea       	ldi	r26, 0xA0	; 160
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	a3 3f       	cpi	r26, 0xF3	; 243
     282:	b1 07       	cpc	r27, r17
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 49 01 	call	0x292	; 0x292 <main>
     28a:	0c 94 5f 09 	jmp	0x12be	; 0x12be <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <main>:
static USHORT   usRegInputBuf[REG_INPUT_NREGS];

/* ----------------------- Start implementation -----------------------------*/
int
main( void )
{
     292:	ef 92       	push	r14
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	df 93       	push	r29
     29a:	cf 93       	push	r28
     29c:	00 d0       	rcall	.+0      	; 0x29e <main+0xc>
     29e:	0f 92       	push	r0
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
    const UCHAR     ucSlaveID[] = { 0xAA, 0xBB, 0xCC };
     2a4:	de 01       	movw	r26, r28
     2a6:	11 96       	adiw	r26, 0x01	; 1
     2a8:	e0 e6       	ldi	r30, 0x60	; 96
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	83 e0       	ldi	r24, 0x03	; 3
     2ae:	01 90       	ld	r0, Z+
     2b0:	0d 92       	st	X+, r0
     2b2:	81 50       	subi	r24, 0x01	; 1
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x1c>
    eMBErrorCode    eStatus;

    DDRA |= 0b00001110;
     2b6:	8a b3       	in	r24, 0x1a	; 26
     2b8:	8e 60       	ori	r24, 0x0E	; 14
     2ba:	8a bb       	out	0x1a, r24	; 26
	 

    eStatus = eMBInit( MB_RTU, 0x0A, 0, 38400, MB_PAR_NONE );
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	6a e0       	ldi	r22, 0x0A	; 10
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	00 e0       	ldi	r16, 0x00	; 0
     2c4:	16 e9       	ldi	r17, 0x96	; 150
     2c6:	20 e0       	ldi	r18, 0x00	; 0
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	ee 24       	eor	r14, r14
     2cc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <eMBInit>

    eStatus = eMBSetSlaveID( 0x34, TRUE, ucSlaveID, 3 );
     2d0:	84 e3       	ldi	r24, 0x34	; 52
     2d2:	61 e0       	ldi	r22, 0x01	; 1
     2d4:	ae 01       	movw	r20, r28
     2d6:	4f 5f       	subi	r20, 0xFF	; 255
     2d8:	5f 4f       	sbci	r21, 0xFF	; 255
     2da:	23 e0       	ldi	r18, 0x03	; 3
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	0e 94 c9 08 	call	0x1192	; 0x1192 <eMBSetSlaveID>
    sei(  );
     2e2:	78 94       	sei

    /* Enable the Modbus Protocol Stack. */
    eStatus = eMBEnable(  );
     2e4:	0e 94 9c 03 	call	0x738	; 0x738 <eMBEnable>

    for( ;; )
    {
        ( void )eMBPoll(  );
     2e8:	0e 94 be 03 	call	0x77c	; 0x77c <eMBPoll>

        /* Here we simply count the number of poll cycles. */
        usRegInputBuf[0]++;
     2ec:	80 91 a0 00 	lds	r24, 0x00A0
     2f0:	90 91 a1 00 	lds	r25, 0x00A1
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	90 93 a1 00 	sts	0x00A1, r25
     2fa:	80 93 a0 00 	sts	0x00A0, r24
     2fe:	f4 cf       	rjmp	.-24     	; 0x2e8 <main+0x56>

00000300 <eMBRegInputCB>:

#define INVBIT(port, bit) port = port ^ (1<<bit);

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
     300:	fc 01       	movw	r30, r24

	INVBIT(PORTA, 1);
     302:	8b b3       	in	r24, 0x1b	; 27
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	89 27       	eor	r24, r25
     308:	8b bb       	out	0x1b, r24	; 27
	
  eMBErrorCode  eStatus = MB_ENOERR;
  if( ( usAddress == 1 ) && ( usNRegs == 1 ) ) {
     30a:	61 30       	cpi	r22, 0x01	; 1
     30c:	71 05       	cpc	r23, r1
     30e:	49 f4       	brne	.+18     	; 0x322 <eMBRegInputCB+0x22>
     310:	41 30       	cpi	r20, 0x01	; 1
     312:	51 05       	cpc	r21, r1
     314:	41 f4       	brne	.+16     	; 0x326 <eMBRegInputCB+0x26>
      *pucRegBuffer++ = 0;
     316:	10 82       	st	Z, r1
//      *pucRegBuffer++ = ~PINA;
      *pucRegBuffer++ = usRegInputBuf[0];
     318:	80 91 a0 00 	lds	r24, 0x00A0
     31c:	81 83       	std	Z+1, r24	; 0x01
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{

	INVBIT(PORTA, 1);
	
  eMBErrorCode  eStatus = MB_ENOERR;
     31e:	80 e0       	ldi	r24, 0x00	; 0
  if( ( usAddress == 1 ) && ( usNRegs == 1 ) ) {
      *pucRegBuffer++ = 0;
//      *pucRegBuffer++ = ~PINA;
      *pucRegBuffer++ = usRegInputBuf[0];
     320:	08 95       	ret


  }
  else {
    eStatus = MB_ENOREG;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	08 95       	ret
     326:	81 e0       	ldi	r24, 0x01	; 1
  }
  return eStatus;
}
     328:	08 95       	ret

0000032a <eMBRegHoldingCB>:
 
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
     32a:	fc 01       	movw	r30, r24
	
  eMBErrorCode  eStatus = MB_ENOERR;
  if( ( usAddress == 1 ) && ( usNRegs == 1 ) ) {
     32c:	61 30       	cpi	r22, 0x01	; 1
     32e:	71 05       	cpc	r23, r1
     330:	59 f4       	brne	.+22     	; 0x348 <eMBRegHoldingCB+0x1e>
     332:	41 30       	cpi	r20, 0x01	; 1
     334:	51 05       	cpc	r21, r1
     336:	41 f4       	brne	.+16     	; 0x348 <eMBRegHoldingCB+0x1e>
    if( eMode == MB_REG_READ ) {
     338:	22 23       	and	r18, r18
     33a:	41 f4       	brne	.+16     	; 0x34c <eMBRegHoldingCB+0x22>
      *pucRegBuffer++ = 0;
     33c:	10 82       	st	Z, r1
      *pucRegBuffer++ = ~PINB;
     33e:	86 b3       	in	r24, 0x16	; 22
     340:	80 95       	com	r24
     342:	81 83       	std	Z+1, r24	; 0x01
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
	
  eMBErrorCode  eStatus = MB_ENOERR;
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	08 95       	ret
      pucRegBuffer++;
      //PORTB = ~(*pucRegBuffer++);
    }
  }
  else {
    eStatus = MB_ENOREG;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	08 95       	ret
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
	
  eMBErrorCode  eStatus = MB_ENOERR;
     34c:	80 e0       	ldi	r24, 0x00	; 0
  else {
    eStatus = MB_ENOREG;
	//eStatus = MB_ENORES;
  }
  return eStatus;
}
     34e:	08 95       	ret

00000350 <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	08 95       	ret

00000354 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	08 95       	ret

00000358 <usMBCRC16>:
    0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
     358:	dc 01       	movw	r26, r24
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
     35a:	4f ef       	ldi	r20, 0xFF	; 255
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
     35c:	5f ef       	ldi	r21, 0xFF	; 255
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
     35e:	0f c0       	rjmp	.+30     	; 0x37e <usMBCRC16+0x26>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
     360:	2d 91       	ld	r18, X+
        ucCRCLo = ucCRCHi ^ pgm_read_byte( &aucCRCHi[iIndex] );
     362:	84 2f       	mov	r24, r20
     364:	82 27       	eor	r24, r18
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	fc 01       	movw	r30, r24
     36a:	ec 5a       	subi	r30, 0xAC	; 172
     36c:	ff 4f       	sbci	r31, 0xFF	; 255
     36e:	44 91       	lpm	r20, Z+
     370:	45 27       	eor	r20, r21
        ucCRCHi = pgm_read_byte( &aucCRCLo[iIndex] );;
     372:	8c 5a       	subi	r24, 0xAC	; 172
     374:	9e 4f       	sbci	r25, 0xFE	; 254
     376:	fc 01       	movw	r30, r24
     378:	54 91       	lpm	r21, Z+
     37a:	61 50       	subi	r22, 0x01	; 1
     37c:	70 40       	sbci	r23, 0x00	; 0
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
     37e:	61 15       	cp	r22, r1
     380:	71 05       	cpc	r23, r1
     382:	71 f7       	brne	.-36     	; 0x360 <usMBCRC16+0x8>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ucCRCHi ^ pgm_read_byte( &aucCRCHi[iIndex] );
        ucCRCHi = pgm_read_byte( &aucCRCLo[iIndex] );;
    }
    return ucCRCHi << 8 | ucCRCLo;
     384:	35 2f       	mov	r19, r21
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	e4 2f       	mov	r30, r20
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	e2 2b       	or	r30, r18
     38e:	f3 2b       	or	r31, r19
}
     390:	cf 01       	movw	r24, r30
     392:	08 95       	ret

00000394 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
     394:	10 92 a8 00 	sts	0x00A8, r1
    return TRUE;
}
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	08 95       	ret

0000039c <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	90 93 a8 00 	sts	0x00A8, r25
    eQueuedEvent = eEvent;
     3a2:	80 93 a9 00 	sts	0x00A9, r24
    return TRUE;
}
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	08 95       	ret

000003aa <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
     3aa:	20 91 a8 00 	lds	r18, 0x00A8
     3ae:	22 23       	and	r18, r18
     3b0:	41 f0       	breq	.+16     	; 0x3c2 <xMBPortEventGet+0x18>
    {
        *eEvent = eQueuedEvent;
     3b2:	20 91 a9 00 	lds	r18, 0x00A9
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18
        xEventInQueue = FALSE;
     3ba:	10 92 a8 00 	sts	0x00A8, r1
        xEventHappened = TRUE;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	08 95       	ret
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
     3c2:	80 e0       	ldi	r24, 0x00	; 0
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
     3c4:	08 95       	ret

000003c6 <vMBPortSerialEnable>:

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
    UCSRB |= _BV( TXEN ) | _BV(TXCIE);
     3c6:	9a b1       	in	r25, 0x0a	; 10
     3c8:	98 64       	ori	r25, 0x48	; 72
     3ca:	9a b9       	out	0x0a, r25	; 10
#else
    UCSRB |= _BV( TXEN );
#endif

    if( xRxEnable )
     3cc:	88 23       	and	r24, r24
     3ce:	19 f0       	breq	.+6      	; 0x3d6 <vMBPortSerialEnable+0x10>
    {
        UCSRB |= _BV( RXEN ) | _BV( RXCIE );
     3d0:	8a b1       	in	r24, 0x0a	; 10
     3d2:	80 69       	ori	r24, 0x90	; 144
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <vMBPortSerialEnable+0x14>
    }
    else
    {
        UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
     3d6:	8a b1       	in	r24, 0x0a	; 10
     3d8:	8f 76       	andi	r24, 0x6F	; 111
     3da:	8a b9       	out	0x0a, r24	; 10
    }

    if( xTxEnable )
     3dc:	66 23       	and	r22, r22
     3de:	29 f0       	breq	.+10     	; 0x3ea <vMBPortSerialEnable+0x24>
    {
        UCSRB |= _BV( TXEN ) | _BV( UDRE );
     3e0:	8a b1       	in	r24, 0x0a	; 10
     3e2:	88 62       	ori	r24, 0x28	; 40
     3e4:	8a b9       	out	0x0a, r24	; 10
#ifdef RTS_ENABLE
        RTS_HIGH;
     3e6:	92 9a       	sbi	0x12, 2	; 18
     3e8:	08 95       	ret
#endif
    }
    else
    {
        UCSRB &= ~( _BV( UDRE ) );
     3ea:	55 98       	cbi	0x0a, 5	; 10
     3ec:	08 95       	ret

000003ee <xMBPortSerialInit>:
    }
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
     3ee:	cf 92       	push	r12
     3f0:	df 92       	push	r13
     3f2:	ef 92       	push	r14
     3f4:	ff 92       	push	r15
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	6a 01       	movw	r12, r20
     3fc:	7b 01       	movw	r14, r22
     3fe:	12 2f       	mov	r17, r18
    UCHAR ucUCSRC = 0;

    /* prevent compiler warning. */
    (void)ucPORT;
	
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	cc 0c       	add	r12, r12
     404:	dd 1c       	adc	r13, r13
     406:	ee 1c       	adc	r14, r14
     408:	ff 1c       	adc	r15, r15
     40a:	8a 95       	dec	r24
     40c:	d1 f7       	brne	.-12     	; 0x402 <xMBPortSerialInit+0x14>
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e8       	ldi	r23, 0x80	; 128
     412:	80 e7       	ldi	r24, 0x70	; 112
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	a7 01       	movw	r20, r14
     418:	96 01       	movw	r18, r12
     41a:	0e 94 34 09 	call	0x1268	; 0x1268 <__udivmodsi4>
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	29 b9       	out	0x09, r18	; 9
     422:	03 30       	cpi	r16, 0x03	; 3
     424:	30 f4       	brcc	.+12     	; 0x432 <xMBPortSerialInit+0x44>
     426:	e0 2f       	mov	r30, r16
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	ed 59       	subi	r30, 0x9D	; 157
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	80 81       	ld	r24, Z
     430:	01 c0       	rjmp	.+2      	; 0x434 <xMBPortSerialInit+0x46>
     432:	80 e0       	ldi	r24, 0x00	; 0
            break;
        case MB_PAR_NONE:
            break;
    }

    switch ( ucDataBits )
     434:	17 30       	cpi	r17, 0x07	; 7
     436:	21 f0       	breq	.+8      	; 0x440 <xMBPortSerialInit+0x52>
     438:	18 30       	cpi	r17, 0x08	; 8
     43a:	19 f4       	brne	.+6      	; 0x442 <xMBPortSerialInit+0x54>
    {
        case 8:
            ucUCSRC |= _BV( UCSZ0 ) | _BV( UCSZ1 );
     43c:	86 60       	ori	r24, 0x06	; 6
            break;
     43e:	01 c0       	rjmp	.+2      	; 0x442 <xMBPortSerialInit+0x54>
        case 7:
            ucUCSRC |= _BV( UCSZ1 );
     440:	84 60       	ori	r24, 0x04	; 4
#elif defined (__AVR_ATmega169__)
    UCSRC |= ucUCSRC;
#elif defined (__AVR_ATmega8__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega16__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
     442:	80 68       	ori	r24, 0x80	; 128
     444:	80 bd       	out	0x20, r24	; 32
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega128__)
    UCSRC |= ucUCSRC;
#endif

    vMBPortSerialEnable( FALSE, FALSE );
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vMBPortSerialEnable>

#ifdef RTS_ENABLE
    RTS_INIT;
     44e:	8a 9a       	sbi	0x11, 2	; 17
     450:	92 98       	cbi	0x12, 2	; 18
#endif
    return TRUE;
}
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	cf 90       	pop	r12
     460:	08 95       	ret

00000462 <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
    UDR = ucByte;
     462:	8c b9       	out	0x0c, r24	; 12
    return TRUE;
}
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	08 95       	ret

00000468 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
    *pucByte = UDR;
     468:	2c b1       	in	r18, 0x0c	; 12
     46a:	fc 01       	movw	r30, r24
     46c:	20 83       	st	Z, r18
    return TRUE;
}
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	08 95       	ret

00000472 <__vector_12>:

SIGNAL( SIG_USART_DATA )
{
     472:	1f 92       	push	r1
     474:	0f 92       	push	r0
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	0f 92       	push	r0
     47a:	11 24       	eor	r1, r1
     47c:	2f 93       	push	r18
     47e:	3f 93       	push	r19
     480:	4f 93       	push	r20
     482:	5f 93       	push	r21
     484:	6f 93       	push	r22
     486:	7f 93       	push	r23
     488:	8f 93       	push	r24
     48a:	9f 93       	push	r25
     48c:	af 93       	push	r26
     48e:	bf 93       	push	r27
     490:	ef 93       	push	r30
     492:	ff 93       	push	r31
    pxMBFrameCBTransmitterEmpty(  );
     494:	e0 91 e9 00 	lds	r30, 0x00E9
     498:	f0 91 ea 00 	lds	r31, 0x00EA
     49c:	09 95       	icall
}
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	bf 91       	pop	r27
     4a4:	af 91       	pop	r26
     4a6:	9f 91       	pop	r25
     4a8:	8f 91       	pop	r24
     4aa:	7f 91       	pop	r23
     4ac:	6f 91       	pop	r22
     4ae:	5f 91       	pop	r21
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <__vector_11>:

SIGNAL( SIG_USART_RECV )
{
     4c0:	1f 92       	push	r1
     4c2:	0f 92       	push	r0
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	2f 93       	push	r18
     4cc:	3f 93       	push	r19
     4ce:	4f 93       	push	r20
     4d0:	5f 93       	push	r21
     4d2:	6f 93       	push	r22
     4d4:	7f 93       	push	r23
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	af 93       	push	r26
     4dc:	bf 93       	push	r27
     4de:	ef 93       	push	r30
     4e0:	ff 93       	push	r31
    pxMBFrameCBByteReceived(  );
     4e2:	e0 91 ed 00 	lds	r30, 0x00ED
     4e6:	f0 91 ee 00 	lds	r31, 0x00EE
     4ea:	09 95       	icall
}
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	7f 91       	pop	r23
     4fa:	6f 91       	pop	r22
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0
     50a:	1f 90       	pop	r1
     50c:	18 95       	reti

0000050e <__vector_13>:

#ifdef RTS_ENABLE
SIGNAL( SIG_UART_TRANS )
{
     50e:	1f 92       	push	r1
     510:	0f 92       	push	r0
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	0f 92       	push	r0
     516:	11 24       	eor	r1, r1
    RTS_LOW;
     518:	92 98       	cbi	0x12, 2	; 18
}
     51a:	0f 90       	pop	r0
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	0f 90       	pop	r0
     520:	1f 90       	pop	r1
     522:	18 95       	reti

00000524 <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
    TCNT1 = 0x0000;
     524:	1d bc       	out	0x2d, r1	; 45
     526:	1c bc       	out	0x2c, r1	; 44
    if( usTimerOCRADelta > 0 )
     528:	80 91 aa 00 	lds	r24, 0x00AA
     52c:	90 91 ab 00 	lds	r25, 0x00AB
     530:	00 97       	sbiw	r24, 0x00	; 0
     532:	29 f0       	breq	.+10     	; 0x53e <vMBPortTimersEnable+0x1a>
    {
        TIMSK1 |= _BV( OCIE1A );
     534:	29 b7       	in	r18, 0x39	; 57
     536:	20 61       	ori	r18, 0x10	; 16
     538:	29 bf       	out	0x39, r18	; 57
        OCR1A = usTimerOCRADelta;
     53a:	9b bd       	out	0x2b, r25	; 43
     53c:	8a bd       	out	0x2a, r24	; 42
    }

    TCCR1B |= _BV( CS12 ) | _BV( CS10 );
     53e:	8e b5       	in	r24, 0x2e	; 46
     540:	85 60       	ori	r24, 0x05	; 5
     542:	8e bd       	out	0x2e, r24	; 46
}
     544:	08 95       	ret

00000546 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
    /* Disable the timer. */
    TCCR1B &= ~( _BV( CS12 ) | _BV( CS10 ) );
     546:	8e b5       	in	r24, 0x2e	; 46
     548:	8a 7f       	andi	r24, 0xFA	; 250
     54a:	8e bd       	out	0x2e, r24	; 46
    /* Disable the output compare interrupts for channel A/B. */
    TIMSK1 &= ~( _BV( OCIE1A ) );
     54c:	89 b7       	in	r24, 0x39	; 57
     54e:	8f 7e       	andi	r24, 0xEF	; 239
     550:	89 bf       	out	0x39, r24	; 57
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF1A ) ;
     552:	88 b7       	in	r24, 0x38	; 56
     554:	80 61       	ori	r24, 0x10	; 16
     556:	88 bf       	out	0x38, r24	; 56
}
     558:	08 95       	ret

0000055a <xMBPortTimersInit>:
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );
     55a:	bc 01       	movw	r22, r24
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	20 e2       	ldi	r18, 0x20	; 32
     562:	3c e1       	ldi	r19, 0x1C	; 28
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	0e 94 15 09 	call	0x122a	; 0x122a <__mulsi3>
     56c:	20 e2       	ldi	r18, 0x20	; 32
     56e:	3e e4       	ldi	r19, 0x4E	; 78
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	0e 94 34 09 	call	0x1268	; 0x1268 <__udivmodsi4>
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
     578:	30 93 ab 00 	sts	0x00AB, r19
     57c:	20 93 aa 00 	sts	0x00AA, r18
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );

    TCCR1A = 0x00;
     580:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0x00;
     582:	1e bc       	out	0x2e, r1	; 46
    TCCR1C = 0x00;
     584:	1f bc       	out	0x2f, r1	; 47

    vMBPortTimersDisable(  );
     586:	0e 94 a3 02 	call	0x546	; 0x546 <vMBPortTimersDisable>

    return TRUE;
}
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	08 95       	ret

0000058e <__vector_6>:
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF1A ) ;
}

SIGNAL( SIG_OUTPUT_COMPARE1A )
{
     58e:	1f 92       	push	r1
     590:	0f 92       	push	r0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	2f 93       	push	r18
     59a:	3f 93       	push	r19
     59c:	4f 93       	push	r20
     59e:	5f 93       	push	r21
     5a0:	6f 93       	push	r22
     5a2:	7f 93       	push	r23
     5a4:	8f 93       	push	r24
     5a6:	9f 93       	push	r25
     5a8:	af 93       	push	r26
     5aa:	bf 93       	push	r27
     5ac:	ef 93       	push	r30
     5ae:	ff 93       	push	r31
    ( void )pxMBPortCBTimerExpired(  );
     5b0:	e0 91 eb 00 	lds	r30, 0x00EB
     5b4:	f0 91 ec 00 	lds	r31, 0x00EC
     5b8:	09 95       	icall
}
     5ba:	ff 91       	pop	r31
     5bc:	ef 91       	pop	r30
     5be:	bf 91       	pop	r27
     5c0:	af 91       	pop	r26
     5c2:	9f 91       	pop	r25
     5c4:	8f 91       	pop	r24
     5c6:	7f 91       	pop	r23
     5c8:	6f 91       	pop	r22
     5ca:	5f 91       	pop	r21
     5cc:	4f 91       	pop	r20
     5ce:	3f 91       	pop	r19
     5d0:	2f 91       	pop	r18
     5d2:	0f 90       	pop	r0
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	0f 90       	pop	r0
     5d8:	1f 90       	pop	r1
     5da:	18 95       	reti

000005dc <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     5dc:	ef 92       	push	r14
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	98 2f       	mov	r25, r24
     5e4:	86 2f       	mov	r24, r22
     5e6:	64 2f       	mov	r22, r20
     5e8:	a9 01       	movw	r20, r18
     5ea:	98 01       	movw	r18, r16
     5ec:	0e 2d       	mov	r16, r14
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
     5ee:	78 2f       	mov	r23, r24
     5f0:	71 50       	subi	r23, 0x01	; 1
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
     5f2:	77 3f       	cpi	r23, 0xF7	; 247
     5f4:	08 f0       	brcs	.+2      	; 0x5f8 <eMBInit+0x1c>
     5f6:	41 c0       	rjmp	.+130    	; 0x67a <eMBInit+0x9e>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
     5f8:	80 93 ae 00 	sts	0x00AE, r24

        switch ( eMode )
     5fc:	99 23       	and	r25, r25
     5fe:	e9 f5       	brne	.+122    	; 0x67a <eMBInit+0x9e>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
     600:	e5 e8       	ldi	r30, 0x85	; 133
     602:	f4 e0       	ldi	r31, 0x04	; 4
     604:	f0 93 bb 00 	sts	0x00BB, r31
     608:	e0 93 ba 00 	sts	0x00BA, r30
            pvMBFrameStopCur = eMBRTUStop;
     60c:	e0 e9       	ldi	r30, 0x90	; 144
     60e:	f4 e0       	ldi	r31, 0x04	; 4
     610:	f0 93 b9 00 	sts	0x00B9, r31
     614:	e0 93 b8 00 	sts	0x00B8, r30
            peMBFrameSendCur = eMBRTUSend;
     618:	ef ec       	ldi	r30, 0xCF	; 207
     61a:	f4 e0       	ldi	r31, 0x04	; 4
     61c:	f0 93 b0 00 	sts	0x00B0, r31
     620:	e0 93 af 00 	sts	0x00AF, r30
            peMBFrameReceiveCur = eMBRTUReceive;
     624:	e9 e9       	ldi	r30, 0x99	; 153
     626:	f4 e0       	ldi	r31, 0x04	; 4
     628:	f0 93 ad 00 	sts	0x00AD, r31
     62c:	e0 93 ac 00 	sts	0x00AC, r30
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
     630:	10 92 bd 00 	sts	0x00BD, r1
     634:	10 92 bc 00 	sts	0x00BC, r1
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
     638:	ec e1       	ldi	r30, 0x1C	; 28
     63a:	f5 e0       	ldi	r31, 0x05	; 5
     63c:	f0 93 ee 00 	sts	0x00EE, r31
     640:	e0 93 ed 00 	sts	0x00ED, r30
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
     644:	e5 e6       	ldi	r30, 0x65	; 101
     646:	f5 e0       	ldi	r31, 0x05	; 5
     648:	f0 93 ea 00 	sts	0x00EA, r31
     64c:	e0 93 e9 00 	sts	0x00E9, r30
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
     650:	e1 ea       	ldi	r30, 0xA1	; 161
     652:	f5 e0       	ldi	r31, 0x05	; 5
     654:	f0 93 ec 00 	sts	0x00EC, r31
     658:	e0 93 eb 00 	sts	0x00EB, r30

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
     65c:	0e 94 4c 04 	call	0x898	; 0x898 <eMBRTUInit>
     660:	08 2f       	mov	r16, r24
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
     662:	88 23       	and	r24, r24
     664:	69 f4       	brne	.+26     	; 0x680 <eMBInit+0xa4>
        {
            if( !xMBPortEventInit(  ) )
     666:	0e 94 ca 01 	call	0x394	; 0x394 <xMBPortEventInit>
     66a:	88 23       	and	r24, r24
     66c:	41 f0       	breq	.+16     	; 0x67e <eMBInit+0xa2>
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
     66e:	10 92 be 00 	sts	0x00BE, r1
                eMBState = STATE_DISABLED;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 66 00 	sts	0x0066, r24
     678:	03 c0       	rjmp	.+6      	; 0x680 <eMBInit+0xa4>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
     67a:	02 e0       	ldi	r16, 0x02	; 2
     67c:	01 c0       	rjmp	.+2      	; 0x680 <eMBInit+0xa4>
        if( eStatus == MB_ENOERR )
        {
            if( !xMBPortEventInit(  ) )
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
     67e:	03 e0       	ldi	r16, 0x03	; 3
                eMBState = STATE_DISABLED;
            }
        }
    }
    return eStatus;
}
     680:	80 2f       	mov	r24, r16
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ef 90       	pop	r14
     688:	08 95       	ret

0000068a <eMBRegisterCB>:
eMBRegisterCB( UCHAR ucFunctionCode, pxMBFunctionHandler pxHandler )
{
    int             i;
    eMBErrorCode    eStatus;

    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
     68a:	18 16       	cp	r1, r24
     68c:	0c f0       	brlt	.+2      	; 0x690 <eMBRegisterCB+0x6>
     68e:	41 c0       	rjmp	.+130    	; 0x712 <eMBRegisterCB+0x88>
    {
        ENTER_CRITICAL_SECTION(  );
     690:	f8 94       	cli
        if( pxHandler != NULL )
     692:	61 15       	cp	r22, r1
     694:	71 05       	cpc	r23, r1
     696:	11 f1       	breq	.+68     	; 0x6dc <eMBRegisterCB+0x52>
     698:	e8 e6       	ldi	r30, 0x68	; 104
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                if( ( xFuncHandlers[i].pxHandler == NULL ) ||
     6a0:	40 81       	ld	r20, Z
     6a2:	51 81       	ldd	r21, Z+1	; 0x01
     6a4:	41 15       	cp	r20, r1
     6a6:	51 05       	cpc	r21, r1
     6a8:	19 f0       	breq	.+6      	; 0x6b0 <eMBRegisterCB+0x26>
     6aa:	46 17       	cp	r20, r22
     6ac:	57 07       	cpc	r21, r23
     6ae:	71 f4       	brne	.+28     	; 0x6cc <eMBRegisterCB+0x42>
                    ( xFuncHandlers[i].pxHandler == pxHandler ) )
                {
                    xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
     6b0:	f9 01       	movw	r30, r18
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	e2 0f       	add	r30, r18
     6b8:	f3 1f       	adc	r31, r19
     6ba:	e9 59       	subi	r30, 0x99	; 153
     6bc:	ff 4f       	sbci	r31, 0xFF	; 255
     6be:	80 83       	st	Z, r24
                    xFuncHandlers[i].pxHandler = pxHandler;
     6c0:	72 83       	std	Z+2, r23	; 0x02
     6c2:	61 83       	std	Z+1, r22	; 0x01
                    break;
                }
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
     6c4:	20 31       	cpi	r18, 0x10	; 16
     6c6:	31 05       	cpc	r19, r1
     6c8:	09 f5       	brne	.+66     	; 0x70c <eMBRegisterCB+0x82>
     6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <eMBRegisterCB+0x4e>
    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     6cc:	2f 5f       	subi	r18, 0xFF	; 255
     6ce:	3f 4f       	sbci	r19, 0xFF	; 255
     6d0:	33 96       	adiw	r30, 0x03	; 3
     6d2:	20 31       	cpi	r18, 0x10	; 16
     6d4:	31 05       	cpc	r19, r1
     6d6:	21 f7       	brne	.-56     	; 0x6a0 <eMBRegisterCB+0x16>
                    xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
                    xFuncHandlers[i].pxHandler = pxHandler;
                    break;
                }
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	19 c0       	rjmp	.+50     	; 0x70e <eMBRegisterCB+0x84>
    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     6dc:	e7 e6       	ldi	r30, 0x67	; 103
     6de:	f0 e0       	ldi	r31, 0x00	; 0
    eMBErrorCode    eStatus;

    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
        }
        else
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
     6e4:	90 81       	ld	r25, Z
     6e6:	98 17       	cp	r25, r24
     6e8:	59 f4       	brne	.+22     	; 0x700 <eMBRegisterCB+0x76>
                {
                    xFuncHandlers[i].ucFunctionCode = 0;
     6ea:	f9 01       	movw	r30, r18
     6ec:	ee 0f       	add	r30, r30
     6ee:	ff 1f       	adc	r31, r31
     6f0:	e2 0f       	add	r30, r18
     6f2:	f3 1f       	adc	r31, r19
     6f4:	e9 59       	subi	r30, 0x99	; 153
     6f6:	ff 4f       	sbci	r31, 0xFF	; 255
     6f8:	10 82       	st	Z, r1
                    xFuncHandlers[i].pxHandler = NULL;
     6fa:	12 82       	std	Z+2, r1	; 0x02
     6fc:	11 82       	std	Z+1, r1	; 0x01
     6fe:	06 c0       	rjmp	.+12     	; 0x70c <eMBRegisterCB+0x82>
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
        }
        else
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     700:	2f 5f       	subi	r18, 0xFF	; 255
     702:	3f 4f       	sbci	r19, 0xFF	; 255
     704:	33 96       	adiw	r30, 0x03	; 3
     706:	20 31       	cpi	r18, 0x10	; 16
     708:	31 05       	cpc	r19, r1
     70a:	61 f7       	brne	.-40     	; 0x6e4 <eMBRegisterCB+0x5a>
                    xFuncHandlers[i].pxHandler = NULL;
                    break;
                }
            }
            /* Remove can't fail. */
            eStatus = MB_ENOERR;
     70c:	80 e0       	ldi	r24, 0x00	; 0
        }
        EXIT_CRITICAL_SECTION(  );
     70e:	78 94       	sei
     710:	08 95       	ret
    }
    else
    {
        eStatus = MB_EINVAL;
     712:	82 e0       	ldi	r24, 0x02	; 2
    }
    return eStatus;
}
     714:	08 95       	ret

00000716 <eMBClose>:
eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
     716:	80 91 66 00 	lds	r24, 0x0066
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	49 f4       	brne	.+18     	; 0x730 <eMBClose+0x1a>
    {
        if( pvMBFrameCloseCur != NULL )
     71e:	e0 91 bc 00 	lds	r30, 0x00BC
     722:	f0 91 bd 00 	lds	r31, 0x00BD
     726:	30 97       	sbiw	r30, 0x00	; 0
     728:	29 f0       	breq	.+10     	; 0x734 <eMBClose+0x1e>
        {
            pvMBFrameCloseCur(  );
     72a:	09 95       	icall


eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	08 95       	ret
            pvMBFrameCloseCur(  );
        }
    }
    else
    {
        eStatus = MB_EILLSTATE;
     730:	86 e0       	ldi	r24, 0x06	; 6
     732:	08 95       	ret


eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     734:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
     736:	08 95       	ret

00000738 <eMBEnable>:
eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
     738:	80 91 66 00 	lds	r24, 0x0066
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	49 f4       	brne	.+18     	; 0x752 <eMBEnable+0x1a>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
     740:	e0 91 ba 00 	lds	r30, 0x00BA
     744:	f0 91 bb 00 	lds	r31, 0x00BB
     748:	09 95       	icall
        eMBState = STATE_ENABLED;
     74a:	10 92 66 00 	sts	0x0066, r1
}

eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	08 95       	ret
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
     752:	86 e0       	ldi	r24, 0x06	; 6
    }
    return eStatus;
}
     754:	08 95       	ret

00000756 <eMBDisable>:
eMBErrorCode
eMBDisable( void )
{
    eMBErrorCode    eStatus;

    if( eMBState == STATE_ENABLED )
     756:	80 91 66 00 	lds	r24, 0x0066
     75a:	88 23       	and	r24, r24
     75c:	49 f4       	brne	.+18     	; 0x770 <eMBDisable+0x1a>
    {
        pvMBFrameStopCur(  );
     75e:	e0 91 b8 00 	lds	r30, 0x00B8
     762:	f0 91 b9 00 	lds	r31, 0x00B9
     766:	09 95       	icall
        eMBState = STATE_DISABLED;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	80 93 66 00 	sts	0x0066, r24
     76e:	02 c0       	rjmp	.+4      	; 0x774 <eMBDisable+0x1e>
        eStatus = MB_ENOERR;
    }
    else if( eMBState == STATE_DISABLED )
     770:	81 30       	cpi	r24, 0x01	; 1
     772:	11 f4       	brne	.+4      	; 0x778 <eMBDisable+0x22>
    {
        eStatus = MB_ENOERR;
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	08 95       	ret
    }
    else
    {
        eStatus = MB_EILLSTATE;
     778:	86 e0       	ldi	r24, 0x06	; 6
    }
    return eStatus;
}
     77a:	08 95       	ret

0000077c <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
     77c:	df 93       	push	r29
     77e:	cf 93       	push	r28
     780:	0f 92       	push	r0
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
     786:	80 91 66 00 	lds	r24, 0x0066
     78a:	88 23       	and	r24, r24
     78c:	09 f0       	breq	.+2      	; 0x790 <eMBPoll+0x14>
     78e:	7d c0       	rjmp	.+250    	; 0x88a <eMBPoll+0x10e>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	0e 94 d5 01 	call	0x3aa	; 0x3aa <xMBPortEventGet>
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	09 f0       	breq	.+2      	; 0x79e <eMBPoll+0x22>
     79c:	78 c0       	rjmp	.+240    	; 0x88e <eMBPoll+0x112>
    {
        switch ( eEvent )
     79e:	99 81       	ldd	r25, Y+1	; 0x01
     7a0:	91 30       	cpi	r25, 0x01	; 1
     7a2:	21 f0       	breq	.+8      	; 0x7ac <eMBPoll+0x30>
     7a4:	92 30       	cpi	r25, 0x02	; 2
     7a6:	09 f0       	breq	.+2      	; 0x7aa <eMBPoll+0x2e>
     7a8:	72 c0       	rjmp	.+228    	; 0x88e <eMBPoll+0x112>
     7aa:	1b c0       	rjmp	.+54     	; 0x7e2 <eMBPoll+0x66>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
     7ac:	e0 91 ac 00 	lds	r30, 0x00AC
     7b0:	f0 91 ad 00 	lds	r31, 0x00AD
     7b4:	85 eb       	ldi	r24, 0xB5	; 181
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	66 eb       	ldi	r22, 0xB6	; 182
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	42 eb       	ldi	r20, 0xB2	; 178
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	09 95       	icall
            if( eStatus == MB_ENOERR )
     7c2:	88 23       	and	r24, r24
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <eMBPoll+0x4c>
     7c6:	63 c0       	rjmp	.+198    	; 0x88e <eMBPoll+0x112>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
     7c8:	80 91 b5 00 	lds	r24, 0x00B5
     7cc:	90 91 ae 00 	lds	r25, 0x00AE
     7d0:	89 17       	cp	r24, r25
     7d2:	19 f0       	breq	.+6      	; 0x7da <eMBPoll+0x5e>
     7d4:	88 23       	and	r24, r24
     7d6:	09 f0       	breq	.+2      	; 0x7da <eMBPoll+0x5e>
     7d8:	5a c0       	rjmp	.+180    	; 0x88e <eMBPoll+0x112>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 ce 01 	call	0x39c	; 0x39c <xMBPortEventPost>
     7e0:	56 c0       	rjmp	.+172    	; 0x88e <eMBPoll+0x112>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
     7e2:	a0 91 b6 00 	lds	r26, 0x00B6
     7e6:	b0 91 b7 00 	lds	r27, 0x00B7
     7ea:	9c 91       	ld	r25, X
     7ec:	90 93 b4 00 	sts	0x00B4, r25
            eException = MB_EX_ILLEGAL_FUNCTION;
     7f0:	80 93 b1 00 	sts	0x00B1, r24
     7f4:	e7 e6       	ldi	r30, 0x67	; 103
     7f6:	f0 e0       	ldi	r31, 0x00	; 0
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
     7fc:	80 81       	ld	r24, Z
     7fe:	88 23       	and	r24, r24
     800:	c9 f0       	breq	.+50     	; 0x834 <eMBPoll+0xb8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
     802:	89 17       	cp	r24, r25
     804:	89 f4       	brne	.+34     	; 0x828 <eMBPoll+0xac>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
     806:	f9 01       	movw	r30, r18
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	e2 0f       	add	r30, r18
     80e:	f3 1f       	adc	r31, r19
     810:	e9 59       	subi	r30, 0x99	; 153
     812:	ff 4f       	sbci	r31, 0xFF	; 255
     814:	01 80       	ldd	r0, Z+1	; 0x01
     816:	f2 81       	ldd	r31, Z+2	; 0x02
     818:	e0 2d       	mov	r30, r0
     81a:	cd 01       	movw	r24, r26
     81c:	62 eb       	ldi	r22, 0xB2	; 178
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	09 95       	icall
     822:	80 93 b1 00 	sts	0x00B1, r24
                    break;
     826:	06 c0       	rjmp	.+12     	; 0x834 <eMBPoll+0xb8>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     828:	2f 5f       	subi	r18, 0xFF	; 255
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	33 96       	adiw	r30, 0x03	; 3
     82e:	20 31       	cpi	r18, 0x10	; 16
     830:	31 05       	cpc	r19, r1
     832:	21 f7       	brne	.-56     	; 0x7fc <eMBPoll+0x80>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
     834:	80 91 b5 00 	lds	r24, 0x00B5
     838:	88 23       	and	r24, r24
     83a:	49 f1       	breq	.+82     	; 0x88e <eMBPoll+0x112>
            {
                if( eException != MB_EX_NONE )
     83c:	90 91 b1 00 	lds	r25, 0x00B1
     840:	99 23       	and	r25, r25
     842:	99 f0       	breq	.+38     	; 0x86a <eMBPoll+0xee>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
     844:	e0 91 b6 00 	lds	r30, 0x00B6
     848:	f0 91 b7 00 	lds	r31, 0x00B7
     84c:	80 91 b4 00 	lds	r24, 0x00B4
     850:	80 68       	ori	r24, 0x80	; 128
     852:	80 83       	st	Z, r24
                    ucMBFrame[usLength++] = eException;
     854:	e0 91 b6 00 	lds	r30, 0x00B6
     858:	f0 91 b7 00 	lds	r31, 0x00B7
     85c:	91 83       	std	Z+1, r25	; 0x01
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	90 93 b3 00 	sts	0x00B3, r25
     866:	80 93 b2 00 	sts	0x00B2, r24
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
     86a:	60 91 b6 00 	lds	r22, 0x00B6
     86e:	70 91 b7 00 	lds	r23, 0x00B7
     872:	40 91 b2 00 	lds	r20, 0x00B2
     876:	50 91 b3 00 	lds	r21, 0x00B3
     87a:	e0 91 af 00 	lds	r30, 0x00AF
     87e:	f0 91 b0 00 	lds	r31, 0x00B0
     882:	80 91 ae 00 	lds	r24, 0x00AE
     886:	09 95       	icall
     888:	02 c0       	rjmp	.+4      	; 0x88e <eMBPoll+0x112>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
     88a:	86 e0       	ldi	r24, 0x06	; 6
     88c:	01 c0       	rjmp	.+2      	; 0x890 <eMBPoll+0x114>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
     88e:	80 e0       	ldi	r24, 0x00	; 0
}
     890:	0f 90       	pop	r0
     892:	cf 91       	pop	r28
     894:	df 91       	pop	r29
     896:	08 95       	ret

00000898 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     898:	cf 92       	push	r12
     89a:	df 92       	push	r13
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	86 2f       	mov	r24, r22
     8a4:	69 01       	movw	r12, r18
     8a6:	7a 01       	movw	r14, r20
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
     8a8:	f8 94       	cli

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
     8aa:	ba 01       	movw	r22, r20
     8ac:	a9 01       	movw	r20, r18
     8ae:	28 e0       	ldi	r18, 0x08	; 8
     8b0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <xMBPortSerialInit>
     8b4:	81 30       	cpi	r24, 0x01	; 1
     8b6:	09 f5       	brne	.+66     	; 0x8fa <eMBRTUInit+0x62>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	c8 16       	cp	r12, r24
     8bc:	8b e4       	ldi	r24, 0x4B	; 75
     8be:	d8 06       	cpc	r13, r24
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	e8 06       	cpc	r14, r24
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	f8 06       	cpc	r15, r24
     8c8:	68 f4       	brcc	.+26     	; 0x8e4 <eMBRTUInit+0x4c>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
     8ca:	a7 01       	movw	r20, r14
     8cc:	96 01       	movw	r18, r12
     8ce:	22 0f       	add	r18, r18
     8d0:	33 1f       	adc	r19, r19
     8d2:	44 1f       	adc	r20, r20
     8d4:	55 1f       	adc	r21, r21
     8d6:	60 ea       	ldi	r22, 0xA0	; 160
     8d8:	7f e7       	ldi	r23, 0x7F	; 127
     8da:	87 e1       	ldi	r24, 0x17	; 23
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 34 09 	call	0x1268	; 0x1268 <__udivmodsi4>
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <eMBRTUInit+0x54>
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
        {
            usTimerT35_50us = 35;       /* 1800us. */
     8e4:	23 e2       	ldi	r18, 0x23	; 35
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	50 e0       	ldi	r21, 0x00	; 0
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
     8ec:	c9 01       	movw	r24, r18
     8ee:	0e 94 ad 02 	call	0x55a	; 0x55a <xMBPortTimersInit>
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	11 f4       	brne	.+4      	; 0x8fa <eMBRTUInit+0x62>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	01 c0       	rjmp	.+2      	; 0x8fc <eMBRTUInit+0x64>
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
     8fa:	83 e0       	ldi	r24, 0x03	; 3
        }
    }
    EXIT_CRITICAL_SECTION(  );
     8fc:	78 94       	sei

    return eStatus;
}
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	08 95       	ret

0000090a <eMBRTUStart>:

void
eMBRTUStart( void )
{
    ENTER_CRITICAL_SECTION(  );
     90a:	f8 94       	cli
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
     90c:	10 92 bf 00 	sts	0x00BF, r1
    vMBPortSerialEnable( TRUE, FALSE );
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
     918:	0e 94 92 02 	call	0x524	; 0x524 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
     91c:	78 94       	sei
}
     91e:	08 95       	ret

00000920 <eMBRTUStop>:

void
eMBRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
     920:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
     92a:	0e 94 a3 02 	call	0x546	; 0x546 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
     92e:	78 94       	sei
}
     930:	08 95       	ret

00000932 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	8c 01       	movw	r16, r24
     940:	7b 01       	movw	r14, r22
     942:	ea 01       	movw	r28, r20
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
     944:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
     946:	80 91 c5 00 	lds	r24, 0x00C5
     94a:	90 91 c6 00 	lds	r25, 0x00C6
     94e:	84 30       	cpi	r24, 0x04	; 4
     950:	91 05       	cpc	r25, r1
     952:	e0 f0       	brcs	.+56     	; 0x98c <eMBRTUReceive+0x5a>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
     954:	60 91 c5 00 	lds	r22, 0x00C5
     958:	70 91 c6 00 	lds	r23, 0x00C6
     95c:	83 ef       	ldi	r24, 0xF3	; 243
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 ac 01 	call	0x358	; 0x358 <usMBCRC16>
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	91 f4       	brne	.+36     	; 0x98c <eMBRTUReceive+0x5a>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
     968:	80 91 f3 00 	lds	r24, 0x00F3
     96c:	f8 01       	movw	r30, r16
     96e:	80 83       	st	Z, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
     970:	80 91 c5 00 	lds	r24, 0x00C5
     974:	90 91 c6 00 	lds	r25, 0x00C6
     978:	03 97       	sbiw	r24, 0x03	; 3
     97a:	99 83       	std	Y+1, r25	; 0x01
     97c:	88 83       	st	Y, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
     97e:	84 ef       	ldi	r24, 0xF4	; 244
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	f7 01       	movw	r30, r14
     984:	91 83       	std	Z+1, r25	; 0x01
     986:	80 83       	st	Z, r24

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;
     988:	80 e0       	ldi	r24, 0x00	; 0
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
     98a:	01 c0       	rjmp	.+2      	; 0x98e <eMBRTUReceive+0x5c>
    }
    else
    {
        eStatus = MB_EIO;
     98c:	85 e0       	ldi	r24, 0x05	; 5
    }

    EXIT_CRITICAL_SECTION(  );
     98e:	78 94       	sei
    return eStatus;
}
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	08 95       	ret

0000099e <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
     99e:	1f 93       	push	r17
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
     9a0:	f8 94       	cli

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
     9a2:	10 91 bf 00 	lds	r17, 0x00BF
     9a6:	11 30       	cpi	r17, 0x01	; 1
     9a8:	09 f0       	breq	.+2      	; 0x9ac <eMBRTUSend+0xe>
     9aa:	42 c0       	rjmp	.+132    	; 0xa30 <eMBRTUSend+0x92>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
     9ac:	fb 01       	movw	r30, r22
     9ae:	31 97       	sbiw	r30, 0x01	; 1
     9b0:	f0 93 c4 00 	sts	0x00C4, r31
     9b4:	e0 93 c3 00 	sts	0x00C3, r30
        usSndBufferCount = 1;
     9b8:	21 e0       	ldi	r18, 0x01	; 1
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	30 93 c2 00 	sts	0x00C2, r19
     9c0:	20 93 c1 00 	sts	0x00C1, r18

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
     9c4:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
     9c6:	80 91 c1 00 	lds	r24, 0x00C1
     9ca:	90 91 c2 00 	lds	r25, 0x00C2
     9ce:	84 0f       	add	r24, r20
     9d0:	95 1f       	adc	r25, r21
     9d2:	90 93 c2 00 	sts	0x00C2, r25
     9d6:	80 93 c1 00 	sts	0x00C1, r24

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
     9da:	60 91 c1 00 	lds	r22, 0x00C1
     9de:	70 91 c2 00 	lds	r23, 0x00C2
     9e2:	cf 01       	movw	r24, r30
     9e4:	0e 94 ac 01 	call	0x358	; 0x358 <usMBCRC16>
     9e8:	49 2f       	mov	r20, r25
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
     9ea:	20 91 c1 00 	lds	r18, 0x00C1
     9ee:	30 91 c2 00 	lds	r19, 0x00C2
     9f2:	f9 01       	movw	r30, r18
     9f4:	ed 50       	subi	r30, 0x0D	; 13
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	80 83       	st	Z, r24
     9fa:	2f 5f       	subi	r18, 0xFF	; 255
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
     9fe:	30 93 c2 00 	sts	0x00C2, r19
     a02:	20 93 c1 00 	sts	0x00C1, r18
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
     a06:	80 91 c1 00 	lds	r24, 0x00C1
     a0a:	90 91 c2 00 	lds	r25, 0x00C2
     a0e:	fc 01       	movw	r30, r24
     a10:	ed 50       	subi	r30, 0x0D	; 13
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
     a14:	40 83       	st	Z, r20
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	90 93 c2 00 	sts	0x00C2, r25
     a1c:	80 93 c1 00 	sts	0x00C1, r24

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
     a20:	10 93 c0 00 	sts	0x00C0, r17
        vMBPortSerialEnable( FALSE, TRUE );
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vMBPortSerialEnable>
}

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <eMBRTUSend+0x94>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
     a30:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     a32:	78 94       	sei
    return eStatus;
}
     a34:	1f 91       	pop	r17
     a36:	08 95       	ret

00000a38 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	0f 92       	push	r0
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
     a42:	ce 01       	movw	r24, r28
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	0e 94 34 02 	call	0x468	; 0x468 <xMBPortSerialGetByte>

    switch ( eRcvState )
     a4a:	80 91 bf 00 	lds	r24, 0x00BF
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	39 f0       	breq	.+14     	; 0xa60 <xMBRTUReceiveFSM+0x28>
     a52:	81 30       	cpi	r24, 0x01	; 1
     a54:	98 f1       	brcs	.+102    	; 0xabc <xMBRTUReceiveFSM+0x84>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	b9 f0       	breq	.+46     	; 0xa88 <xMBRTUReceiveFSM+0x50>
     a5a:	83 30       	cpi	r24, 0x03	; 3
     a5c:	89 f5       	brne	.+98     	; 0xac0 <xMBRTUReceiveFSM+0x88>
     a5e:	2e c0       	rjmp	.+92     	; 0xabc <xMBRTUReceiveFSM+0x84>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
     a60:	10 92 c6 00 	sts	0x00C6, r1
     a64:	10 92 c5 00 	sts	0x00C5, r1
        ucRTUBuf[usRcvBufferPos++] = ucByte;
     a68:	80 91 c5 00 	lds	r24, 0x00C5
     a6c:	90 91 c6 00 	lds	r25, 0x00C6
     a70:	29 81       	ldd	r18, Y+1	; 0x01
     a72:	fc 01       	movw	r30, r24
     a74:	ed 50       	subi	r30, 0x0D	; 13
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	20 83       	st	Z, r18
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	90 93 c6 00 	sts	0x00C6, r25
     a80:	80 93 c5 00 	sts	0x00C5, r24
        eRcvState = STATE_RX_RCV;
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	18 c0       	rjmp	.+48     	; 0xab8 <xMBRTUReceiveFSM+0x80>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
     a88:	80 91 c5 00 	lds	r24, 0x00C5
     a8c:	90 91 c6 00 	lds	r25, 0x00C6
     a90:	8f 3f       	cpi	r24, 0xFF	; 255
     a92:	91 05       	cpc	r25, r1
     a94:	09 f0       	breq	.+2      	; 0xa98 <xMBRTUReceiveFSM+0x60>
     a96:	78 f4       	brcc	.+30     	; 0xab6 <xMBRTUReceiveFSM+0x7e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
     a98:	80 91 c5 00 	lds	r24, 0x00C5
     a9c:	90 91 c6 00 	lds	r25, 0x00C6
     aa0:	29 81       	ldd	r18, Y+1	; 0x01
     aa2:	fc 01       	movw	r30, r24
     aa4:	ed 50       	subi	r30, 0x0D	; 13
     aa6:	ff 4f       	sbci	r31, 0xFF	; 255
     aa8:	20 83       	st	Z, r18
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	90 93 c6 00 	sts	0x00C6, r25
     ab0:	80 93 c5 00 	sts	0x00C5, r24
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <xMBRTUReceiveFSM+0x84>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	80 93 bf 00 	sts	0x00BF, r24
        }
        vMBPortTimersEnable(  );
     abc:	0e 94 92 02 	call	0x524	; 0x524 <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	0f 90       	pop	r0
     ac4:	cf 91       	pop	r28
     ac6:	df 91       	pop	r29
     ac8:	08 95       	ret

00000aca <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
     aca:	1f 93       	push	r17
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
     acc:	80 91 c0 00 	lds	r24, 0x00C0
     ad0:	88 23       	and	r24, r24
     ad2:	19 f0       	breq	.+6      	; 0xada <xMBRTUTransmitFSM+0x10>
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	89 f5       	brne	.+98     	; 0xb3a <xMBRTUTransmitFSM+0x70>
     ad8:	05 c0       	rjmp	.+10     	; 0xae4 <xMBRTUTransmitFSM+0x1a>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vMBPortSerialEnable>
     ae2:	2b c0       	rjmp	.+86     	; 0xb3a <xMBRTUTransmitFSM+0x70>
        break;

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
     ae4:	80 91 c1 00 	lds	r24, 0x00C1
     ae8:	90 91 c2 00 	lds	r25, 0x00C2
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	d1 f0       	breq	.+52     	; 0xb24 <xMBRTUTransmitFSM+0x5a>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
     af0:	e0 91 c3 00 	lds	r30, 0x00C3
     af4:	f0 91 c4 00 	lds	r31, 0x00C4
     af8:	80 81       	ld	r24, Z
     afa:	0e 94 31 02 	call	0x462	; 0x462 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
     afe:	80 91 c3 00 	lds	r24, 0x00C3
     b02:	90 91 c4 00 	lds	r25, 0x00C4
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	90 93 c4 00 	sts	0x00C4, r25
     b0c:	80 93 c3 00 	sts	0x00C3, r24
            usSndBufferCount--;
     b10:	80 91 c1 00 	lds	r24, 0x00C1
     b14:	90 91 c2 00 	lds	r25, 0x00C2
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	90 93 c2 00 	sts	0x00C2, r25
     b1e:	80 93 c1 00 	sts	0x00C1, r24
     b22:	0b c0       	rjmp	.+22     	; 0xb3a <xMBRTUTransmitFSM+0x70>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	0e 94 ce 01 	call	0x39c	; 0x39c <xMBPortEventPost>
     b2a:	18 2f       	mov	r17, r24
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
     b34:	10 92 c0 00 	sts	0x00C0, r1
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <xMBRTUTransmitFSM+0x72>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     b3a:	10 e0       	ldi	r17, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
     b3c:	81 2f       	mov	r24, r17
     b3e:	1f 91       	pop	r17
     b40:	08 95       	ret

00000b42 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	0f 92       	push	r0
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
     b4c:	80 91 bf 00 	lds	r24, 0x00BF
     b50:	88 23       	and	r24, r24
     b52:	19 f0       	breq	.+6      	; 0xb5a <xMBRTUTimerT35Expired+0x18>
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	39 f4       	brne	.+14     	; 0xb66 <xMBRTUTimerT35Expired+0x24>
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <xMBRTUTimerT35Expired+0x1c>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <xMBRTUTimerT35Expired+0x1e>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	0e 94 ce 01 	call	0x39c	; 0x39c <xMBPortEventPost>
        break;
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <xMBRTUTimerT35Expired+0x26>
}

BOOL
xMBRTUTimerT35Expired( void )
{
    BOOL            xNeedPoll = FALSE;
     b66:	80 e0       	ldi	r24, 0x00	; 0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
     b68:	89 83       	std	Y+1, r24	; 0x01
     b6a:	0e 94 a3 02 	call	0x546	; 0x546 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	90 93 bf 00 	sts	0x00BF, r25

    return xNeedPoll;
}
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	0f 90       	pop	r0
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	fc 01       	movw	r30, r24
     b88:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     b8a:	88 81       	ld	r24, Y
     b8c:	99 81       	ldd	r25, Y+1	; 0x01
     b8e:	85 30       	cpi	r24, 0x05	; 5
     b90:	91 05       	cpc	r25, r1
     b92:	e9 f5       	brne	.+122    	; 0xc0e <eMBFuncReadInputRegister+0x90>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     b94:	cf 01       	movw	r24, r30
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	41 81       	ldd	r20, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     b9a:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
     b9c:	33 81       	ldd	r19, Z+3	; 0x03
     b9e:	20 e0       	ldi	r18, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     ba0:	04 81       	ldd	r16, Z+4	; 0x04
     ba2:	10 e0       	ldi	r17, 0x00	; 0
     ba4:	02 2b       	or	r16, r18
     ba6:	13 2b       	or	r17, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
     ba8:	98 01       	movw	r18, r16
     baa:	21 50       	subi	r18, 0x01	; 1
     bac:	30 40       	sbci	r19, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
     bae:	2c 37       	cpi	r18, 0x7C	; 124
     bb0:	31 05       	cpc	r19, r1
     bb2:	68 f5       	brcc	.+90     	; 0xc0e <eMBFuncReadInputRegister+0x90>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     bb4:	19 82       	std	Y+1, r1	; 0x01
     bb6:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
     bb8:	24 e0       	ldi	r18, 0x04	; 4
     bba:	20 83       	st	Z, r18
            *usLen += 1;
     bbc:	28 81       	ld	r18, Y
     bbe:	39 81       	ldd	r19, Y+1	; 0x01
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	39 83       	std	Y+1, r19	; 0x01
     bc6:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
     bc8:	20 2f       	mov	r18, r16
     bca:	22 0f       	add	r18, r18
     bcc:	21 83       	std	Z+1, r18	; 0x01
            *usLen += 1;
     bce:	28 81       	ld	r18, Y
     bd0:	39 81       	ldd	r19, Y+1	; 0x01
     bd2:	2f 5f       	subi	r18, 0xFF	; 255
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	39 83       	std	Y+1, r19	; 0x01
     bd8:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     bda:	34 2f       	mov	r19, r20
     bdc:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	62 2b       	or	r22, r18
     be2:	73 2b       	or	r23, r19
        usRegAddress++;
     be4:	6f 5f       	subi	r22, 0xFF	; 255
     be6:	7f 4f       	sbci	r23, 0xFF	; 255

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	a8 01       	movw	r20, r16
     bec:	0e 94 80 01 	call	0x300	; 0x300 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     bf0:	88 23       	and	r24, r24
     bf2:	19 f0       	breq	.+6      	; 0xbfa <eMBFuncReadInputRegister+0x7c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     bf4:	0e 94 93 07 	call	0xf26	; 0xf26 <prveMBError2Exception>
     bf8:	0b c0       	rjmp	.+22     	; 0xc10 <eMBFuncReadInputRegister+0x92>
            }
            else
            {
                *usLen += usRegCount * 2;
     bfa:	00 0f       	add	r16, r16
     bfc:	11 1f       	adc	r17, r17
     bfe:	88 81       	ld	r24, Y
     c00:	99 81       	ldd	r25, Y+1	; 0x01
     c02:	80 0f       	add	r24, r16
     c04:	91 1f       	adc	r25, r17
     c06:	99 83       	std	Y+1, r25	; 0x01
     c08:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <eMBFuncReadInputRegister+0x92>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     c0e:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	08 95       	ret

00000c1a <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     c1a:	fb 01       	movw	r30, r22
     c1c:	20 81       	ld	r18, Z
     c1e:	31 81       	ldd	r19, Z+1	; 0x01
     c20:	25 30       	cpi	r18, 0x05	; 5
     c22:	31 05       	cpc	r19, r1
     c24:	a1 f4       	brne	.+40     	; 0xc4e <eMBFuncWriteHoldingRegister+0x34>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     c26:	fc 01       	movw	r30, r24
     c28:	31 81       	ldd	r19, Z+1	; 0x01
     c2a:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	62 2b       	or	r22, r18
     c32:	73 2b       	or	r23, r19
        usRegAddress++;
     c34:	6f 5f       	subi	r22, 0xFF	; 255
     c36:	7f 4f       	sbci	r23, 0xFF	; 255

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
     c38:	03 96       	adiw	r24, 0x03	; 3
     c3a:	41 e0       	ldi	r20, 0x01	; 1
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	21 e0       	ldi	r18, 0x01	; 1
     c40:	0e 94 95 01 	call	0x32a	; 0x32a <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
     c44:	88 23       	and	r24, r24
     c46:	29 f0       	breq	.+10     	; 0xc52 <eMBFuncWriteHoldingRegister+0x38>
        {
            eStatus = prveMBError2Exception( eRegStatus );
     c48:	0e 94 93 07 	call	0xf26	; 0xf26 <prveMBError2Exception>
     c4c:	08 95       	ret
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	08 95       	ret

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
     c52:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     c54:	08 95       	ret

00000c56 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	fc 01       	movw	r30, r24
     c5c:	eb 01       	movw	r28, r22
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
     c5e:	88 81       	ld	r24, Y
     c60:	99 81       	ldd	r25, Y+1	; 0x01
     c62:	86 30       	cpi	r24, 0x06	; 6
     c64:	91 05       	cpc	r25, r1
     c66:	48 f1       	brcs	.+82     	; 0xcba <eMBFuncWriteMultipleHoldingRegister+0x64>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     c68:	21 81       	ldd	r18, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     c6a:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	80 e0       	ldi	r24, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
     c70:	44 81       	ldd	r20, Z+4	; 0x04
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	48 2b       	or	r20, r24
     c76:	59 2b       	or	r21, r25

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
     c78:	35 81       	ldd	r19, Z+5	; 0x05

        if( ( usRegCount >= 1 ) &&
     c7a:	ca 01       	movw	r24, r20
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	88 37       	cpi	r24, 0x78	; 120
     c80:	91 05       	cpc	r25, r1
     c82:	d8 f4       	brcc	.+54     	; 0xcba <eMBFuncWriteMultipleHoldingRegister+0x64>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
     c84:	84 2f       	mov	r24, r20
     c86:	88 0f       	add	r24, r24
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
     c88:	38 17       	cp	r19, r24
     c8a:	b9 f4       	brne	.+46     	; 0xcba <eMBFuncWriteMultipleHoldingRegister+0x64>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     c8c:	92 2f       	mov	r25, r18
     c8e:	80 e0       	ldi	r24, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	68 2b       	or	r22, r24
     c94:	79 2b       	or	r23, r25
        usRegAddress++;
     c96:	6f 5f       	subi	r22, 0xFF	; 255
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
     c9a:	cf 01       	movw	r24, r30
     c9c:	06 96       	adiw	r24, 0x06	; 6
     c9e:	21 e0       	ldi	r18, 0x01	; 1
     ca0:	0e 94 95 01 	call	0x32a	; 0x32a <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     ca4:	88 23       	and	r24, r24
     ca6:	19 f0       	breq	.+6      	; 0xcae <eMBFuncWriteMultipleHoldingRegister+0x58>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     ca8:	0e 94 93 07 	call	0xf26	; 0xf26 <prveMBError2Exception>
     cac:	07 c0       	rjmp	.+14     	; 0xcbc <eMBFuncWriteMultipleHoldingRegister+0x66>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
     cae:	85 e0       	ldi	r24, 0x05	; 5
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	99 83       	std	Y+1, r25	; 0x01
     cb4:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <eMBFuncWriteMultipleHoldingRegister+0x66>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     cba:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	fc 01       	movw	r30, r24
     ccc:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     cce:	88 81       	ld	r24, Y
     cd0:	99 81       	ldd	r25, Y+1	; 0x01
     cd2:	85 30       	cpi	r24, 0x05	; 5
     cd4:	91 05       	cpc	r25, r1
     cd6:	c9 f5       	brne	.+114    	; 0xd4a <eMBFuncReadHoldingRegister+0x88>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     cd8:	cf 01       	movw	r24, r30
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	51 81       	ldd	r21, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     cde:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     ce0:	44 81       	ldd	r20, Z+4	; 0x04
     ce2:	04 2f       	mov	r16, r20
     ce4:	10 e0       	ldi	r17, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
     ce6:	98 01       	movw	r18, r16
     ce8:	21 50       	subi	r18, 0x01	; 1
     cea:	30 40       	sbci	r19, 0x00	; 0
     cec:	2d 37       	cpi	r18, 0x7D	; 125
     cee:	31 05       	cpc	r19, r1
     cf0:	60 f5       	brcc	.+88     	; 0xd4a <eMBFuncReadHoldingRegister+0x88>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     cf2:	19 82       	std	Y+1, r1	; 0x01
     cf4:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
     cf6:	23 e0       	ldi	r18, 0x03	; 3
     cf8:	20 83       	st	Z, r18
            *usLen += 1;
     cfa:	28 81       	ld	r18, Y
     cfc:	39 81       	ldd	r19, Y+1	; 0x01
     cfe:	2f 5f       	subi	r18, 0xFF	; 255
     d00:	3f 4f       	sbci	r19, 0xFF	; 255
     d02:	39 83       	std	Y+1, r19	; 0x01
     d04:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
     d06:	44 0f       	add	r20, r20
     d08:	41 83       	std	Z+1, r20	; 0x01
            *usLen += 1;
     d0a:	28 81       	ld	r18, Y
     d0c:	39 81       	ldd	r19, Y+1	; 0x01
     d0e:	2f 5f       	subi	r18, 0xFF	; 255
     d10:	3f 4f       	sbci	r19, 0xFF	; 255
     d12:	39 83       	std	Y+1, r19	; 0x01
     d14:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     d16:	35 2f       	mov	r19, r21
     d18:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	62 2b       	or	r22, r18
     d1e:	73 2b       	or	r23, r19
        usRegAddress++;
     d20:	6f 5f       	subi	r22, 0xFF	; 255
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	a8 01       	movw	r20, r16
     d28:	0e 94 95 01 	call	0x32a	; 0x32a <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     d2c:	88 23       	and	r24, r24
     d2e:	19 f0       	breq	.+6      	; 0xd36 <eMBFuncReadHoldingRegister+0x74>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     d30:	0e 94 93 07 	call	0xf26	; 0xf26 <prveMBError2Exception>
     d34:	0b c0       	rjmp	.+22     	; 0xd4c <eMBFuncReadHoldingRegister+0x8a>
            }
            else
            {
                *usLen += usRegCount * 2;
     d36:	00 0f       	add	r16, r16
     d38:	11 1f       	adc	r17, r17
     d3a:	88 81       	ld	r24, Y
     d3c:	99 81       	ldd	r25, Y+1	; 0x01
     d3e:	80 0f       	add	r24, r16
     d40:	91 1f       	adc	r25, r17
     d42:	99 83       	std	Y+1, r25	; 0x01
     d44:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	01 c0       	rjmp	.+2      	; 0xd4c <eMBFuncReadHoldingRegister+0x8a>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     d4a:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	08 95       	ret

00000d56 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
     d6c:	8b 01       	movw	r16, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
     d6e:	fb 01       	movw	r30, r22
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	8a 30       	cpi	r24, 0x0A	; 10
     d76:	91 05       	cpc	r25, r1
     d78:	08 f4       	brcc	.+2      	; 0xd7c <eMBFuncReadWriteMultipleHoldingRegister+0x26>
     d7a:	6a c0       	rjmp	.+212    	; 0xe50 <eMBFuncReadWriteMultipleHoldingRegister+0xfa>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
     d7c:	6e 01       	movw	r12, r28
     d7e:	08 94       	sec
     d80:	c1 1c       	adc	r12, r1
     d82:	d1 1c       	adc	r13, r1
     d84:	b9 80       	ldd	r11, Y+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
     d86:	aa 80       	ldd	r10, Y+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
     d88:	9b 81       	ldd	r25, Y+3	; 0x03
     d8a:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
     d8c:	ec 80       	ldd	r14, Y+4	; 0x04
     d8e:	ff 24       	eor	r15, r15
     d90:	e8 2a       	or	r14, r24
     d92:	f9 2a       	or	r15, r25

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
     d94:	7d 81       	ldd	r23, Y+5	; 0x05
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
     d96:	6e 81       	ldd	r22, Y+6	; 0x06
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
     d98:	9f 81       	ldd	r25, Y+7	; 0x07
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
     d9a:	48 85       	ldd	r20, Y+8	; 0x08

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
     d9c:	89 85       	ldd	r24, Y+9	; 0x09

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
     d9e:	97 01       	movw	r18, r14
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	30 40       	sbci	r19, 0x00	; 0
     da4:	2d 37       	cpi	r18, 0x7D	; 125
     da6:	31 05       	cpc	r19, r1
     da8:	08 f0       	brcs	.+2      	; 0xdac <eMBFuncReadWriteMultipleHoldingRegister+0x56>
     daa:	54 c0       	rjmp	.+168    	; 0xe54 <eMBFuncReadWriteMultipleHoldingRegister+0xfe>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
     dac:	39 2f       	mov	r19, r25
     dae:	20 e0       	ldi	r18, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	42 2b       	or	r20, r18
     db4:	53 2b       	or	r21, r19

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
     db6:	41 15       	cp	r20, r1
     db8:	51 05       	cpc	r21, r1
     dba:	09 f4       	brne	.+2      	; 0xdbe <eMBFuncReadWriteMultipleHoldingRegister+0x68>
     dbc:	4b c0       	rjmp	.+150    	; 0xe54 <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
     dbe:	4a 37       	cpi	r20, 0x7A	; 122
     dc0:	51 05       	cpc	r21, r1
     dc2:	08 f0       	brcs	.+2      	; 0xdc6 <eMBFuncReadWriteMultipleHoldingRegister+0x70>
     dc4:	47 c0       	rjmp	.+142    	; 0xe54 <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
     dc6:	9a 01       	movw	r18, r20
     dc8:	22 0f       	add	r18, r18
     dca:	33 1f       	adc	r19, r19
     dcc:	90 e0       	ldi	r25, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
     dce:	28 17       	cp	r18, r24
     dd0:	39 07       	cpc	r19, r25
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <eMBFuncReadWriteMultipleHoldingRegister+0x80>
     dd4:	3f c0       	rjmp	.+126    	; 0xe54 <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
     dd6:	97 2f       	mov	r25, r23
     dd8:	80 e0       	ldi	r24, 0x00	; 0
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	68 2b       	or	r22, r24
     dde:	79 2b       	or	r23, r25
        usRegWriteAddress++;
     de0:	6f 5f       	subi	r22, 0xFF	; 255
     de2:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
     de4:	ce 01       	movw	r24, r28
     de6:	0a 96       	adiw	r24, 0x0a	; 10
     de8:	21 e0       	ldi	r18, 0x01	; 1
     dea:	0e 94 95 01 	call	0x32a	; 0x32a <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
     dee:	88 23       	and	r24, r24
     df0:	61 f5       	brne	.+88     	; 0xe4a <eMBFuncReadWriteMultipleHoldingRegister+0xf4>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
     df2:	f8 01       	movw	r30, r16
     df4:	11 82       	std	Z+1, r1	; 0x01
     df6:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
     df8:	87 e1       	ldi	r24, 0x17	; 23
     dfa:	88 83       	st	Y, r24
                *usLen += 1;
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	01 96       	adiw	r24, 0x01	; 1
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
     e06:	8e 2d       	mov	r24, r14
     e08:	88 0f       	add	r24, r24
     e0a:	89 83       	std	Y+1, r24	; 0x01
                *usLen += 1;
     e0c:	80 81       	ld	r24, Z
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	91 83       	std	Z+1, r25	; 0x01
     e14:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
     e16:	9b 2d       	mov	r25, r11
     e18:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
     e1a:	6a 2d       	mov	r22, r10
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	68 2b       	or	r22, r24
     e20:	79 2b       	or	r23, r25
        usRegReadAddress++;
     e22:	6f 5f       	subi	r22, 0xFF	; 255
     e24:	7f 4f       	sbci	r23, 0xFF	; 255
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
     e26:	c6 01       	movw	r24, r12
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	a7 01       	movw	r20, r14
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	0e 94 95 01 	call	0x32a	; 0x32a <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
     e32:	88 23       	and	r24, r24
     e34:	51 f4       	brne	.+20     	; 0xe4a <eMBFuncReadWriteMultipleHoldingRegister+0xf4>
                {
                    *usLen += 2 * usRegReadCount;
     e36:	ee 0c       	add	r14, r14
     e38:	ff 1c       	adc	r15, r15
     e3a:	f8 01       	movw	r30, r16
     e3c:	80 81       	ld	r24, Z
     e3e:	91 81       	ldd	r25, Z+1	; 0x01
     e40:	8e 0d       	add	r24, r14
     e42:	9f 1d       	adc	r25, r15
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	80 83       	st	Z, r24
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <eMBFuncReadWriteMultipleHoldingRegister+0xfa>
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
     e4a:	0e 94 93 07 	call	0xf26	; 0xf26 <prveMBError2Exception>
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <eMBFuncReadWriteMultipleHoldingRegister+0x100>
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <eMBFuncReadWriteMultipleHoldingRegister+0x100>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     e54:	83 e0       	ldi	r24, 0x03	; 3
        }
    }
    return eStatus;
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	bf 90       	pop	r11
     e68:	af 90       	pop	r10
     e6a:	08 95       	ret

00000e6c <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
     e70:	30 e0       	ldi	r19, 0x00	; 0
    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
     e72:	eb 01       	movw	r28, r22
     e74:	53 e0       	ldi	r21, 0x03	; 3
     e76:	d6 95       	lsr	r29
     e78:	c7 95       	ror	r28
     e7a:	5a 95       	dec	r21
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <xMBUtilSetBits+0xa>
     e7e:	67 70       	andi	r22, 0x07	; 7
     e80:	70 70       	andi	r23, 0x00	; 0

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
     e82:	e1 e0       	ldi	r30, 0x01	; 1
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <xMBUtilSetBits+0x20>
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	4a 95       	dec	r20
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <xMBUtilSetBits+0x1c>
     e90:	31 97       	sbiw	r30, 0x01	; 1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
     e92:	dc 01       	movw	r26, r24
     e94:	ac 0f       	add	r26, r28
     e96:	bd 1f       	adc	r27, r29
     e98:	4c 91       	ld	r20, X
     e9a:	50 e0       	ldi	r21, 0x00	; 0
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
     e9c:	21 96       	adiw	r28, 0x01	; 1
     e9e:	c8 0f       	add	r28, r24
     ea0:	d9 1f       	adc	r29, r25
     ea2:	98 81       	ld	r25, Y
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	48 2b       	or	r20, r24
     ea8:	59 2b       	or	r21, r25
    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
     eaa:	06 2e       	mov	r0, r22
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <xMBUtilSetBits+0x46>
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <xMBUtilSetBits+0x42>
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
     eb6:	e0 95       	com	r30
     eb8:	f0 95       	com	r31
     eba:	4e 23       	and	r20, r30
     ebc:	5f 23       	and	r21, r31

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <xMBUtilSetBits+0x58>
     ec0:	22 0f       	add	r18, r18
     ec2:	33 1f       	adc	r19, r19
     ec4:	6a 95       	dec	r22
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <xMBUtilSetBits+0x54>
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
     ec8:	42 2b       	or	r20, r18
     eca:	53 2b       	or	r21, r19

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
     ecc:	4c 93       	st	X, r20
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
     ece:	58 83       	st	Y, r21
}
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
     ed6:	9b 01       	movw	r18, r22
     ed8:	f3 e0       	ldi	r31, 0x03	; 3
     eda:	36 95       	lsr	r19
     edc:	27 95       	ror	r18
     ede:	fa 95       	dec	r31
     ee0:	e1 f7       	brne	.-8      	; 0xeda <xMBUtilGetBits+0x4>

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
     ee2:	dc 01       	movw	r26, r24
     ee4:	a2 0f       	add	r26, r18
     ee6:	b3 1f       	adc	r27, r19
     ee8:	8c 91       	ld	r24, X
     eea:	90 e0       	ldi	r25, 0x00	; 0
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
     eec:	11 96       	adiw	r26, 0x01	; 1
     eee:	fc 91       	ld	r31, X
     ef0:	11 97       	sbiw	r26, 0x01	; 1
     ef2:	e0 e0       	ldi	r30, 0x00	; 0
     ef4:	8e 2b       	or	r24, r30
     ef6:	9f 2b       	or	r25, r31
    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
     ef8:	e3 e0       	ldi	r30, 0x03	; 3
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	ea 95       	dec	r30
     f00:	e1 f7       	brne	.-8      	; 0xefa <xMBUtilGetBits+0x24>
     f02:	62 1b       	sub	r22, r18
     f04:	73 0b       	sbc	r23, r19
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <xMBUtilGetBits+0x36>
     f08:	96 95       	lsr	r25
     f0a:	87 95       	ror	r24
     f0c:	6a 95       	dec	r22
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <xMBUtilGetBits+0x32>

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
     f10:	21 e0       	ldi	r18, 0x01	; 1
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <xMBUtilGetBits+0x44>
     f16:	22 0f       	add	r18, r18
     f18:	33 1f       	adc	r19, r19
     f1a:	4a 95       	dec	r20
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <xMBUtilGetBits+0x40>
     f1e:	21 50       	subi	r18, 0x01	; 1
     f20:	30 40       	sbci	r19, 0x00	; 0

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;

    return ( UCHAR ) usWordBuf;
}
     f22:	82 23       	and	r24, r18
     f24:	08 95       	ret

00000f26 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
     f26:	88 30       	cpi	r24, 0x08	; 8
     f28:	30 f4       	brcc	.+12     	; 0xf36 <prveMBError2Exception+0x10>
     f2a:	e8 2f       	mov	r30, r24
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	e9 56       	subi	r30, 0x69	; 105
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	80 81       	ld	r24, Z
     f34:	08 95       	ret
     f36:	84 e0       	ldi	r24, 0x04	; 4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
     f38:	08 95       	ret

00000f3a <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	fc 01       	movw	r30, r24
     f42:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     f44:	88 81       	ld	r24, Y
     f46:	99 81       	ldd	r25, Y+1	; 0x01
     f48:	85 30       	cpi	r24, 0x05	; 5
     f4a:	91 05       	cpc	r25, r1
     f4c:	09 f0       	breq	.+2      	; 0xf50 <eMBFuncReadCoils+0x16>
     f4e:	48 c0       	rjmp	.+144    	; 0xfe0 <eMBFuncReadCoils+0xa6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     f50:	cf 01       	movw	r24, r30
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	71 81       	ldd	r23, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     f56:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
     f58:	33 81       	ldd	r19, Z+3	; 0x03
     f5a:	20 e0       	ldi	r18, 0x00	; 0
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
     f5c:	44 81       	ldd	r20, Z+4	; 0x04
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	42 2b       	or	r20, r18
     f62:	53 2b       	or	r21, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
     f64:	9a 01       	movw	r18, r20
     f66:	21 50       	subi	r18, 0x01	; 1
     f68:	30 40       	sbci	r19, 0x00	; 0
     f6a:	a7 e0       	ldi	r26, 0x07	; 7
     f6c:	2f 3c       	cpi	r18, 0xCF	; 207
     f6e:	3a 07       	cpc	r19, r26
     f70:	b8 f5       	brcc	.+110    	; 0xfe0 <eMBFuncReadCoils+0xa6>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     f72:	19 82       	std	Y+1, r1	; 0x01
     f74:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
     f76:	21 e0       	ldi	r18, 0x01	; 1
     f78:	20 83       	st	Z, r18
            *usLen += 1;
     f7a:	28 81       	ld	r18, Y
     f7c:	39 81       	ldd	r19, Y+1	; 0x01
     f7e:	2f 5f       	subi	r18, 0xFF	; 255
     f80:	3f 4f       	sbci	r19, 0xFF	; 255
     f82:	39 83       	std	Y+1, r19	; 0x01
     f84:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
     f86:	da 01       	movw	r26, r20
     f88:	a7 70       	andi	r26, 0x07	; 7
     f8a:	b0 70       	andi	r27, 0x00	; 0
     f8c:	9a 01       	movw	r18, r20
     f8e:	13 e0       	ldi	r17, 0x03	; 3
     f90:	36 95       	lsr	r19
     f92:	27 95       	ror	r18
     f94:	1a 95       	dec	r17
     f96:	e1 f7       	brne	.-8      	; 0xf90 <eMBFuncReadCoils+0x56>
     f98:	10 97       	sbiw	r26, 0x00	; 0
     f9a:	19 f0       	breq	.+6      	; 0xfa2 <eMBFuncReadCoils+0x68>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
     f9c:	12 2f       	mov	r17, r18
     f9e:	1f 5f       	subi	r17, 0xFF	; 255
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <eMBFuncReadCoils+0x6a>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
     fa2:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
     fa4:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
     fa6:	28 81       	ld	r18, Y
     fa8:	39 81       	ldd	r19, Y+1	; 0x01
     faa:	2f 5f       	subi	r18, 0xFF	; 255
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	39 83       	std	Y+1, r19	; 0x01
     fb0:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     fb2:	37 2f       	mov	r19, r23
     fb4:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	62 2b       	or	r22, r18
     fba:	73 2b       	or	r23, r19
        usRegAddress++;
     fbc:	6f 5f       	subi	r22, 0xFF	; 255
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	0e 94 a8 01 	call	0x350	; 0x350 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     fc6:	88 23       	and	r24, r24
     fc8:	19 f0       	breq	.+6      	; 0xfd0 <eMBFuncReadCoils+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     fca:	0e 94 93 07 	call	0xf26	; 0xf26 <prveMBError2Exception>
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <eMBFuncReadCoils+0xa8>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
     fd0:	88 81       	ld	r24, Y
     fd2:	99 81       	ldd	r25, Y+1	; 0x01
     fd4:	81 0f       	add	r24, r17
     fd6:	91 1d       	adc	r25, r1
     fd8:	99 83       	std	Y+1, r25	; 0x01
     fda:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <eMBFuncReadCoils+0xa8>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     fe0:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	08 95       	ret

00000fea <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <eMBFuncWriteCoil+0x6>
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	fc 01       	movw	r30, r24
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     ff6:	db 01       	movw	r26, r22
     ff8:	8d 91       	ld	r24, X+
     ffa:	9c 91       	ld	r25, X
     ffc:	11 97       	sbiw	r26, 0x01	; 1
     ffe:	85 30       	cpi	r24, 0x05	; 5
    1000:	91 05       	cpc	r25, r1
    1002:	21 f5       	brne	.+72     	; 0x104c <eMBFuncWriteCoil+0x62>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    1004:	21 81       	ldd	r18, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    1006:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    1008:	84 81       	ldd	r24, Z+4	; 0x04
    100a:	88 23       	and	r24, r24
    100c:	f9 f4       	brne	.+62     	; 0x104c <eMBFuncWriteCoil+0x62>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
    100e:	83 81       	ldd	r24, Z+3	; 0x03
    1010:	98 2f       	mov	r25, r24
    1012:	91 50       	subi	r25, 0x01	; 1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    1014:	9e 3f       	cpi	r25, 0xFE	; 254
    1016:	d0 f0       	brcs	.+52     	; 0x104c <eMBFuncWriteCoil+0x62>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
    1018:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
    101a:	8f 3f       	cpi	r24, 0xFF	; 255
    101c:	19 f4       	brne	.+6      	; 0x1024 <eMBFuncWriteCoil+0x3a>
            {
                ucBuf[0] = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <eMBFuncWriteCoil+0x3c>
            }
            else
            {
                ucBuf[0] = 0;
    1024:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    1026:	92 2f       	mov	r25, r18
    1028:	80 e0       	ldi	r24, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	68 2b       	or	r22, r24
    102e:	79 2b       	or	r23, r25
        usRegAddress++;
    1030:	6f 5f       	subi	r22, 0xFF	; 255
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
    1034:	ce 01       	movw	r24, r28
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	21 e0       	ldi	r18, 0x01	; 1
    103e:	0e 94 a8 01 	call	0x350	; 0x350 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1042:	88 23       	and	r24, r24
    1044:	29 f0       	breq	.+10     	; 0x1050 <eMBFuncWriteCoil+0x66>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1046:	0e 94 93 07 	call	0xf26	; 0xf26 <prveMBError2Exception>
    104a:	03 c0       	rjmp	.+6      	; 0x1052 <eMBFuncWriteCoil+0x68>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <eMBFuncWriteCoil+0x68>
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    1050:	80 e0       	ldi	r24, 0x00	; 0
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	fc 01       	movw	r30, r24
    1062:	eb 01       	movw	r28, r22
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    1064:	88 81       	ld	r24, Y
    1066:	99 81       	ldd	r25, Y+1	; 0x01
    1068:	86 30       	cpi	r24, 0x06	; 6
    106a:	91 05       	cpc	r25, r1
    106c:	b0 f1       	brcs	.+108    	; 0x10da <eMBFuncWriteMultipleCoils+0x7e>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    106e:	71 81       	ldd	r23, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    1070:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
    1072:	93 81       	ldd	r25, Z+3	; 0x03
    1074:	80 e0       	ldi	r24, 0x00	; 0
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
    1076:	44 81       	ldd	r20, Z+4	; 0x04
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	48 2b       	or	r20, r24
    107c:	59 2b       	or	r21, r25

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    107e:	a5 81       	ldd	r26, Z+5	; 0x05

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
    1080:	9a 01       	movw	r18, r20
    1082:	27 70       	andi	r18, 0x07	; 7
    1084:	30 70       	andi	r19, 0x00	; 0
    1086:	ca 01       	movw	r24, r20
    1088:	b3 e0       	ldi	r27, 0x03	; 3
    108a:	96 95       	lsr	r25
    108c:	87 95       	ror	r24
    108e:	ba 95       	dec	r27
    1090:	e1 f7       	brne	.-8      	; 0x108a <eMBFuncWriteMultipleCoils+0x2e>
    1092:	21 15       	cp	r18, r1
    1094:	31 05       	cpc	r19, r1
    1096:	09 f0       	breq	.+2      	; 0x109a <eMBFuncWriteMultipleCoils+0x3e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
    1098:	8f 5f       	subi	r24, 0xFF	; 255
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
    109a:	9a 01       	movw	r18, r20
    109c:	21 50       	subi	r18, 0x01	; 1
    109e:	30 40       	sbci	r19, 0x00	; 0
    10a0:	97 e0       	ldi	r25, 0x07	; 7
    10a2:	20 3b       	cpi	r18, 0xB0	; 176
    10a4:	39 07       	cpc	r19, r25
    10a6:	c8 f4       	brcc	.+50     	; 0x10da <eMBFuncWriteMultipleCoils+0x7e>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
    10a8:	8a 17       	cp	r24, r26
    10aa:	b9 f4       	brne	.+46     	; 0x10da <eMBFuncWriteMultipleCoils+0x7e>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    10ac:	97 2f       	mov	r25, r23
    10ae:	80 e0       	ldi	r24, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	68 2b       	or	r22, r24
    10b4:	79 2b       	or	r23, r25
        usRegAddress++;
    10b6:	6f 5f       	subi	r22, 0xFF	; 255
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
    10ba:	cf 01       	movw	r24, r30
    10bc:	06 96       	adiw	r24, 0x06	; 6
    10be:	21 e0       	ldi	r18, 0x01	; 1
    10c0:	0e 94 a8 01 	call	0x350	; 0x350 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    10c4:	88 23       	and	r24, r24
    10c6:	19 f0       	breq	.+6      	; 0x10ce <eMBFuncWriteMultipleCoils+0x72>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    10c8:	0e 94 93 07 	call	0xf26	; 0xf26 <prveMBError2Exception>
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <eMBFuncWriteMultipleCoils+0x80>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    10ce:	85 e0       	ldi	r24, 0x05	; 5
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	99 83       	std	Y+1, r25	; 0x01
    10d4:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <eMBFuncWriteMultipleCoils+0x80>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    10da:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	fc 01       	movw	r30, r24
    10ea:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    10ec:	88 81       	ld	r24, Y
    10ee:	99 81       	ldd	r25, Y+1	; 0x01
    10f0:	85 30       	cpi	r24, 0x05	; 5
    10f2:	91 05       	cpc	r25, r1
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <eMBFuncReadDiscreteInputs+0x16>
    10f6:	48 c0       	rjmp	.+144    	; 0x1188 <eMBFuncReadDiscreteInputs+0xa6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    10f8:	cf 01       	movw	r24, r30
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	71 81       	ldd	r23, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    10fe:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
    1100:	33 81       	ldd	r19, Z+3	; 0x03
    1102:	20 e0       	ldi	r18, 0x00	; 0
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
    1104:	44 81       	ldd	r20, Z+4	; 0x04
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	42 2b       	or	r20, r18
    110a:	53 2b       	or	r21, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
    110c:	9a 01       	movw	r18, r20
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	30 40       	sbci	r19, 0x00	; 0
    1112:	a7 e0       	ldi	r26, 0x07	; 7
    1114:	2f 3c       	cpi	r18, 0xCF	; 207
    1116:	3a 07       	cpc	r19, r26
    1118:	b8 f5       	brcc	.+110    	; 0x1188 <eMBFuncReadDiscreteInputs+0xa6>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    111a:	19 82       	std	Y+1, r1	; 0x01
    111c:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
    111e:	22 e0       	ldi	r18, 0x02	; 2
    1120:	20 83       	st	Z, r18
            *usLen += 1;
    1122:	28 81       	ld	r18, Y
    1124:	39 81       	ldd	r19, Y+1	; 0x01
    1126:	2f 5f       	subi	r18, 0xFF	; 255
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	39 83       	std	Y+1, r19	; 0x01
    112c:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
    112e:	da 01       	movw	r26, r20
    1130:	a7 70       	andi	r26, 0x07	; 7
    1132:	b0 70       	andi	r27, 0x00	; 0
    1134:	9a 01       	movw	r18, r20
    1136:	13 e0       	ldi	r17, 0x03	; 3
    1138:	36 95       	lsr	r19
    113a:	27 95       	ror	r18
    113c:	1a 95       	dec	r17
    113e:	e1 f7       	brne	.-8      	; 0x1138 <eMBFuncReadDiscreteInputs+0x56>
    1140:	10 97       	sbiw	r26, 0x00	; 0
    1142:	19 f0       	breq	.+6      	; 0x114a <eMBFuncReadDiscreteInputs+0x68>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
    1144:	12 2f       	mov	r17, r18
    1146:	1f 5f       	subi	r17, 0xFF	; 255
    1148:	01 c0       	rjmp	.+2      	; 0x114c <eMBFuncReadDiscreteInputs+0x6a>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
    114a:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
    114c:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
    114e:	28 81       	ld	r18, Y
    1150:	39 81       	ldd	r19, Y+1	; 0x01
    1152:	2f 5f       	subi	r18, 0xFF	; 255
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	39 83       	std	Y+1, r19	; 0x01
    1158:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    115a:	37 2f       	mov	r19, r23
    115c:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	62 2b       	or	r22, r18
    1162:	73 2b       	or	r23, r19
        usRegAddress++;
    1164:	6f 5f       	subi	r22, 0xFF	; 255
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	0e 94 aa 01 	call	0x354	; 0x354 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    116e:	88 23       	and	r24, r24
    1170:	19 f0       	breq	.+6      	; 0x1178 <eMBFuncReadDiscreteInputs+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1172:	0e 94 93 07 	call	0xf26	; 0xf26 <prveMBError2Exception>
    1176:	09 c0       	rjmp	.+18     	; 0x118a <eMBFuncReadDiscreteInputs+0xa8>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    1178:	88 81       	ld	r24, Y
    117a:	99 81       	ldd	r25, Y+1	; 0x01
    117c:	81 0f       	add	r24, r17
    117e:	91 1d       	adc	r25, r1
    1180:	99 83       	std	Y+1, r25	; 0x01
    1182:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	01 c0       	rjmp	.+2      	; 0x118a <eMBFuncReadDiscreteInputs+0xa8>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1188:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	1f 91       	pop	r17
    1190:	08 95       	ret

00001192 <eMBSetSlaveID>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    eMBErrorCode    eStatus = MB_ENOERR;

    /* the first byte and second byte in the buffer is reserved for
     * the parameter ucSlaveID and the running flag. The rest of
     * the buffer is available for additional data. */
    if( usAdditionalLen + 2 < MB_FUNC_OTHER_REP_SLAVEID_BUF )
    1196:	e9 01       	movw	r28, r18
    1198:	22 96       	adiw	r28, 0x02	; 2
    119a:	c0 32       	cpi	r28, 0x20	; 32
    119c:	d1 05       	cpc	r29, r1
    119e:	f0 f4       	brcc	.+60     	; 0x11dc <eMBSetSlaveID+0x4a>
    {
        usMBSlaveIDLen = 0;
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
    11a0:	80 93 c9 00 	sts	0x00C9, r24
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
    11a4:	66 23       	and	r22, r22
    11a6:	11 f0       	breq	.+4      	; 0x11ac <eMBSetSlaveID+0x1a>
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <eMBSetSlaveID+0x1c>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	80 93 ca 00 	sts	0x00CA, r24
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	90 93 c8 00 	sts	0x00C8, r25
    11ba:	80 93 c7 00 	sts	0x00C7, r24
        if( usAdditionalLen > 0 )
    11be:	21 15       	cp	r18, r1
    11c0:	31 05       	cpc	r19, r1
    11c2:	71 f0       	breq	.+28     	; 0x11e0 <eMBSetSlaveID+0x4e>
        {
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
    11c4:	eb ec       	ldi	r30, 0xCB	; 203
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	cf 01       	movw	r24, r30
    11ca:	ba 01       	movw	r22, r20
    11cc:	a9 01       	movw	r20, r18
    11ce:	0e 94 56 09 	call	0x12ac	; 0x12ac <memcpy>
                    ( size_t )usAdditionalLen );
            usMBSlaveIDLen += usAdditionalLen;
    11d2:	d0 93 c8 00 	sts	0x00C8, r29
    11d6:	c0 93 c7 00 	sts	0x00C7, r28
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <eMBSetSlaveID+0x4e>
        }
    }
    else
    {
        eStatus = MB_ENORES;
    11dc:	84 e0       	ldi	r24, 0x04	; 4
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <eMBSetSlaveID+0x50>

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENORES;
    }
    return eStatus;
}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <eMBFuncReportSlaveID>:

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
    11f6:	c0 91 c7 00 	lds	r28, 0x00C7
    11fa:	d0 91 c8 00 	lds	r29, 0x00C8
    11fe:	ac 01       	movw	r20, r24
    1200:	4f 5f       	subi	r20, 0xFF	; 255
    1202:	5f 4f       	sbci	r21, 0xFF	; 255
    1204:	29 ec       	ldi	r18, 0xC9	; 201
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	ca 01       	movw	r24, r20
    120a:	b9 01       	movw	r22, r18
    120c:	ae 01       	movw	r20, r28
    120e:	0e 94 56 09 	call	0x12ac	; 0x12ac <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
    1212:	21 96       	adiw	r28, 0x01	; 1
    1214:	f8 01       	movw	r30, r16
    1216:	d1 83       	std	Z+1, r29	; 0x01
    1218:	c0 83       	st	Z, r28
    return MB_EX_NONE;
}
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	08 95       	ret

0000122a <__mulsi3>:
    122a:	62 9f       	mul	r22, r18
    122c:	d0 01       	movw	r26, r0
    122e:	73 9f       	mul	r23, r19
    1230:	f0 01       	movw	r30, r0
    1232:	82 9f       	mul	r24, r18
    1234:	e0 0d       	add	r30, r0
    1236:	f1 1d       	adc	r31, r1
    1238:	64 9f       	mul	r22, r20
    123a:	e0 0d       	add	r30, r0
    123c:	f1 1d       	adc	r31, r1
    123e:	92 9f       	mul	r25, r18
    1240:	f0 0d       	add	r31, r0
    1242:	83 9f       	mul	r24, r19
    1244:	f0 0d       	add	r31, r0
    1246:	74 9f       	mul	r23, r20
    1248:	f0 0d       	add	r31, r0
    124a:	65 9f       	mul	r22, r21
    124c:	f0 0d       	add	r31, r0
    124e:	99 27       	eor	r25, r25
    1250:	72 9f       	mul	r23, r18
    1252:	b0 0d       	add	r27, r0
    1254:	e1 1d       	adc	r30, r1
    1256:	f9 1f       	adc	r31, r25
    1258:	63 9f       	mul	r22, r19
    125a:	b0 0d       	add	r27, r0
    125c:	e1 1d       	adc	r30, r1
    125e:	f9 1f       	adc	r31, r25
    1260:	bd 01       	movw	r22, r26
    1262:	cf 01       	movw	r24, r30
    1264:	11 24       	eor	r1, r1
    1266:	08 95       	ret

00001268 <__udivmodsi4>:
    1268:	a1 e2       	ldi	r26, 0x21	; 33
    126a:	1a 2e       	mov	r1, r26
    126c:	aa 1b       	sub	r26, r26
    126e:	bb 1b       	sub	r27, r27
    1270:	fd 01       	movw	r30, r26
    1272:	0d c0       	rjmp	.+26     	; 0x128e <__udivmodsi4_ep>

00001274 <__udivmodsi4_loop>:
    1274:	aa 1f       	adc	r26, r26
    1276:	bb 1f       	adc	r27, r27
    1278:	ee 1f       	adc	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	a2 17       	cp	r26, r18
    127e:	b3 07       	cpc	r27, r19
    1280:	e4 07       	cpc	r30, r20
    1282:	f5 07       	cpc	r31, r21
    1284:	20 f0       	brcs	.+8      	; 0x128e <__udivmodsi4_ep>
    1286:	a2 1b       	sub	r26, r18
    1288:	b3 0b       	sbc	r27, r19
    128a:	e4 0b       	sbc	r30, r20
    128c:	f5 0b       	sbc	r31, r21

0000128e <__udivmodsi4_ep>:
    128e:	66 1f       	adc	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	1a 94       	dec	r1
    1298:	69 f7       	brne	.-38     	; 0x1274 <__udivmodsi4_loop>
    129a:	60 95       	com	r22
    129c:	70 95       	com	r23
    129e:	80 95       	com	r24
    12a0:	90 95       	com	r25
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	bd 01       	movw	r22, r26
    12a8:	cf 01       	movw	r24, r30
    12aa:	08 95       	ret

000012ac <memcpy>:
    12ac:	fb 01       	movw	r30, r22
    12ae:	dc 01       	movw	r26, r24
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <memcpy+0xa>
    12b2:	01 90       	ld	r0, Z+
    12b4:	0d 92       	st	X+, r0
    12b6:	41 50       	subi	r20, 0x01	; 1
    12b8:	50 40       	sbci	r21, 0x00	; 0
    12ba:	d8 f7       	brcc	.-10     	; 0x12b2 <memcpy+0x6>
    12bc:	08 95       	ret

000012be <_exit>:
    12be:	f8 94       	cli

000012c0 <__stop_program>:
    12c0:	ff cf       	rjmp	.-2      	; 0x12c0 <__stop_program>
