
berlios_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001214  000012a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000153  008000a0  008000a0  000012e8  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000057a  00000000  00000000  00001cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000226e  00000000  00000000  00002239  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000aa6  00000000  00000000  000044a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001872  00000000  00000000  00004f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003d0  00000000  00000000  000067c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c7d  00000000  00000000  00006b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017e9  00000000  00000000  0000780d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000004b6  00000000  00000000  00008ff6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c1       	rjmp	.+548    	; 0x226 <__ctors_end>
       2:	2c c1       	rjmp	.+600    	; 0x25c <__bad_interrupt>
       4:	2b c1       	rjmp	.+598    	; 0x25c <__bad_interrupt>
       6:	2a c1       	rjmp	.+596    	; 0x25c <__bad_interrupt>
       8:	29 c1       	rjmp	.+594    	; 0x25c <__bad_interrupt>
       a:	28 c1       	rjmp	.+592    	; 0x25c <__bad_interrupt>
       c:	95 c2       	rjmp	.+1322   	; 0x538 <__vector_6>
       e:	26 c1       	rjmp	.+588    	; 0x25c <__bad_interrupt>
      10:	25 c1       	rjmp	.+586    	; 0x25c <__bad_interrupt>
      12:	24 c1       	rjmp	.+584    	; 0x25c <__bad_interrupt>
      14:	23 c1       	rjmp	.+582    	; 0x25c <__bad_interrupt>
      16:	2c c2       	rjmp	.+1112   	; 0x470 <__vector_11>
      18:	04 c2       	rjmp	.+1032   	; 0x422 <__vector_12>
      1a:	51 c2       	rjmp	.+1186   	; 0x4be <__vector_13>
      1c:	1f c1       	rjmp	.+574    	; 0x25c <__bad_interrupt>
      1e:	1e c1       	rjmp	.+572    	; 0x25c <__bad_interrupt>
      20:	1d c1       	rjmp	.+570    	; 0x25c <__bad_interrupt>
      22:	1c c1       	rjmp	.+568    	; 0x25c <__bad_interrupt>
      24:	1b c1       	rjmp	.+566    	; 0x25c <__bad_interrupt>

00000026 <aucCRCHi>:
      26:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      36:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      46:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      56:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      66:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      76:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      86:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      96:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      a6:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      b6:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      c6:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      d6:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      e6:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      f6:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     106:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     116:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@

00000126 <aucCRCLo>:
     126:	00 c0 c1 01 c3 03 02 c2 c6 06 07 c7 05 c5 c4 04     ................
     136:	cc 0c 0d cd 0f cf ce 0e 0a ca cb 0b c9 09 08 c8     ................
     146:	d8 18 19 d9 1b db da 1a 1e de df 1f dd 1d 1c dc     ................
     156:	14 d4 d5 15 d7 17 16 d6 d2 12 13 d3 11 d1 d0 10     ................
     166:	f0 30 31 f1 33 f3 f2 32 36 f6 f7 37 f5 35 34 f4     .01.3..26..7.54.
     176:	3c fc fd 3d ff 3f 3e fe fa 3a 3b fb 39 f9 f8 38     <..=.?>..:;.9..8
     186:	28 e8 e9 29 eb 2b 2a ea ee 2e 2f ef 2d ed ec 2c     (..).+*.../.-..,
     196:	e4 24 25 e5 27 e7 e6 26 22 e2 e3 23 e1 21 20 e0     .$%.'..&"..#.! .
     1a6:	a0 60 61 a1 63 a3 a2 62 66 a6 a7 67 a5 65 64 a4     .`a.c..bf..g.ed.
     1b6:	6c ac ad 6d af 6f 6e ae aa 6a 6b ab 69 a9 a8 68     l..m.on..jk.i..h
     1c6:	78 b8 b9 79 bb 7b 7a ba be 7e 7f bf 7d bd bc 7c     x..y.{z..~..}..|
     1d6:	b4 74 75 b5 77 b7 b6 76 72 b2 b3 73 b1 71 70 b0     .tu.w..vr..s.qp.
     1e6:	50 90 91 51 93 53 52 92 96 56 57 97 55 95 94 54     P..Q.SR..VW.U..T
     1f6:	9c 5c 5d 9d 5f 9f 9e 5e 5a 9a 9b 5b 99 59 58 98     .\]._..^Z..[.YX.
     206:	88 48 49 89 4b 8b 8a 4a 4e 8e 8f 4f 8d 4d 4c 8c     .HI.K..JN..O.ML.
     216:	44 84 85 45 87 47 46 86 82 42 43 83 41 81 80 40     D..E.GF..BC.A..@

00000226 <__ctors_end>:
     226:	11 24       	eor	r1, r1
     228:	1f be       	out	0x3f, r1	; 63
     22a:	cf e5       	ldi	r28, 0x5F	; 95
     22c:	d4 e0       	ldi	r29, 0x04	; 4
     22e:	de bf       	out	0x3e, r29	; 62
     230:	cd bf       	out	0x3d, r28	; 61

00000232 <__do_copy_data>:
     232:	10 e0       	ldi	r17, 0x00	; 0
     234:	a0 e6       	ldi	r26, 0x60	; 96
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	e4 e1       	ldi	r30, 0x14	; 20
     23a:	f2 e1       	ldi	r31, 0x12	; 18
     23c:	02 c0       	rjmp	.+4      	; 0x242 <__do_copy_data+0x10>
     23e:	05 90       	lpm	r0, Z+
     240:	0d 92       	st	X+, r0
     242:	a0 3a       	cpi	r26, 0xA0	; 160
     244:	b1 07       	cpc	r27, r17
     246:	d9 f7       	brne	.-10     	; 0x23e <__do_copy_data+0xc>

00000248 <__do_clear_bss>:
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	a0 ea       	ldi	r26, 0xA0	; 160
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	01 c0       	rjmp	.+2      	; 0x252 <.do_clear_bss_start>

00000250 <.do_clear_bss_loop>:
     250:	1d 92       	st	X+, r1

00000252 <.do_clear_bss_start>:
     252:	a3 3f       	cpi	r26, 0xF3	; 243
     254:	b1 07       	cpc	r27, r17
     256:	e1 f7       	brne	.-8      	; 0x250 <.do_clear_bss_loop>
     258:	02 d0       	rcall	.+4      	; 0x25e <main>
     25a:	da c7       	rjmp	.+4020   	; 0x1210 <_exit>

0000025c <__bad_interrupt>:
     25c:	d1 ce       	rjmp	.-606    	; 0x0 <__vectors>

0000025e <main>:
static USHORT   usRegInputBuf[REG_INPUT_NREGS];

/* ----------------------- Start implementation -----------------------------*/
int
main( void )
{
     25e:	ef 92       	push	r14
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
     264:	df 93       	push	r29
     266:	cf 93       	push	r28
     268:	00 d0       	rcall	.+0      	; 0x26a <main+0xc>
     26a:	0f 92       	push	r0
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
    const UCHAR     ucSlaveID[] = { 0xAA, 0xBB, 0xCC };
     270:	de 01       	movw	r26, r28
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	e0 e6       	ldi	r30, 0x60	; 96
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	83 e0       	ldi	r24, 0x03	; 3
     27a:	01 90       	ld	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	81 50       	subi	r24, 0x01	; 1
     280:	e1 f7       	brne	.-8      	; 0x27a <main+0x1c>
    eMBErrorCode    eStatus;

//    DDRA |= 0b00001110;
	 

    eStatus = eMBInit( MB_RTU, 0x0A, 0, 38400, MB_PAR_NONE );
     282:	6a e0       	ldi	r22, 0x0A	; 10
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	00 e0       	ldi	r16, 0x00	; 0
     288:	16 e9       	ldi	r17, 0x96	; 150
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	ee 24       	eor	r14, r14
     290:	7a d1       	rcall	.+756    	; 0x586 <eMBInit>

    eStatus = eMBSetSlaveID( 0x34, TRUE, ucSlaveID, 3 );
     292:	84 e3       	ldi	r24, 0x34	; 52
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	ae 01       	movw	r20, r28
     298:	4f 5f       	subi	r20, 0xFF	; 255
     29a:	5f 4f       	sbci	r21, 0xFF	; 255
     29c:	23 e0       	ldi	r18, 0x03	; 3
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	23 d7       	rcall	.+3654   	; 0x10e8 <eMBSetSlaveID>
    sei(  );
     2a2:	78 94       	sei

    /* Enable the Modbus Protocol Stack. */
    eStatus = eMBEnable(  );
     2a4:	1c d2       	rcall	.+1080   	; 0x6de <eMBEnable>

    for( ;; )
    {
        ( void )eMBPoll(  );
     2a6:	3d d2       	rcall	.+1146   	; 0x722 <eMBPoll>

        /* Here we simply count the number of poll cycles. */
        usRegInputBuf[0]++;
     2a8:	80 91 a0 00 	lds	r24, 0x00A0
     2ac:	90 91 a1 00 	lds	r25, 0x00A1
     2b0:	01 96       	adiw	r24, 0x01	; 1
     2b2:	90 93 a1 00 	sts	0x00A1, r25
     2b6:	80 93 a0 00 	sts	0x00A0, r24
     2ba:	f5 cf       	rjmp	.-22     	; 0x2a6 <main+0x48>

000002bc <eMBRegInputCB>:

#define INVBIT(port, bit) port = port ^ (1<<bit);

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
     2bc:	fc 01       	movw	r30, r24

//	INVBIT(PORTA, 1);
	
  eMBErrorCode  eStatus = MB_ENOERR;
  if( ( usAddress == 1 ) && ( usNRegs == 1 ) ) {
     2be:	61 30       	cpi	r22, 0x01	; 1
     2c0:	71 05       	cpc	r23, r1
     2c2:	49 f4       	brne	.+18     	; 0x2d6 <eMBRegInputCB+0x1a>
     2c4:	41 30       	cpi	r20, 0x01	; 1
     2c6:	51 05       	cpc	r21, r1
     2c8:	41 f4       	brne	.+16     	; 0x2da <eMBRegInputCB+0x1e>
      *pucRegBuffer++ = 0;
     2ca:	10 82       	st	Z, r1
//      *pucRegBuffer++ = ~PINA;
      *pucRegBuffer++ = usRegInputBuf[0];
     2cc:	80 91 a0 00 	lds	r24, 0x00A0
     2d0:	81 83       	std	Z+1, r24	; 0x01
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{

//	INVBIT(PORTA, 1);
	
  eMBErrorCode  eStatus = MB_ENOERR;
     2d2:	80 e0       	ldi	r24, 0x00	; 0
  if( ( usAddress == 1 ) && ( usNRegs == 1 ) ) {
      *pucRegBuffer++ = 0;
//      *pucRegBuffer++ = ~PINA;
      *pucRegBuffer++ = usRegInputBuf[0];
     2d4:	08 95       	ret


  }
  else {
    eStatus = MB_ENOREG;
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	08 95       	ret
     2da:	81 e0       	ldi	r24, 0x01	; 1
  }
  return eStatus;
}
     2dc:	08 95       	ret

000002de <eMBRegHoldingCB>:
 
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
     2de:	fc 01       	movw	r30, r24
	
  eMBErrorCode  eStatus = MB_ENOERR;
  if( ( usAddress == 1 ) && ( usNRegs == 1 ) ) {
     2e0:	61 30       	cpi	r22, 0x01	; 1
     2e2:	71 05       	cpc	r23, r1
     2e4:	59 f4       	brne	.+22     	; 0x2fc <eMBRegHoldingCB+0x1e>
     2e6:	41 30       	cpi	r20, 0x01	; 1
     2e8:	51 05       	cpc	r21, r1
     2ea:	41 f4       	brne	.+16     	; 0x2fc <eMBRegHoldingCB+0x1e>
    if( eMode == MB_REG_READ ) {
     2ec:	22 23       	and	r18, r18
     2ee:	41 f4       	brne	.+16     	; 0x300 <eMBRegHoldingCB+0x22>
      *pucRegBuffer++ = 0;
     2f0:	10 82       	st	Z, r1
      *pucRegBuffer++ = ~PINB;
     2f2:	86 b3       	in	r24, 0x16	; 22
     2f4:	80 95       	com	r24
     2f6:	81 83       	std	Z+1, r24	; 0x01
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
	
  eMBErrorCode  eStatus = MB_ENOERR;
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	08 95       	ret
      pucRegBuffer++;
      //PORTB = ~(*pucRegBuffer++);
    }
  }
  else {
    eStatus = MB_ENOREG;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	08 95       	ret
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
	
  eMBErrorCode  eStatus = MB_ENOERR;
     300:	80 e0       	ldi	r24, 0x00	; 0
  else {
    eStatus = MB_ENOREG;
	//eStatus = MB_ENORES;
  }
  return eStatus;
}
     302:	08 95       	ret

00000304 <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	08 95       	ret

00000308 <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	08 95       	ret

0000030c <usMBCRC16>:
    0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
     30c:	dc 01       	movw	r26, r24
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
     30e:	4f ef       	ldi	r20, 0xFF	; 255
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
     310:	5f ef       	ldi	r21, 0xFF	; 255
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
     312:	0f c0       	rjmp	.+30     	; 0x332 <usMBCRC16+0x26>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
     314:	2d 91       	ld	r18, X+
        ucCRCLo = ucCRCHi ^ pgm_read_byte( &aucCRCHi[iIndex] );
     316:	84 2f       	mov	r24, r20
     318:	82 27       	eor	r24, r18
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	fc 01       	movw	r30, r24
     31e:	ea 5d       	subi	r30, 0xDA	; 218
     320:	ff 4f       	sbci	r31, 0xFF	; 255
     322:	44 91       	lpm	r20, Z+
     324:	45 27       	eor	r20, r21
        ucCRCHi = pgm_read_byte( &aucCRCLo[iIndex] );;
     326:	8a 5d       	subi	r24, 0xDA	; 218
     328:	9e 4f       	sbci	r25, 0xFE	; 254
     32a:	fc 01       	movw	r30, r24
     32c:	54 91       	lpm	r21, Z+
     32e:	61 50       	subi	r22, 0x01	; 1
     330:	70 40       	sbci	r23, 0x00	; 0
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
     332:	61 15       	cp	r22, r1
     334:	71 05       	cpc	r23, r1
     336:	71 f7       	brne	.-36     	; 0x314 <usMBCRC16+0x8>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ucCRCHi ^ pgm_read_byte( &aucCRCHi[iIndex] );
        ucCRCHi = pgm_read_byte( &aucCRCLo[iIndex] );;
    }
    return ucCRCHi << 8 | ucCRCLo;
     338:	35 2f       	mov	r19, r21
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	e4 2f       	mov	r30, r20
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	e2 2b       	or	r30, r18
     342:	f3 2b       	or	r31, r19
}
     344:	cf 01       	movw	r24, r30
     346:	08 95       	ret

00000348 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
     348:	10 92 a8 00 	sts	0x00A8, r1
    return TRUE;
}
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	08 95       	ret

00000350 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	90 93 a8 00 	sts	0x00A8, r25
    eQueuedEvent = eEvent;
     356:	80 93 a9 00 	sts	0x00A9, r24
    return TRUE;
}
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	08 95       	ret

0000035e <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
     35e:	20 91 a8 00 	lds	r18, 0x00A8
     362:	22 23       	and	r18, r18
     364:	41 f0       	breq	.+16     	; 0x376 <xMBPortEventGet+0x18>
    {
        *eEvent = eQueuedEvent;
     366:	20 91 a9 00 	lds	r18, 0x00A9
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
        xEventInQueue = FALSE;
     36e:	10 92 a8 00 	sts	0x00A8, r1
        xEventHappened = TRUE;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	08 95       	ret
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
     376:	80 e0       	ldi	r24, 0x00	; 0
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
     378:	08 95       	ret

0000037a <vMBPortSerialEnable>:

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
    UCSRB |= _BV( TXEN ) | _BV(TXCIE);
     37a:	9a b1       	in	r25, 0x0a	; 10
     37c:	98 64       	ori	r25, 0x48	; 72
     37e:	9a b9       	out	0x0a, r25	; 10
#else
    UCSRB |= _BV( TXEN );
#endif

    if( xRxEnable )
     380:	88 23       	and	r24, r24
     382:	19 f0       	breq	.+6      	; 0x38a <vMBPortSerialEnable+0x10>
    {
        UCSRB |= _BV( RXEN ) | _BV( RXCIE );
     384:	8a b1       	in	r24, 0x0a	; 10
     386:	80 69       	ori	r24, 0x90	; 144
     388:	02 c0       	rjmp	.+4      	; 0x38e <vMBPortSerialEnable+0x14>
    }
    else
    {
        UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
     38a:	8a b1       	in	r24, 0x0a	; 10
     38c:	8f 76       	andi	r24, 0x6F	; 111
     38e:	8a b9       	out	0x0a, r24	; 10
    }

    if( xTxEnable )
     390:	66 23       	and	r22, r22
     392:	29 f0       	breq	.+10     	; 0x39e <vMBPortSerialEnable+0x24>
    {
        UCSRB |= _BV( TXEN ) | _BV( UDRE );
     394:	8a b1       	in	r24, 0x0a	; 10
     396:	88 62       	ori	r24, 0x28	; 40
     398:	8a b9       	out	0x0a, r24	; 10
#ifdef RTS_ENABLE
        RTS_HIGH;
     39a:	92 9a       	sbi	0x12, 2	; 18
     39c:	08 95       	ret
#endif
    }
    else
    {
        UCSRB &= ~( _BV( UDRE ) );
     39e:	55 98       	cbi	0x0a, 5	; 10
     3a0:	08 95       	ret

000003a2 <xMBPortSerialInit>:
    }
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
     3ae:	6a 01       	movw	r12, r20
     3b0:	7b 01       	movw	r14, r22
     3b2:	12 2f       	mov	r17, r18
    UCHAR ucUCSRC = 0;

    /* prevent compiler warning. */
    (void)ucPORT;
	
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	cc 0c       	add	r12, r12
     3b8:	dd 1c       	adc	r13, r13
     3ba:	ee 1c       	adc	r14, r14
     3bc:	ff 1c       	adc	r15, r15
     3be:	8a 95       	dec	r24
     3c0:	d1 f7       	brne	.-12     	; 0x3b6 <xMBPortSerialInit+0x14>
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	70 e8       	ldi	r23, 0x80	; 128
     3c6:	80 e7       	ldi	r24, 0x70	; 112
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	a7 01       	movw	r20, r14
     3cc:	96 01       	movw	r18, r12
     3ce:	f5 d6       	rcall	.+3562   	; 0x11ba <__udivmodsi4>
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	29 b9       	out	0x09, r18	; 9
     3d4:	03 30       	cpi	r16, 0x03	; 3
     3d6:	30 f4       	brcc	.+12     	; 0x3e4 <xMBPortSerialInit+0x42>
     3d8:	e0 2f       	mov	r30, r16
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	ed 59       	subi	r30, 0x9D	; 157
     3de:	ff 4f       	sbci	r31, 0xFF	; 255
     3e0:	80 81       	ld	r24, Z
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <xMBPortSerialInit+0x44>
     3e4:	80 e0       	ldi	r24, 0x00	; 0
            break;
        case MB_PAR_NONE:
            break;
    }

    switch ( ucDataBits )
     3e6:	17 30       	cpi	r17, 0x07	; 7
     3e8:	21 f0       	breq	.+8      	; 0x3f2 <xMBPortSerialInit+0x50>
     3ea:	18 30       	cpi	r17, 0x08	; 8
     3ec:	19 f4       	brne	.+6      	; 0x3f4 <xMBPortSerialInit+0x52>
    {
        case 8:
            ucUCSRC |= _BV( UCSZ0 ) | _BV( UCSZ1 );
     3ee:	86 60       	ori	r24, 0x06	; 6
            break;
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <xMBPortSerialInit+0x52>
        case 7:
            ucUCSRC |= _BV( UCSZ1 );
     3f2:	84 60       	ori	r24, 0x04	; 4
#if defined (__AVR_ATmega168__)
    UCSRC |= ucUCSRC;
#elif defined (__AVR_ATmega169__)
    UCSRC |= ucUCSRC;
#elif defined (__AVR_ATmega8__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
     3f4:	80 68       	ori	r24, 0x80	; 128
     3f6:	80 bd       	out	0x20, r24	; 32
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega128__)
    UCSRC |= ucUCSRC;
#endif

    vMBPortSerialEnable( FALSE, FALSE );
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	be df       	rcall	.-132    	; 0x37a <vMBPortSerialEnable>

#ifdef RTS_ENABLE
    RTS_INIT;
     3fe:	8a 9a       	sbi	0x11, 2	; 17
     400:	92 98       	cbi	0x12, 2	; 18
#endif
    return TRUE;
}
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	08 95       	ret

00000412 <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
    UDR = ucByte;
     412:	8c b9       	out	0x0c, r24	; 12
    return TRUE;
}
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	08 95       	ret

00000418 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
    *pucByte = UDR;
     418:	2c b1       	in	r18, 0x0c	; 12
     41a:	fc 01       	movw	r30, r24
     41c:	20 83       	st	Z, r18
    return TRUE;
}
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	08 95       	ret

00000422 <__vector_12>:

SIGNAL( SIG_USART_DATA )
{
     422:	1f 92       	push	r1
     424:	0f 92       	push	r0
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	0f 92       	push	r0
     42a:	11 24       	eor	r1, r1
     42c:	2f 93       	push	r18
     42e:	3f 93       	push	r19
     430:	4f 93       	push	r20
     432:	5f 93       	push	r21
     434:	6f 93       	push	r22
     436:	7f 93       	push	r23
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	af 93       	push	r26
     43e:	bf 93       	push	r27
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
    pxMBFrameCBTransmitterEmpty(  );
     444:	e0 91 e9 00 	lds	r30, 0x00E9
     448:	f0 91 ea 00 	lds	r31, 0x00EA
     44c:	09 95       	icall
}
     44e:	ff 91       	pop	r31
     450:	ef 91       	pop	r30
     452:	bf 91       	pop	r27
     454:	af 91       	pop	r26
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	7f 91       	pop	r23
     45c:	6f 91       	pop	r22
     45e:	5f 91       	pop	r21
     460:	4f 91       	pop	r20
     462:	3f 91       	pop	r19
     464:	2f 91       	pop	r18
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0
     46c:	1f 90       	pop	r1
     46e:	18 95       	reti

00000470 <__vector_11>:

SIGNAL( SIG_USART_RECV )
{
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	2f 93       	push	r18
     47c:	3f 93       	push	r19
     47e:	4f 93       	push	r20
     480:	5f 93       	push	r21
     482:	6f 93       	push	r22
     484:	7f 93       	push	r23
     486:	8f 93       	push	r24
     488:	9f 93       	push	r25
     48a:	af 93       	push	r26
     48c:	bf 93       	push	r27
     48e:	ef 93       	push	r30
     490:	ff 93       	push	r31
    pxMBFrameCBByteReceived(  );
     492:	e0 91 ed 00 	lds	r30, 0x00ED
     496:	f0 91 ee 00 	lds	r31, 0x00EE
     49a:	09 95       	icall
}
     49c:	ff 91       	pop	r31
     49e:	ef 91       	pop	r30
     4a0:	bf 91       	pop	r27
     4a2:	af 91       	pop	r26
     4a4:	9f 91       	pop	r25
     4a6:	8f 91       	pop	r24
     4a8:	7f 91       	pop	r23
     4aa:	6f 91       	pop	r22
     4ac:	5f 91       	pop	r21
     4ae:	4f 91       	pop	r20
     4b0:	3f 91       	pop	r19
     4b2:	2f 91       	pop	r18
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <__vector_13>:

#ifdef RTS_ENABLE
SIGNAL( SIG_UART_TRANS )
{
     4be:	1f 92       	push	r1
     4c0:	0f 92       	push	r0
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	0f 92       	push	r0
     4c6:	11 24       	eor	r1, r1
    RTS_LOW;
     4c8:	92 98       	cbi	0x12, 2	; 18
}
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
    TCNT1 = 0x0000;
     4d4:	1d bc       	out	0x2d, r1	; 45
     4d6:	1c bc       	out	0x2c, r1	; 44
    if( usTimerOCRADelta > 0 )
     4d8:	80 91 aa 00 	lds	r24, 0x00AA
     4dc:	90 91 ab 00 	lds	r25, 0x00AB
     4e0:	00 97       	sbiw	r24, 0x00	; 0
     4e2:	29 f0       	breq	.+10     	; 0x4ee <vMBPortTimersEnable+0x1a>
    {
        TIMSK1 |= _BV( OCIE1A );
     4e4:	29 b7       	in	r18, 0x39	; 57
     4e6:	20 61       	ori	r18, 0x10	; 16
     4e8:	29 bf       	out	0x39, r18	; 57
        OCR1A = usTimerOCRADelta;
     4ea:	9b bd       	out	0x2b, r25	; 43
     4ec:	8a bd       	out	0x2a, r24	; 42
    }

    TCCR1B |= _BV( CS12 ) | _BV( CS10 );
     4ee:	8e b5       	in	r24, 0x2e	; 46
     4f0:	85 60       	ori	r24, 0x05	; 5
     4f2:	8e bd       	out	0x2e, r24	; 46
}
     4f4:	08 95       	ret

000004f6 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
    /* Disable the timer. */
    TCCR1B &= ~( _BV( CS12 ) | _BV( CS10 ) );
     4f6:	8e b5       	in	r24, 0x2e	; 46
     4f8:	8a 7f       	andi	r24, 0xFA	; 250
     4fa:	8e bd       	out	0x2e, r24	; 46
    /* Disable the output compare interrupts for channel A/B. */
    TIMSK1 &= ~( _BV( OCIE1A ) );
     4fc:	89 b7       	in	r24, 0x39	; 57
     4fe:	8f 7e       	andi	r24, 0xEF	; 239
     500:	89 bf       	out	0x39, r24	; 57
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF1A ) ;
     502:	88 b7       	in	r24, 0x38	; 56
     504:	80 61       	ori	r24, 0x10	; 16
     506:	88 bf       	out	0x38, r24	; 56
}
     508:	08 95       	ret

0000050a <xMBPortTimersInit>:
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );
     50a:	bc 01       	movw	r22, r24
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	20 e2       	ldi	r18, 0x20	; 32
     512:	3c e1       	ldi	r19, 0x1C	; 28
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	31 d6       	rcall	.+3170   	; 0x117c <__mulsi3>
     51a:	20 e2       	ldi	r18, 0x20	; 32
     51c:	3e e4       	ldi	r19, 0x4E	; 78
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	4b d6       	rcall	.+3222   	; 0x11ba <__udivmodsi4>
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
     524:	30 93 ab 00 	sts	0x00AB, r19
     528:	20 93 aa 00 	sts	0x00AA, r18
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );

    TCCR1A = 0x00;
     52c:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0x00;
     52e:	1e bc       	out	0x2e, r1	; 46
    TCCR1C = 0x00;
     530:	1f bc       	out	0x2f, r1	; 47

    vMBPortTimersDisable(  );
     532:	e1 df       	rcall	.-62     	; 0x4f6 <vMBPortTimersDisable>

    return TRUE;
}
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	08 95       	ret

00000538 <__vector_6>:
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF1A ) ;
}

SIGNAL( SIG_OUTPUT_COMPARE1A )
{
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	2f 93       	push	r18
     544:	3f 93       	push	r19
     546:	4f 93       	push	r20
     548:	5f 93       	push	r21
     54a:	6f 93       	push	r22
     54c:	7f 93       	push	r23
     54e:	8f 93       	push	r24
     550:	9f 93       	push	r25
     552:	af 93       	push	r26
     554:	bf 93       	push	r27
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
    ( void )pxMBPortCBTimerExpired(  );
     55a:	e0 91 eb 00 	lds	r30, 0x00EB
     55e:	f0 91 ec 00 	lds	r31, 0x00EC
     562:	09 95       	icall
}
     564:	ff 91       	pop	r31
     566:	ef 91       	pop	r30
     568:	bf 91       	pop	r27
     56a:	af 91       	pop	r26
     56c:	9f 91       	pop	r25
     56e:	8f 91       	pop	r24
     570:	7f 91       	pop	r23
     572:	6f 91       	pop	r22
     574:	5f 91       	pop	r21
     576:	4f 91       	pop	r20
     578:	3f 91       	pop	r19
     57a:	2f 91       	pop	r18
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     586:	ef 92       	push	r14
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	98 2f       	mov	r25, r24
     58e:	86 2f       	mov	r24, r22
     590:	64 2f       	mov	r22, r20
     592:	a9 01       	movw	r20, r18
     594:	98 01       	movw	r18, r16
     596:	0e 2d       	mov	r16, r14
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
     598:	78 2f       	mov	r23, r24
     59a:	71 50       	subi	r23, 0x01	; 1
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
     59c:	77 3f       	cpi	r23, 0xF7	; 247
     59e:	08 f0       	brcs	.+2      	; 0x5a2 <eMBInit+0x1c>
     5a0:	3f c0       	rjmp	.+126    	; 0x620 <eMBInit+0x9a>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
     5a2:	80 93 ae 00 	sts	0x00AE, r24

        switch ( eMode )
     5a6:	99 23       	and	r25, r25
     5a8:	d9 f5       	brne	.+118    	; 0x620 <eMBInit+0x9a>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
     5aa:	e3 e5       	ldi	r30, 0x53	; 83
     5ac:	f4 e0       	ldi	r31, 0x04	; 4
     5ae:	f0 93 bb 00 	sts	0x00BB, r31
     5b2:	e0 93 ba 00 	sts	0x00BA, r30
            pvMBFrameStopCur = eMBRTUStop;
     5b6:	ec e5       	ldi	r30, 0x5C	; 92
     5b8:	f4 e0       	ldi	r31, 0x04	; 4
     5ba:	f0 93 b9 00 	sts	0x00B9, r31
     5be:	e0 93 b8 00 	sts	0x00B8, r30
            peMBFrameSendCur = eMBRTUSend;
     5c2:	e8 e9       	ldi	r30, 0x98	; 152
     5c4:	f4 e0       	ldi	r31, 0x04	; 4
     5c6:	f0 93 b0 00 	sts	0x00B0, r31
     5ca:	e0 93 af 00 	sts	0x00AF, r30
            peMBFrameReceiveCur = eMBRTUReceive;
     5ce:	e3 e6       	ldi	r30, 0x63	; 99
     5d0:	f4 e0       	ldi	r31, 0x04	; 4
     5d2:	f0 93 ad 00 	sts	0x00AD, r31
     5d6:	e0 93 ac 00 	sts	0x00AC, r30
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
     5da:	10 92 bd 00 	sts	0x00BD, r1
     5de:	10 92 bc 00 	sts	0x00BC, r1
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
     5e2:	e3 ee       	ldi	r30, 0xE3	; 227
     5e4:	f4 e0       	ldi	r31, 0x04	; 4
     5e6:	f0 93 ee 00 	sts	0x00EE, r31
     5ea:	e0 93 ed 00 	sts	0x00ED, r30
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
     5ee:	ea e2       	ldi	r30, 0x2A	; 42
     5f0:	f5 e0       	ldi	r31, 0x05	; 5
     5f2:	f0 93 ea 00 	sts	0x00EA, r31
     5f6:	e0 93 e9 00 	sts	0x00E9, r30
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
     5fa:	e2 e6       	ldi	r30, 0x62	; 98
     5fc:	f5 e0       	ldi	r31, 0x05	; 5
     5fe:	f0 93 ec 00 	sts	0x00EC, r31
     602:	e0 93 eb 00 	sts	0x00EB, r30

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
     606:	19 d1       	rcall	.+562    	; 0x83a <eMBRTUInit>
     608:	08 2f       	mov	r16, r24
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
     60a:	88 23       	and	r24, r24
     60c:	61 f4       	brne	.+24     	; 0x626 <eMBInit+0xa0>
        {
            if( !xMBPortEventInit(  ) )
     60e:	9c de       	rcall	.-712    	; 0x348 <xMBPortEventInit>
     610:	88 23       	and	r24, r24
     612:	41 f0       	breq	.+16     	; 0x624 <eMBInit+0x9e>
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
     614:	10 92 be 00 	sts	0x00BE, r1
                eMBState = STATE_DISABLED;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 93 66 00 	sts	0x0066, r24
     61e:	03 c0       	rjmp	.+6      	; 0x626 <eMBInit+0xa0>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
     620:	02 e0       	ldi	r16, 0x02	; 2
     622:	01 c0       	rjmp	.+2      	; 0x626 <eMBInit+0xa0>
        if( eStatus == MB_ENOERR )
        {
            if( !xMBPortEventInit(  ) )
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
     624:	03 e0       	ldi	r16, 0x03	; 3
                eMBState = STATE_DISABLED;
            }
        }
    }
    return eStatus;
}
     626:	80 2f       	mov	r24, r16
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ef 90       	pop	r14
     62e:	08 95       	ret

00000630 <eMBRegisterCB>:
eMBRegisterCB( UCHAR ucFunctionCode, pxMBFunctionHandler pxHandler )
{
    int             i;
    eMBErrorCode    eStatus;

    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
     630:	18 16       	cp	r1, r24
     632:	0c f0       	brlt	.+2      	; 0x636 <eMBRegisterCB+0x6>
     634:	41 c0       	rjmp	.+130    	; 0x6b8 <eMBRegisterCB+0x88>
    {
        ENTER_CRITICAL_SECTION(  );
     636:	f8 94       	cli
        if( pxHandler != NULL )
     638:	61 15       	cp	r22, r1
     63a:	71 05       	cpc	r23, r1
     63c:	11 f1       	breq	.+68     	; 0x682 <eMBRegisterCB+0x52>
     63e:	e8 e6       	ldi	r30, 0x68	; 104
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	30 e0       	ldi	r19, 0x00	; 0
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                if( ( xFuncHandlers[i].pxHandler == NULL ) ||
     646:	40 81       	ld	r20, Z
     648:	51 81       	ldd	r21, Z+1	; 0x01
     64a:	41 15       	cp	r20, r1
     64c:	51 05       	cpc	r21, r1
     64e:	19 f0       	breq	.+6      	; 0x656 <eMBRegisterCB+0x26>
     650:	46 17       	cp	r20, r22
     652:	57 07       	cpc	r21, r23
     654:	71 f4       	brne	.+28     	; 0x672 <eMBRegisterCB+0x42>
                    ( xFuncHandlers[i].pxHandler == pxHandler ) )
                {
                    xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
     656:	f9 01       	movw	r30, r18
     658:	ee 0f       	add	r30, r30
     65a:	ff 1f       	adc	r31, r31
     65c:	e2 0f       	add	r30, r18
     65e:	f3 1f       	adc	r31, r19
     660:	e9 59       	subi	r30, 0x99	; 153
     662:	ff 4f       	sbci	r31, 0xFF	; 255
     664:	80 83       	st	Z, r24
                    xFuncHandlers[i].pxHandler = pxHandler;
     666:	72 83       	std	Z+2, r23	; 0x02
     668:	61 83       	std	Z+1, r22	; 0x01
                    break;
                }
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
     66a:	20 31       	cpi	r18, 0x10	; 16
     66c:	31 05       	cpc	r19, r1
     66e:	09 f5       	brne	.+66     	; 0x6b2 <eMBRegisterCB+0x82>
     670:	06 c0       	rjmp	.+12     	; 0x67e <eMBRegisterCB+0x4e>
    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     672:	2f 5f       	subi	r18, 0xFF	; 255
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	33 96       	adiw	r30, 0x03	; 3
     678:	20 31       	cpi	r18, 0x10	; 16
     67a:	31 05       	cpc	r19, r1
     67c:	21 f7       	brne	.-56     	; 0x646 <eMBRegisterCB+0x16>
                    xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
                    xFuncHandlers[i].pxHandler = pxHandler;
                    break;
                }
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
     67e:	84 e0       	ldi	r24, 0x04	; 4
     680:	19 c0       	rjmp	.+50     	; 0x6b4 <eMBRegisterCB+0x84>
    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     682:	e7 e6       	ldi	r30, 0x67	; 103
     684:	f0 e0       	ldi	r31, 0x00	; 0
    eMBErrorCode    eStatus;

    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
        }
        else
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
     68a:	90 81       	ld	r25, Z
     68c:	98 17       	cp	r25, r24
     68e:	59 f4       	brne	.+22     	; 0x6a6 <eMBRegisterCB+0x76>
                {
                    xFuncHandlers[i].ucFunctionCode = 0;
     690:	f9 01       	movw	r30, r18
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	e2 0f       	add	r30, r18
     698:	f3 1f       	adc	r31, r19
     69a:	e9 59       	subi	r30, 0x99	; 153
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	10 82       	st	Z, r1
                    xFuncHandlers[i].pxHandler = NULL;
     6a0:	12 82       	std	Z+2, r1	; 0x02
     6a2:	11 82       	std	Z+1, r1	; 0x01
     6a4:	06 c0       	rjmp	.+12     	; 0x6b2 <eMBRegisterCB+0x82>
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
        }
        else
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     6a6:	2f 5f       	subi	r18, 0xFF	; 255
     6a8:	3f 4f       	sbci	r19, 0xFF	; 255
     6aa:	33 96       	adiw	r30, 0x03	; 3
     6ac:	20 31       	cpi	r18, 0x10	; 16
     6ae:	31 05       	cpc	r19, r1
     6b0:	61 f7       	brne	.-40     	; 0x68a <eMBRegisterCB+0x5a>
                    xFuncHandlers[i].pxHandler = NULL;
                    break;
                }
            }
            /* Remove can't fail. */
            eStatus = MB_ENOERR;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
        }
        EXIT_CRITICAL_SECTION(  );
     6b4:	78 94       	sei
     6b6:	08 95       	ret
    }
    else
    {
        eStatus = MB_EINVAL;
     6b8:	82 e0       	ldi	r24, 0x02	; 2
    }
    return eStatus;
}
     6ba:	08 95       	ret

000006bc <eMBClose>:
eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
     6bc:	80 91 66 00 	lds	r24, 0x0066
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	49 f4       	brne	.+18     	; 0x6d6 <eMBClose+0x1a>
    {
        if( pvMBFrameCloseCur != NULL )
     6c4:	e0 91 bc 00 	lds	r30, 0x00BC
     6c8:	f0 91 bd 00 	lds	r31, 0x00BD
     6cc:	30 97       	sbiw	r30, 0x00	; 0
     6ce:	29 f0       	breq	.+10     	; 0x6da <eMBClose+0x1e>
        {
            pvMBFrameCloseCur(  );
     6d0:	09 95       	icall


eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	08 95       	ret
            pvMBFrameCloseCur(  );
        }
    }
    else
    {
        eStatus = MB_EILLSTATE;
     6d6:	86 e0       	ldi	r24, 0x06	; 6
     6d8:	08 95       	ret


eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     6da:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
     6dc:	08 95       	ret

000006de <eMBEnable>:
eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
     6de:	80 91 66 00 	lds	r24, 0x0066
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	49 f4       	brne	.+18     	; 0x6f8 <eMBEnable+0x1a>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
     6e6:	e0 91 ba 00 	lds	r30, 0x00BA
     6ea:	f0 91 bb 00 	lds	r31, 0x00BB
     6ee:	09 95       	icall
        eMBState = STATE_ENABLED;
     6f0:	10 92 66 00 	sts	0x0066, r1
}

eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	08 95       	ret
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
     6f8:	86 e0       	ldi	r24, 0x06	; 6
    }
    return eStatus;
}
     6fa:	08 95       	ret

000006fc <eMBDisable>:
eMBErrorCode
eMBDisable( void )
{
    eMBErrorCode    eStatus;

    if( eMBState == STATE_ENABLED )
     6fc:	80 91 66 00 	lds	r24, 0x0066
     700:	88 23       	and	r24, r24
     702:	49 f4       	brne	.+18     	; 0x716 <eMBDisable+0x1a>
    {
        pvMBFrameStopCur(  );
     704:	e0 91 b8 00 	lds	r30, 0x00B8
     708:	f0 91 b9 00 	lds	r31, 0x00B9
     70c:	09 95       	icall
        eMBState = STATE_DISABLED;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 66 00 	sts	0x0066, r24
     714:	02 c0       	rjmp	.+4      	; 0x71a <eMBDisable+0x1e>
        eStatus = MB_ENOERR;
    }
    else if( eMBState == STATE_DISABLED )
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	11 f4       	brne	.+4      	; 0x71e <eMBDisable+0x22>
    {
        eStatus = MB_ENOERR;
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	08 95       	ret
    }
    else
    {
        eStatus = MB_EILLSTATE;
     71e:	86 e0       	ldi	r24, 0x06	; 6
    }
    return eStatus;
}
     720:	08 95       	ret

00000722 <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
     722:	df 93       	push	r29
     724:	cf 93       	push	r28
     726:	0f 92       	push	r0
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
     72c:	80 91 66 00 	lds	r24, 0x0066
     730:	88 23       	and	r24, r24
     732:	09 f0       	breq	.+2      	; 0x736 <eMBPoll+0x14>
     734:	7b c0       	rjmp	.+246    	; 0x82c <eMBPoll+0x10a>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
     736:	ce 01       	movw	r24, r28
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	11 de       	rcall	.-990    	; 0x35e <xMBPortEventGet>
     73c:	81 30       	cpi	r24, 0x01	; 1
     73e:	09 f0       	breq	.+2      	; 0x742 <eMBPoll+0x20>
     740:	77 c0       	rjmp	.+238    	; 0x830 <eMBPoll+0x10e>
    {
        switch ( eEvent )
     742:	99 81       	ldd	r25, Y+1	; 0x01
     744:	91 30       	cpi	r25, 0x01	; 1
     746:	21 f0       	breq	.+8      	; 0x750 <eMBPoll+0x2e>
     748:	92 30       	cpi	r25, 0x02	; 2
     74a:	09 f0       	breq	.+2      	; 0x74e <eMBPoll+0x2c>
     74c:	71 c0       	rjmp	.+226    	; 0x830 <eMBPoll+0x10e>
     74e:	1a c0       	rjmp	.+52     	; 0x784 <eMBPoll+0x62>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
     750:	e0 91 ac 00 	lds	r30, 0x00AC
     754:	f0 91 ad 00 	lds	r31, 0x00AD
     758:	85 eb       	ldi	r24, 0xB5	; 181
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	66 eb       	ldi	r22, 0xB6	; 182
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	42 eb       	ldi	r20, 0xB2	; 178
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	09 95       	icall
            if( eStatus == MB_ENOERR )
     766:	88 23       	and	r24, r24
     768:	09 f0       	breq	.+2      	; 0x76c <eMBPoll+0x4a>
     76a:	62 c0       	rjmp	.+196    	; 0x830 <eMBPoll+0x10e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
     76c:	80 91 b5 00 	lds	r24, 0x00B5
     770:	90 91 ae 00 	lds	r25, 0x00AE
     774:	89 17       	cp	r24, r25
     776:	19 f0       	breq	.+6      	; 0x77e <eMBPoll+0x5c>
     778:	88 23       	and	r24, r24
     77a:	09 f0       	breq	.+2      	; 0x77e <eMBPoll+0x5c>
     77c:	59 c0       	rjmp	.+178    	; 0x830 <eMBPoll+0x10e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	e7 dd       	rcall	.-1074   	; 0x350 <xMBPortEventPost>
     782:	56 c0       	rjmp	.+172    	; 0x830 <eMBPoll+0x10e>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
     784:	a0 91 b6 00 	lds	r26, 0x00B6
     788:	b0 91 b7 00 	lds	r27, 0x00B7
     78c:	9c 91       	ld	r25, X
     78e:	90 93 b4 00 	sts	0x00B4, r25
            eException = MB_EX_ILLEGAL_FUNCTION;
     792:	80 93 b1 00 	sts	0x00B1, r24
     796:	e7 e6       	ldi	r30, 0x67	; 103
     798:	f0 e0       	ldi	r31, 0x00	; 0
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
     79e:	80 81       	ld	r24, Z
     7a0:	88 23       	and	r24, r24
     7a2:	c9 f0       	breq	.+50     	; 0x7d6 <eMBPoll+0xb4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
     7a4:	89 17       	cp	r24, r25
     7a6:	89 f4       	brne	.+34     	; 0x7ca <eMBPoll+0xa8>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
     7a8:	f9 01       	movw	r30, r18
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	e2 0f       	add	r30, r18
     7b0:	f3 1f       	adc	r31, r19
     7b2:	e9 59       	subi	r30, 0x99	; 153
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	01 80       	ldd	r0, Z+1	; 0x01
     7b8:	f2 81       	ldd	r31, Z+2	; 0x02
     7ba:	e0 2d       	mov	r30, r0
     7bc:	cd 01       	movw	r24, r26
     7be:	62 eb       	ldi	r22, 0xB2	; 178
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	09 95       	icall
     7c4:	80 93 b1 00 	sts	0x00B1, r24
                    break;
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <eMBPoll+0xb4>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     7ca:	2f 5f       	subi	r18, 0xFF	; 255
     7cc:	3f 4f       	sbci	r19, 0xFF	; 255
     7ce:	33 96       	adiw	r30, 0x03	; 3
     7d0:	20 31       	cpi	r18, 0x10	; 16
     7d2:	31 05       	cpc	r19, r1
     7d4:	21 f7       	brne	.-56     	; 0x79e <eMBPoll+0x7c>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
     7d6:	80 91 b5 00 	lds	r24, 0x00B5
     7da:	88 23       	and	r24, r24
     7dc:	49 f1       	breq	.+82     	; 0x830 <eMBPoll+0x10e>
            {
                if( eException != MB_EX_NONE )
     7de:	90 91 b1 00 	lds	r25, 0x00B1
     7e2:	99 23       	and	r25, r25
     7e4:	99 f0       	breq	.+38     	; 0x80c <eMBPoll+0xea>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
     7e6:	e0 91 b6 00 	lds	r30, 0x00B6
     7ea:	f0 91 b7 00 	lds	r31, 0x00B7
     7ee:	80 91 b4 00 	lds	r24, 0x00B4
     7f2:	80 68       	ori	r24, 0x80	; 128
     7f4:	80 83       	st	Z, r24
                    ucMBFrame[usLength++] = eException;
     7f6:	e0 91 b6 00 	lds	r30, 0x00B6
     7fa:	f0 91 b7 00 	lds	r31, 0x00B7
     7fe:	91 83       	std	Z+1, r25	; 0x01
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	90 93 b3 00 	sts	0x00B3, r25
     808:	80 93 b2 00 	sts	0x00B2, r24
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
     80c:	60 91 b6 00 	lds	r22, 0x00B6
     810:	70 91 b7 00 	lds	r23, 0x00B7
     814:	40 91 b2 00 	lds	r20, 0x00B2
     818:	50 91 b3 00 	lds	r21, 0x00B3
     81c:	e0 91 af 00 	lds	r30, 0x00AF
     820:	f0 91 b0 00 	lds	r31, 0x00B0
     824:	80 91 ae 00 	lds	r24, 0x00AE
     828:	09 95       	icall
     82a:	02 c0       	rjmp	.+4      	; 0x830 <eMBPoll+0x10e>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
     82c:	86 e0       	ldi	r24, 0x06	; 6
     82e:	01 c0       	rjmp	.+2      	; 0x832 <eMBPoll+0x110>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
     830:	80 e0       	ldi	r24, 0x00	; 0
}
     832:	0f 90       	pop	r0
     834:	cf 91       	pop	r28
     836:	df 91       	pop	r29
     838:	08 95       	ret

0000083a <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	86 2f       	mov	r24, r22
     846:	69 01       	movw	r12, r18
     848:	7a 01       	movw	r14, r20
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
     84a:	f8 94       	cli

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
     84c:	ba 01       	movw	r22, r20
     84e:	a9 01       	movw	r20, r18
     850:	28 e0       	ldi	r18, 0x08	; 8
     852:	a7 dd       	rcall	.-1202   	; 0x3a2 <xMBPortSerialInit>
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	f9 f4       	brne	.+62     	; 0x896 <eMBRTUInit+0x5c>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	c8 16       	cp	r12, r24
     85c:	8b e4       	ldi	r24, 0x4B	; 75
     85e:	d8 06       	cpc	r13, r24
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	e8 06       	cpc	r14, r24
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	f8 06       	cpc	r15, r24
     868:	60 f4       	brcc	.+24     	; 0x882 <eMBRTUInit+0x48>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
     86a:	a7 01       	movw	r20, r14
     86c:	96 01       	movw	r18, r12
     86e:	22 0f       	add	r18, r18
     870:	33 1f       	adc	r19, r19
     872:	44 1f       	adc	r20, r20
     874:	55 1f       	adc	r21, r21
     876:	60 ea       	ldi	r22, 0xA0	; 160
     878:	7f e7       	ldi	r23, 0x7F	; 127
     87a:	87 e1       	ldi	r24, 0x17	; 23
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	9d d4       	rcall	.+2362   	; 0x11ba <__udivmodsi4>
     880:	04 c0       	rjmp	.+8      	; 0x88a <eMBRTUInit+0x50>
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
        {
            usTimerT35_50us = 35;       /* 1800us. */
     882:	23 e2       	ldi	r18, 0x23	; 35
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	50 e0       	ldi	r21, 0x00	; 0
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
     88a:	c9 01       	movw	r24, r18
     88c:	3e de       	rcall	.-900    	; 0x50a <xMBPortTimersInit>
     88e:	81 30       	cpi	r24, 0x01	; 1
     890:	11 f4       	brne	.+4      	; 0x896 <eMBRTUInit+0x5c>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	01 c0       	rjmp	.+2      	; 0x898 <eMBRTUInit+0x5e>
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
     896:	83 e0       	ldi	r24, 0x03	; 3
        }
    }
    EXIT_CRITICAL_SECTION(  );
     898:	78 94       	sei

    return eStatus;
}
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret

000008a6 <eMBRTUStart>:

void
eMBRTUStart( void )
{
    ENTER_CRITICAL_SECTION(  );
     8a6:	f8 94       	cli
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
     8a8:	10 92 bf 00 	sts	0x00BF, r1
    vMBPortSerialEnable( TRUE, FALSE );
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	64 dd       	rcall	.-1336   	; 0x37a <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
     8b2:	10 de       	rcall	.-992    	; 0x4d4 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
     8b4:	78 94       	sei
}
     8b6:	08 95       	ret

000008b8 <eMBRTUStop>:

void
eMBRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
     8b8:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	5d dd       	rcall	.-1350   	; 0x37a <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
     8c0:	1a de       	rcall	.-972    	; 0x4f6 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
     8c2:	78 94       	sei
}
     8c4:	08 95       	ret

000008c6 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	8c 01       	movw	r16, r24
     8d4:	7b 01       	movw	r14, r22
     8d6:	ea 01       	movw	r28, r20
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
     8d8:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
     8da:	80 91 c5 00 	lds	r24, 0x00C5
     8de:	90 91 c6 00 	lds	r25, 0x00C6
     8e2:	84 30       	cpi	r24, 0x04	; 4
     8e4:	91 05       	cpc	r25, r1
     8e6:	d8 f0       	brcs	.+54     	; 0x91e <eMBRTUReceive+0x58>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
     8e8:	60 91 c5 00 	lds	r22, 0x00C5
     8ec:	70 91 c6 00 	lds	r23, 0x00C6
     8f0:	83 ef       	ldi	r24, 0xF3	; 243
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0b dd       	rcall	.-1514   	; 0x30c <usMBCRC16>
     8f6:	00 97       	sbiw	r24, 0x00	; 0
     8f8:	91 f4       	brne	.+36     	; 0x91e <eMBRTUReceive+0x58>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
     8fa:	80 91 f3 00 	lds	r24, 0x00F3
     8fe:	f8 01       	movw	r30, r16
     900:	80 83       	st	Z, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
     902:	80 91 c5 00 	lds	r24, 0x00C5
     906:	90 91 c6 00 	lds	r25, 0x00C6
     90a:	03 97       	sbiw	r24, 0x03	; 3
     90c:	99 83       	std	Y+1, r25	; 0x01
     90e:	88 83       	st	Y, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
     910:	84 ef       	ldi	r24, 0xF4	; 244
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	f7 01       	movw	r30, r14
     916:	91 83       	std	Z+1, r25	; 0x01
     918:	80 83       	st	Z, r24

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;
     91a:	80 e0       	ldi	r24, 0x00	; 0
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
     91c:	01 c0       	rjmp	.+2      	; 0x920 <eMBRTUReceive+0x5a>
    }
    else
    {
        eStatus = MB_EIO;
     91e:	85 e0       	ldi	r24, 0x05	; 5
    }

    EXIT_CRITICAL_SECTION(  );
     920:	78 94       	sei
    return eStatus;
}
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	08 95       	ret

00000930 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
     930:	1f 93       	push	r17
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
     932:	f8 94       	cli

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
     934:	10 91 bf 00 	lds	r17, 0x00BF
     938:	11 30       	cpi	r17, 0x01	; 1
     93a:	09 f0       	breq	.+2      	; 0x93e <eMBRTUSend+0xe>
     93c:	40 c0       	rjmp	.+128    	; 0x9be <eMBRTUSend+0x8e>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
     93e:	fb 01       	movw	r30, r22
     940:	31 97       	sbiw	r30, 0x01	; 1
     942:	f0 93 c4 00 	sts	0x00C4, r31
     946:	e0 93 c3 00 	sts	0x00C3, r30
        usSndBufferCount = 1;
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	30 93 c2 00 	sts	0x00C2, r19
     952:	20 93 c1 00 	sts	0x00C1, r18

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
     956:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
     958:	80 91 c1 00 	lds	r24, 0x00C1
     95c:	90 91 c2 00 	lds	r25, 0x00C2
     960:	84 0f       	add	r24, r20
     962:	95 1f       	adc	r25, r21
     964:	90 93 c2 00 	sts	0x00C2, r25
     968:	80 93 c1 00 	sts	0x00C1, r24

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
     96c:	60 91 c1 00 	lds	r22, 0x00C1
     970:	70 91 c2 00 	lds	r23, 0x00C2
     974:	cf 01       	movw	r24, r30
     976:	ca dc       	rcall	.-1644   	; 0x30c <usMBCRC16>
     978:	49 2f       	mov	r20, r25
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
     97a:	20 91 c1 00 	lds	r18, 0x00C1
     97e:	30 91 c2 00 	lds	r19, 0x00C2
     982:	f9 01       	movw	r30, r18
     984:	ed 50       	subi	r30, 0x0D	; 13
     986:	ff 4f       	sbci	r31, 0xFF	; 255
     988:	80 83       	st	Z, r24
     98a:	2f 5f       	subi	r18, 0xFF	; 255
     98c:	3f 4f       	sbci	r19, 0xFF	; 255
     98e:	30 93 c2 00 	sts	0x00C2, r19
     992:	20 93 c1 00 	sts	0x00C1, r18
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
     996:	80 91 c1 00 	lds	r24, 0x00C1
     99a:	90 91 c2 00 	lds	r25, 0x00C2
     99e:	fc 01       	movw	r30, r24
     9a0:	ed 50       	subi	r30, 0x0D	; 13
     9a2:	ff 4f       	sbci	r31, 0xFF	; 255
     9a4:	40 83       	st	Z, r20
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	90 93 c2 00 	sts	0x00C2, r25
     9ac:	80 93 c1 00 	sts	0x00C1, r24

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
     9b0:	10 93 c0 00 	sts	0x00C0, r17
        vMBPortSerialEnable( FALSE, TRUE );
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	e0 dc       	rcall	.-1600   	; 0x37a <vMBPortSerialEnable>
}

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <eMBRTUSend+0x90>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
     9be:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     9c0:	78 94       	sei
    return eStatus;
}
     9c2:	1f 91       	pop	r17
     9c4:	08 95       	ret

000009c6 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	0f 92       	push	r0
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
     9d0:	ce 01       	movw	r24, r28
     9d2:	01 96       	adiw	r24, 0x01	; 1
     9d4:	21 dd       	rcall	.-1470   	; 0x418 <xMBPortSerialGetByte>

    switch ( eRcvState )
     9d6:	80 91 bf 00 	lds	r24, 0x00BF
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	39 f0       	breq	.+14     	; 0x9ec <xMBRTUReceiveFSM+0x26>
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	98 f1       	brcs	.+102    	; 0xa48 <xMBRTUReceiveFSM+0x82>
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	b9 f0       	breq	.+46     	; 0xa14 <xMBRTUReceiveFSM+0x4e>
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	81 f5       	brne	.+96     	; 0xa4a <xMBRTUReceiveFSM+0x84>
     9ea:	2e c0       	rjmp	.+92     	; 0xa48 <xMBRTUReceiveFSM+0x82>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
     9ec:	10 92 c6 00 	sts	0x00C6, r1
     9f0:	10 92 c5 00 	sts	0x00C5, r1
        ucRTUBuf[usRcvBufferPos++] = ucByte;
     9f4:	80 91 c5 00 	lds	r24, 0x00C5
     9f8:	90 91 c6 00 	lds	r25, 0x00C6
     9fc:	29 81       	ldd	r18, Y+1	; 0x01
     9fe:	fc 01       	movw	r30, r24
     a00:	ed 50       	subi	r30, 0x0D	; 13
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	20 83       	st	Z, r18
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	90 93 c6 00 	sts	0x00C6, r25
     a0c:	80 93 c5 00 	sts	0x00C5, r24
        eRcvState = STATE_RX_RCV;
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	18 c0       	rjmp	.+48     	; 0xa44 <xMBRTUReceiveFSM+0x7e>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
     a14:	80 91 c5 00 	lds	r24, 0x00C5
     a18:	90 91 c6 00 	lds	r25, 0x00C6
     a1c:	8f 3f       	cpi	r24, 0xFF	; 255
     a1e:	91 05       	cpc	r25, r1
     a20:	09 f0       	breq	.+2      	; 0xa24 <xMBRTUReceiveFSM+0x5e>
     a22:	78 f4       	brcc	.+30     	; 0xa42 <xMBRTUReceiveFSM+0x7c>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
     a24:	80 91 c5 00 	lds	r24, 0x00C5
     a28:	90 91 c6 00 	lds	r25, 0x00C6
     a2c:	29 81       	ldd	r18, Y+1	; 0x01
     a2e:	fc 01       	movw	r30, r24
     a30:	ed 50       	subi	r30, 0x0D	; 13
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	20 83       	st	Z, r18
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	90 93 c6 00 	sts	0x00C6, r25
     a3c:	80 93 c5 00 	sts	0x00C5, r24
     a40:	03 c0       	rjmp	.+6      	; 0xa48 <xMBRTUReceiveFSM+0x82>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	80 93 bf 00 	sts	0x00BF, r24
        }
        vMBPortTimersEnable(  );
     a48:	45 dd       	rcall	.-1398   	; 0x4d4 <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0f 90       	pop	r0
     a4e:	cf 91       	pop	r28
     a50:	df 91       	pop	r29
     a52:	08 95       	ret

00000a54 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
     a54:	1f 93       	push	r17
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
     a56:	80 91 c0 00 	lds	r24, 0x00C0
     a5a:	88 23       	and	r24, r24
     a5c:	19 f0       	breq	.+6      	; 0xa64 <xMBRTUTransmitFSM+0x10>
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	69 f5       	brne	.+90     	; 0xabc <xMBRTUTransmitFSM+0x68>
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <xMBRTUTransmitFSM+0x18>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	88 dc       	rcall	.-1776   	; 0x37a <vMBPortSerialEnable>
     a6a:	28 c0       	rjmp	.+80     	; 0xabc <xMBRTUTransmitFSM+0x68>
        break;

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
     a6c:	80 91 c1 00 	lds	r24, 0x00C1
     a70:	90 91 c2 00 	lds	r25, 0x00C2
     a74:	00 97       	sbiw	r24, 0x00	; 0
     a76:	c9 f0       	breq	.+50     	; 0xaaa <xMBRTUTransmitFSM+0x56>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
     a78:	e0 91 c3 00 	lds	r30, 0x00C3
     a7c:	f0 91 c4 00 	lds	r31, 0x00C4
     a80:	80 81       	ld	r24, Z
     a82:	c7 dc       	rcall	.-1650   	; 0x412 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
     a84:	80 91 c3 00 	lds	r24, 0x00C3
     a88:	90 91 c4 00 	lds	r25, 0x00C4
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	90 93 c4 00 	sts	0x00C4, r25
     a92:	80 93 c3 00 	sts	0x00C3, r24
            usSndBufferCount--;
     a96:	80 91 c1 00 	lds	r24, 0x00C1
     a9a:	90 91 c2 00 	lds	r25, 0x00C2
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	90 93 c2 00 	sts	0x00C2, r25
     aa4:	80 93 c1 00 	sts	0x00C1, r24
     aa8:	09 c0       	rjmp	.+18     	; 0xabc <xMBRTUTransmitFSM+0x68>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
     aaa:	83 e0       	ldi	r24, 0x03	; 3
     aac:	51 dc       	rcall	.-1886   	; 0x350 <xMBPortEventPost>
     aae:	18 2f       	mov	r17, r24
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	62 dc       	rcall	.-1852   	; 0x37a <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
     ab6:	10 92 c0 00 	sts	0x00C0, r1
     aba:	01 c0       	rjmp	.+2      	; 0xabe <xMBRTUTransmitFSM+0x6a>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     abc:	10 e0       	ldi	r17, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
     abe:	81 2f       	mov	r24, r17
     ac0:	1f 91       	pop	r17
     ac2:	08 95       	ret

00000ac4 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
     ac4:	df 93       	push	r29
     ac6:	cf 93       	push	r28
     ac8:	0f 92       	push	r0
     aca:	cd b7       	in	r28, 0x3d	; 61
     acc:	de b7       	in	r29, 0x3e	; 62
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
     ace:	80 91 bf 00 	lds	r24, 0x00BF
     ad2:	88 23       	and	r24, r24
     ad4:	19 f0       	breq	.+6      	; 0xadc <xMBRTUTimerT35Expired+0x18>
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	31 f4       	brne	.+12     	; 0xae6 <xMBRTUTimerT35Expired+0x22>
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <xMBRTUTimerT35Expired+0x1c>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <xMBRTUTimerT35Expired+0x1e>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	36 dc       	rcall	.-1940   	; 0x350 <xMBPortEventPost>
        break;
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <xMBRTUTimerT35Expired+0x24>
}

BOOL
xMBRTUTimerT35Expired( void )
{
    BOOL            xNeedPoll = FALSE;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	05 dd       	rcall	.-1526   	; 0x4f6 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	90 93 bf 00 	sts	0x00BF, r25

    return xNeedPoll;
}
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	0f 90       	pop	r0
     af6:	cf 91       	pop	r28
     af8:	df 91       	pop	r29
     afa:	08 95       	ret

00000afc <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	fc 01       	movw	r30, r24
     b06:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     b08:	88 81       	ld	r24, Y
     b0a:	99 81       	ldd	r25, Y+1	; 0x01
     b0c:	85 30       	cpi	r24, 0x05	; 5
     b0e:	91 05       	cpc	r25, r1
     b10:	d9 f5       	brne	.+118    	; 0xb88 <eMBFuncReadInputRegister+0x8c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     b12:	cf 01       	movw	r24, r30
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	41 81       	ldd	r20, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     b18:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
     b1a:	33 81       	ldd	r19, Z+3	; 0x03
     b1c:	20 e0       	ldi	r18, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     b1e:	04 81       	ldd	r16, Z+4	; 0x04
     b20:	10 e0       	ldi	r17, 0x00	; 0
     b22:	02 2b       	or	r16, r18
     b24:	13 2b       	or	r17, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
     b26:	98 01       	movw	r18, r16
     b28:	21 50       	subi	r18, 0x01	; 1
     b2a:	30 40       	sbci	r19, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
     b2c:	2c 37       	cpi	r18, 0x7C	; 124
     b2e:	31 05       	cpc	r19, r1
     b30:	58 f5       	brcc	.+86     	; 0xb88 <eMBFuncReadInputRegister+0x8c>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     b32:	19 82       	std	Y+1, r1	; 0x01
     b34:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
     b36:	24 e0       	ldi	r18, 0x04	; 4
     b38:	20 83       	st	Z, r18
            *usLen += 1;
     b3a:	28 81       	ld	r18, Y
     b3c:	39 81       	ldd	r19, Y+1	; 0x01
     b3e:	2f 5f       	subi	r18, 0xFF	; 255
     b40:	3f 4f       	sbci	r19, 0xFF	; 255
     b42:	39 83       	std	Y+1, r19	; 0x01
     b44:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
     b46:	20 2f       	mov	r18, r16
     b48:	22 0f       	add	r18, r18
     b4a:	21 83       	std	Z+1, r18	; 0x01
            *usLen += 1;
     b4c:	28 81       	ld	r18, Y
     b4e:	39 81       	ldd	r19, Y+1	; 0x01
     b50:	2f 5f       	subi	r18, 0xFF	; 255
     b52:	3f 4f       	sbci	r19, 0xFF	; 255
     b54:	39 83       	std	Y+1, r19	; 0x01
     b56:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     b58:	34 2f       	mov	r19, r20
     b5a:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	62 2b       	or	r22, r18
     b60:	73 2b       	or	r23, r19
        usRegAddress++;
     b62:	6f 5f       	subi	r22, 0xFF	; 255
     b64:	7f 4f       	sbci	r23, 0xFF	; 255

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
     b66:	01 96       	adiw	r24, 0x01	; 1
     b68:	a8 01       	movw	r20, r16
     b6a:	a8 db       	rcall	.-2224   	; 0x2bc <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     b6c:	88 23       	and	r24, r24
     b6e:	11 f0       	breq	.+4      	; 0xb74 <eMBFuncReadInputRegister+0x78>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     b70:	8d d1       	rcall	.+794    	; 0xe8c <prveMBError2Exception>
     b72:	0b c0       	rjmp	.+22     	; 0xb8a <eMBFuncReadInputRegister+0x8e>
            }
            else
            {
                *usLen += usRegCount * 2;
     b74:	00 0f       	add	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	88 81       	ld	r24, Y
     b7a:	99 81       	ldd	r25, Y+1	; 0x01
     b7c:	80 0f       	add	r24, r16
     b7e:	91 1f       	adc	r25, r17
     b80:	99 83       	std	Y+1, r25	; 0x01
     b82:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <eMBFuncReadInputRegister+0x8e>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     b88:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	0f 91       	pop	r16
     b92:	08 95       	ret

00000b94 <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     b94:	fb 01       	movw	r30, r22
     b96:	20 81       	ld	r18, Z
     b98:	31 81       	ldd	r19, Z+1	; 0x01
     b9a:	25 30       	cpi	r18, 0x05	; 5
     b9c:	31 05       	cpc	r19, r1
     b9e:	91 f4       	brne	.+36     	; 0xbc4 <eMBFuncWriteHoldingRegister+0x30>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     ba0:	fc 01       	movw	r30, r24
     ba2:	31 81       	ldd	r19, Z+1	; 0x01
     ba4:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     ba6:	62 81       	ldd	r22, Z+2	; 0x02
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	62 2b       	or	r22, r18
     bac:	73 2b       	or	r23, r19
        usRegAddress++;
     bae:	6f 5f       	subi	r22, 0xFF	; 255
     bb0:	7f 4f       	sbci	r23, 0xFF	; 255

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
     bb2:	03 96       	adiw	r24, 0x03	; 3
     bb4:	41 e0       	ldi	r20, 0x01	; 1
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	21 e0       	ldi	r18, 0x01	; 1
     bba:	91 db       	rcall	.-2270   	; 0x2de <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
     bbc:	88 23       	and	r24, r24
     bbe:	21 f0       	breq	.+8      	; 0xbc8 <eMBFuncWriteHoldingRegister+0x34>
        {
            eStatus = prveMBError2Exception( eRegStatus );
     bc0:	65 d1       	rcall	.+714    	; 0xe8c <prveMBError2Exception>
     bc2:	08 95       	ret
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	08 95       	ret

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     bca:	08 95       	ret

00000bcc <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	fc 01       	movw	r30, r24
     bd2:	eb 01       	movw	r28, r22
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
     bd4:	88 81       	ld	r24, Y
     bd6:	99 81       	ldd	r25, Y+1	; 0x01
     bd8:	86 30       	cpi	r24, 0x06	; 6
     bda:	91 05       	cpc	r25, r1
     bdc:	38 f1       	brcs	.+78     	; 0xc2c <eMBFuncWriteMultipleHoldingRegister+0x60>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     bde:	21 81       	ldd	r18, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     be0:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	80 e0       	ldi	r24, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
     be6:	44 81       	ldd	r20, Z+4	; 0x04
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	48 2b       	or	r20, r24
     bec:	59 2b       	or	r21, r25

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
     bee:	35 81       	ldd	r19, Z+5	; 0x05

        if( ( usRegCount >= 1 ) &&
     bf0:	ca 01       	movw	r24, r20
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	88 37       	cpi	r24, 0x78	; 120
     bf6:	91 05       	cpc	r25, r1
     bf8:	c8 f4       	brcc	.+50     	; 0xc2c <eMBFuncWriteMultipleHoldingRegister+0x60>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
     bfa:	84 2f       	mov	r24, r20
     bfc:	88 0f       	add	r24, r24
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
     bfe:	38 17       	cp	r19, r24
     c00:	a9 f4       	brne	.+42     	; 0xc2c <eMBFuncWriteMultipleHoldingRegister+0x60>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     c02:	92 2f       	mov	r25, r18
     c04:	80 e0       	ldi	r24, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	68 2b       	or	r22, r24
     c0a:	79 2b       	or	r23, r25
        usRegAddress++;
     c0c:	6f 5f       	subi	r22, 0xFF	; 255
     c0e:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
     c10:	cf 01       	movw	r24, r30
     c12:	06 96       	adiw	r24, 0x06	; 6
     c14:	21 e0       	ldi	r18, 0x01	; 1
     c16:	63 db       	rcall	.-2362   	; 0x2de <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     c18:	88 23       	and	r24, r24
     c1a:	11 f0       	breq	.+4      	; 0xc20 <eMBFuncWriteMultipleHoldingRegister+0x54>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     c1c:	37 d1       	rcall	.+622    	; 0xe8c <prveMBError2Exception>
     c1e:	07 c0       	rjmp	.+14     	; 0xc2e <eMBFuncWriteMultipleHoldingRegister+0x62>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
     c20:	85 e0       	ldi	r24, 0x05	; 5
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	99 83       	std	Y+1, r25	; 0x01
     c26:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <eMBFuncWriteMultipleHoldingRegister+0x62>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     c2c:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	08 95       	ret

00000c34 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     c34:	0f 93       	push	r16
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	fc 01       	movw	r30, r24
     c3e:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     c40:	88 81       	ld	r24, Y
     c42:	99 81       	ldd	r25, Y+1	; 0x01
     c44:	85 30       	cpi	r24, 0x05	; 5
     c46:	91 05       	cpc	r25, r1
     c48:	b9 f5       	brne	.+110    	; 0xcb8 <eMBFuncReadHoldingRegister+0x84>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     c4a:	cf 01       	movw	r24, r30
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	51 81       	ldd	r21, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     c50:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     c52:	44 81       	ldd	r20, Z+4	; 0x04
     c54:	04 2f       	mov	r16, r20
     c56:	10 e0       	ldi	r17, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
     c58:	98 01       	movw	r18, r16
     c5a:	21 50       	subi	r18, 0x01	; 1
     c5c:	30 40       	sbci	r19, 0x00	; 0
     c5e:	2d 37       	cpi	r18, 0x7D	; 125
     c60:	31 05       	cpc	r19, r1
     c62:	50 f5       	brcc	.+84     	; 0xcb8 <eMBFuncReadHoldingRegister+0x84>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     c64:	19 82       	std	Y+1, r1	; 0x01
     c66:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
     c68:	23 e0       	ldi	r18, 0x03	; 3
     c6a:	20 83       	st	Z, r18
            *usLen += 1;
     c6c:	28 81       	ld	r18, Y
     c6e:	39 81       	ldd	r19, Y+1	; 0x01
     c70:	2f 5f       	subi	r18, 0xFF	; 255
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	39 83       	std	Y+1, r19	; 0x01
     c76:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
     c78:	44 0f       	add	r20, r20
     c7a:	41 83       	std	Z+1, r20	; 0x01
            *usLen += 1;
     c7c:	28 81       	ld	r18, Y
     c7e:	39 81       	ldd	r19, Y+1	; 0x01
     c80:	2f 5f       	subi	r18, 0xFF	; 255
     c82:	3f 4f       	sbci	r19, 0xFF	; 255
     c84:	39 83       	std	Y+1, r19	; 0x01
     c86:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     c88:	35 2f       	mov	r19, r21
     c8a:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	62 2b       	or	r22, r18
     c90:	73 2b       	or	r23, r19
        usRegAddress++;
     c92:	6f 5f       	subi	r22, 0xFF	; 255
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	a8 01       	movw	r20, r16
     c9a:	21 db       	rcall	.-2494   	; 0x2de <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     c9c:	88 23       	and	r24, r24
     c9e:	11 f0       	breq	.+4      	; 0xca4 <eMBFuncReadHoldingRegister+0x70>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     ca0:	f5 d0       	rcall	.+490    	; 0xe8c <prveMBError2Exception>
     ca2:	0b c0       	rjmp	.+22     	; 0xcba <eMBFuncReadHoldingRegister+0x86>
            }
            else
            {
                *usLen += usRegCount * 2;
     ca4:	00 0f       	add	r16, r16
     ca6:	11 1f       	adc	r17, r17
     ca8:	88 81       	ld	r24, Y
     caa:	99 81       	ldd	r25, Y+1	; 0x01
     cac:	80 0f       	add	r24, r16
     cae:	91 1f       	adc	r25, r17
     cb0:	99 83       	std	Y+1, r25	; 0x01
     cb2:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <eMBFuncReadHoldingRegister+0x86>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     cb8:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	08 95       	ret

00000cc4 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     cc4:	af 92       	push	r10
     cc6:	bf 92       	push	r11
     cc8:	cf 92       	push	r12
     cca:	df 92       	push	r13
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	ec 01       	movw	r28, r24
     cda:	8b 01       	movw	r16, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
     cdc:	fb 01       	movw	r30, r22
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	8a 30       	cpi	r24, 0x0A	; 10
     ce4:	91 05       	cpc	r25, r1
     ce6:	08 f4       	brcc	.+2      	; 0xcea <eMBFuncReadWriteMultipleHoldingRegister+0x26>
     ce8:	66 c0       	rjmp	.+204    	; 0xdb6 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
     cea:	6e 01       	movw	r12, r28
     cec:	08 94       	sec
     cee:	c1 1c       	adc	r12, r1
     cf0:	d1 1c       	adc	r13, r1
     cf2:	b9 80       	ldd	r11, Y+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
     cf4:	aa 80       	ldd	r10, Y+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
     cfa:	ec 80       	ldd	r14, Y+4	; 0x04
     cfc:	ff 24       	eor	r15, r15
     cfe:	e8 2a       	or	r14, r24
     d00:	f9 2a       	or	r15, r25

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
     d02:	7d 81       	ldd	r23, Y+5	; 0x05
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
     d04:	6e 81       	ldd	r22, Y+6	; 0x06
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
     d06:	9f 81       	ldd	r25, Y+7	; 0x07
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
     d08:	48 85       	ldd	r20, Y+8	; 0x08

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
     d0a:	89 85       	ldd	r24, Y+9	; 0x09

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
     d0c:	97 01       	movw	r18, r14
     d0e:	21 50       	subi	r18, 0x01	; 1
     d10:	30 40       	sbci	r19, 0x00	; 0
     d12:	2d 37       	cpi	r18, 0x7D	; 125
     d14:	31 05       	cpc	r19, r1
     d16:	08 f0       	brcs	.+2      	; 0xd1a <eMBFuncReadWriteMultipleHoldingRegister+0x56>
     d18:	50 c0       	rjmp	.+160    	; 0xdba <eMBFuncReadWriteMultipleHoldingRegister+0xf6>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
     d1a:	39 2f       	mov	r19, r25
     d1c:	20 e0       	ldi	r18, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	42 2b       	or	r20, r18
     d22:	53 2b       	or	r21, r19

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
     d24:	41 15       	cp	r20, r1
     d26:	51 05       	cpc	r21, r1
     d28:	09 f4       	brne	.+2      	; 0xd2c <eMBFuncReadWriteMultipleHoldingRegister+0x68>
     d2a:	47 c0       	rjmp	.+142    	; 0xdba <eMBFuncReadWriteMultipleHoldingRegister+0xf6>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
     d2c:	4a 37       	cpi	r20, 0x7A	; 122
     d2e:	51 05       	cpc	r21, r1
     d30:	08 f0       	brcs	.+2      	; 0xd34 <eMBFuncReadWriteMultipleHoldingRegister+0x70>
     d32:	43 c0       	rjmp	.+134    	; 0xdba <eMBFuncReadWriteMultipleHoldingRegister+0xf6>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
     d34:	9a 01       	movw	r18, r20
     d36:	22 0f       	add	r18, r18
     d38:	33 1f       	adc	r19, r19
     d3a:	90 e0       	ldi	r25, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
     d3c:	28 17       	cp	r18, r24
     d3e:	39 07       	cpc	r19, r25
     d40:	e1 f5       	brne	.+120    	; 0xdba <eMBFuncReadWriteMultipleHoldingRegister+0xf6>
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
     d42:	97 2f       	mov	r25, r23
     d44:	80 e0       	ldi	r24, 0x00	; 0
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	68 2b       	or	r22, r24
     d4a:	79 2b       	or	r23, r25
        usRegWriteAddress++;
     d4c:	6f 5f       	subi	r22, 0xFF	; 255
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
     d50:	ce 01       	movw	r24, r28
     d52:	0a 96       	adiw	r24, 0x0a	; 10
     d54:	21 e0       	ldi	r18, 0x01	; 1
     d56:	c3 da       	rcall	.-2682   	; 0x2de <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
     d58:	88 23       	and	r24, r24
     d5a:	59 f5       	brne	.+86     	; 0xdb2 <eMBFuncReadWriteMultipleHoldingRegister+0xee>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
     d5c:	f8 01       	movw	r30, r16
     d5e:	11 82       	std	Z+1, r1	; 0x01
     d60:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
     d62:	87 e1       	ldi	r24, 0x17	; 23
     d64:	88 83       	st	Y, r24
                *usLen += 1;
     d66:	80 81       	ld	r24, Z
     d68:	91 81       	ldd	r25, Z+1	; 0x01
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	91 83       	std	Z+1, r25	; 0x01
     d6e:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
     d70:	8e 2d       	mov	r24, r14
     d72:	88 0f       	add	r24, r24
     d74:	89 83       	std	Y+1, r24	; 0x01
                *usLen += 1;
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
     d80:	9b 2d       	mov	r25, r11
     d82:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
     d84:	6a 2d       	mov	r22, r10
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	68 2b       	or	r22, r24
     d8a:	79 2b       	or	r23, r25
        usRegReadAddress++;
     d8c:	6f 5f       	subi	r22, 0xFF	; 255
     d8e:	7f 4f       	sbci	r23, 0xFF	; 255
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
     d90:	c6 01       	movw	r24, r12
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	a7 01       	movw	r20, r14
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	a2 da       	rcall	.-2748   	; 0x2de <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
     d9a:	88 23       	and	r24, r24
     d9c:	51 f4       	brne	.+20     	; 0xdb2 <eMBFuncReadWriteMultipleHoldingRegister+0xee>
                {
                    *usLen += 2 * usRegReadCount;
     d9e:	ee 0c       	add	r14, r14
     da0:	ff 1c       	adc	r15, r15
     da2:	f8 01       	movw	r30, r16
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	8e 0d       	add	r24, r14
     daa:	9f 1d       	adc	r25, r15
     dac:	91 83       	std	Z+1, r25	; 0x01
     dae:	80 83       	st	Z, r24
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <eMBFuncReadWriteMultipleHoldingRegister+0xf2>
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
     db2:	6c d0       	rcall	.+216    	; 0xe8c <prveMBError2Exception>
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <eMBFuncReadWriteMultipleHoldingRegister+0xf8>
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <eMBFuncReadWriteMultipleHoldingRegister+0xf8>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     dba:	83 e0       	ldi	r24, 0x03	; 3
        }
    }
    return eStatus;
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	ff 90       	pop	r15
     dc6:	ef 90       	pop	r14
     dc8:	df 90       	pop	r13
     dca:	cf 90       	pop	r12
     dcc:	bf 90       	pop	r11
     dce:	af 90       	pop	r10
     dd0:	08 95       	ret

00000dd2 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
     dd6:	30 e0       	ldi	r19, 0x00	; 0
    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
     dd8:	eb 01       	movw	r28, r22
     dda:	53 e0       	ldi	r21, 0x03	; 3
     ddc:	d6 95       	lsr	r29
     dde:	c7 95       	ror	r28
     de0:	5a 95       	dec	r21
     de2:	e1 f7       	brne	.-8      	; 0xddc <xMBUtilSetBits+0xa>
     de4:	67 70       	andi	r22, 0x07	; 7
     de6:	70 70       	andi	r23, 0x00	; 0

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
     de8:	e1 e0       	ldi	r30, 0x01	; 1
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <xMBUtilSetBits+0x20>
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	4a 95       	dec	r20
     df4:	e2 f7       	brpl	.-8      	; 0xdee <xMBUtilSetBits+0x1c>
     df6:	31 97       	sbiw	r30, 0x01	; 1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
     df8:	dc 01       	movw	r26, r24
     dfa:	ac 0f       	add	r26, r28
     dfc:	bd 1f       	adc	r27, r29
     dfe:	4c 91       	ld	r20, X
     e00:	50 e0       	ldi	r21, 0x00	; 0
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
     e02:	21 96       	adiw	r28, 0x01	; 1
     e04:	c8 0f       	add	r28, r24
     e06:	d9 1f       	adc	r29, r25
     e08:	98 81       	ld	r25, Y
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	48 2b       	or	r20, r24
     e0e:	59 2b       	or	r21, r25
    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
     e10:	06 2e       	mov	r0, r22
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <xMBUtilSetBits+0x46>
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <xMBUtilSetBits+0x42>
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
     e1c:	e0 95       	com	r30
     e1e:	f0 95       	com	r31
     e20:	4e 23       	and	r20, r30
     e22:	5f 23       	and	r21, r31

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <xMBUtilSetBits+0x58>
     e26:	22 0f       	add	r18, r18
     e28:	33 1f       	adc	r19, r19
     e2a:	6a 95       	dec	r22
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <xMBUtilSetBits+0x54>
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
     e2e:	42 2b       	or	r20, r18
     e30:	53 2b       	or	r21, r19

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
     e32:	4c 93       	st	X, r20
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
     e34:	58 83       	st	Y, r21
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
     e3c:	9b 01       	movw	r18, r22
     e3e:	f3 e0       	ldi	r31, 0x03	; 3
     e40:	36 95       	lsr	r19
     e42:	27 95       	ror	r18
     e44:	fa 95       	dec	r31
     e46:	e1 f7       	brne	.-8      	; 0xe40 <xMBUtilGetBits+0x4>

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
     e48:	dc 01       	movw	r26, r24
     e4a:	a2 0f       	add	r26, r18
     e4c:	b3 1f       	adc	r27, r19
     e4e:	8c 91       	ld	r24, X
     e50:	90 e0       	ldi	r25, 0x00	; 0
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	fc 91       	ld	r31, X
     e56:	11 97       	sbiw	r26, 0x01	; 1
     e58:	e0 e0       	ldi	r30, 0x00	; 0
     e5a:	8e 2b       	or	r24, r30
     e5c:	9f 2b       	or	r25, r31
    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
     e5e:	e3 e0       	ldi	r30, 0x03	; 3
     e60:	22 0f       	add	r18, r18
     e62:	33 1f       	adc	r19, r19
     e64:	ea 95       	dec	r30
     e66:	e1 f7       	brne	.-8      	; 0xe60 <xMBUtilGetBits+0x24>
     e68:	62 1b       	sub	r22, r18
     e6a:	73 0b       	sbc	r23, r19
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <xMBUtilGetBits+0x36>
     e6e:	96 95       	lsr	r25
     e70:	87 95       	ror	r24
     e72:	6a 95       	dec	r22
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <xMBUtilGetBits+0x32>

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
     e76:	21 e0       	ldi	r18, 0x01	; 1
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <xMBUtilGetBits+0x44>
     e7c:	22 0f       	add	r18, r18
     e7e:	33 1f       	adc	r19, r19
     e80:	4a 95       	dec	r20
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <xMBUtilGetBits+0x40>
     e84:	21 50       	subi	r18, 0x01	; 1
     e86:	30 40       	sbci	r19, 0x00	; 0

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;

    return ( UCHAR ) usWordBuf;
}
     e88:	82 23       	and	r24, r18
     e8a:	08 95       	ret

00000e8c <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
     e8c:	88 30       	cpi	r24, 0x08	; 8
     e8e:	30 f4       	brcc	.+12     	; 0xe9c <prveMBError2Exception+0x10>
     e90:	e8 2f       	mov	r30, r24
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	e9 56       	subi	r30, 0x69	; 105
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	80 81       	ld	r24, Z
     e9a:	08 95       	ret
     e9c:	84 e0       	ldi	r24, 0x04	; 4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
     e9e:	08 95       	ret

00000ea0 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	fc 01       	movw	r30, r24
     ea8:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     eaa:	88 81       	ld	r24, Y
     eac:	99 81       	ldd	r25, Y+1	; 0x01
     eae:	85 30       	cpi	r24, 0x05	; 5
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <eMBFuncReadCoils+0x16>
     eb4:	46 c0       	rjmp	.+140    	; 0xf42 <eMBFuncReadCoils+0xa2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     eb6:	cf 01       	movw	r24, r30
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	71 81       	ldd	r23, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     ebc:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
     ebe:	33 81       	ldd	r19, Z+3	; 0x03
     ec0:	20 e0       	ldi	r18, 0x00	; 0
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
     ec2:	44 81       	ldd	r20, Z+4	; 0x04
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	42 2b       	or	r20, r18
     ec8:	53 2b       	or	r21, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
     eca:	9a 01       	movw	r18, r20
     ecc:	21 50       	subi	r18, 0x01	; 1
     ece:	30 40       	sbci	r19, 0x00	; 0
     ed0:	a7 e0       	ldi	r26, 0x07	; 7
     ed2:	2f 3c       	cpi	r18, 0xCF	; 207
     ed4:	3a 07       	cpc	r19, r26
     ed6:	a8 f5       	brcc	.+106    	; 0xf42 <eMBFuncReadCoils+0xa2>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     ed8:	19 82       	std	Y+1, r1	; 0x01
     eda:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
     edc:	21 e0       	ldi	r18, 0x01	; 1
     ede:	20 83       	st	Z, r18
            *usLen += 1;
     ee0:	28 81       	ld	r18, Y
     ee2:	39 81       	ldd	r19, Y+1	; 0x01
     ee4:	2f 5f       	subi	r18, 0xFF	; 255
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	39 83       	std	Y+1, r19	; 0x01
     eea:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
     eec:	da 01       	movw	r26, r20
     eee:	a7 70       	andi	r26, 0x07	; 7
     ef0:	b0 70       	andi	r27, 0x00	; 0
     ef2:	9a 01       	movw	r18, r20
     ef4:	13 e0       	ldi	r17, 0x03	; 3
     ef6:	36 95       	lsr	r19
     ef8:	27 95       	ror	r18
     efa:	1a 95       	dec	r17
     efc:	e1 f7       	brne	.-8      	; 0xef6 <eMBFuncReadCoils+0x56>
     efe:	10 97       	sbiw	r26, 0x00	; 0
     f00:	19 f0       	breq	.+6      	; 0xf08 <eMBFuncReadCoils+0x68>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
     f02:	12 2f       	mov	r17, r18
     f04:	1f 5f       	subi	r17, 0xFF	; 255
     f06:	01 c0       	rjmp	.+2      	; 0xf0a <eMBFuncReadCoils+0x6a>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
     f08:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
     f0a:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
     f0c:	28 81       	ld	r18, Y
     f0e:	39 81       	ldd	r19, Y+1	; 0x01
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	39 83       	std	Y+1, r19	; 0x01
     f16:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     f18:	37 2f       	mov	r19, r23
     f1a:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	62 2b       	or	r22, r18
     f20:	73 2b       	or	r23, r19
        usRegAddress++;
     f22:	6f 5f       	subi	r22, 0xFF	; 255
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	ed d9       	rcall	.-3110   	; 0x304 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     f2a:	88 23       	and	r24, r24
     f2c:	11 f0       	breq	.+4      	; 0xf32 <eMBFuncReadCoils+0x92>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     f2e:	ae df       	rcall	.-164    	; 0xe8c <prveMBError2Exception>
     f30:	09 c0       	rjmp	.+18     	; 0xf44 <eMBFuncReadCoils+0xa4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
     f32:	88 81       	ld	r24, Y
     f34:	99 81       	ldd	r25, Y+1	; 0x01
     f36:	81 0f       	add	r24, r17
     f38:	91 1d       	adc	r25, r1
     f3a:	99 83       	std	Y+1, r25	; 0x01
     f3c:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <eMBFuncReadCoils+0xa4>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     f42:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	1f 91       	pop	r17
     f4a:	08 95       	ret

00000f4c <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <eMBFuncWriteCoil+0x6>
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	fc 01       	movw	r30, r24
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     f58:	db 01       	movw	r26, r22
     f5a:	8d 91       	ld	r24, X+
     f5c:	9c 91       	ld	r25, X
     f5e:	11 97       	sbiw	r26, 0x01	; 1
     f60:	85 30       	cpi	r24, 0x05	; 5
     f62:	91 05       	cpc	r25, r1
     f64:	11 f5       	brne	.+68     	; 0xfaa <eMBFuncWriteCoil+0x5e>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     f66:	21 81       	ldd	r18, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     f68:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
     f6a:	84 81       	ldd	r24, Z+4	; 0x04
     f6c:	88 23       	and	r24, r24
     f6e:	e9 f4       	brne	.+58     	; 0xfaa <eMBFuncWriteCoil+0x5e>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
     f70:	83 81       	ldd	r24, Z+3	; 0x03
     f72:	98 2f       	mov	r25, r24
     f74:	91 50       	subi	r25, 0x01	; 1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
     f76:	9e 3f       	cpi	r25, 0xFE	; 254
     f78:	c0 f0       	brcs	.+48     	; 0xfaa <eMBFuncWriteCoil+0x5e>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
     f7a:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
     f7c:	8f 3f       	cpi	r24, 0xFF	; 255
     f7e:	19 f4       	brne	.+6      	; 0xf86 <eMBFuncWriteCoil+0x3a>
            {
                ucBuf[0] = 1;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <eMBFuncWriteCoil+0x3c>
            }
            else
            {
                ucBuf[0] = 0;
     f86:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     f88:	92 2f       	mov	r25, r18
     f8a:	80 e0       	ldi	r24, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	68 2b       	or	r22, r24
     f90:	79 2b       	or	r23, r25
        usRegAddress++;
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
     f96:	ce 01       	movw	r24, r28
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	41 e0       	ldi	r20, 0x01	; 1
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	21 e0       	ldi	r18, 0x01	; 1
     fa0:	b1 d9       	rcall	.-3230   	; 0x304 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     fa2:	88 23       	and	r24, r24
     fa4:	21 f0       	breq	.+8      	; 0xfae <eMBFuncWriteCoil+0x62>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     fa6:	72 df       	rcall	.-284    	; 0xe8c <prveMBError2Exception>
     fa8:	03 c0       	rjmp	.+6      	; 0xfb0 <eMBFuncWriteCoil+0x64>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     faa:	83 e0       	ldi	r24, 0x03	; 3
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <eMBFuncWriteCoil+0x64>
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
     fae:	80 e0       	ldi	r24, 0x00	; 0
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	fc 01       	movw	r30, r24
     fc0:	eb 01       	movw	r28, r22
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     fc2:	88 81       	ld	r24, Y
     fc4:	99 81       	ldd	r25, Y+1	; 0x01
     fc6:	86 30       	cpi	r24, 0x06	; 6
     fc8:	91 05       	cpc	r25, r1
     fca:	a0 f1       	brcs	.+104    	; 0x1034 <eMBFuncWriteMultipleCoils+0x7a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     fcc:	71 81       	ldd	r23, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     fce:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	80 e0       	ldi	r24, 0x00	; 0
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
     fd4:	44 81       	ldd	r20, Z+4	; 0x04
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	48 2b       	or	r20, r24
     fda:	59 2b       	or	r21, r25

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
     fdc:	a5 81       	ldd	r26, Z+5	; 0x05

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
     fde:	9a 01       	movw	r18, r20
     fe0:	27 70       	andi	r18, 0x07	; 7
     fe2:	30 70       	andi	r19, 0x00	; 0
     fe4:	ca 01       	movw	r24, r20
     fe6:	b3 e0       	ldi	r27, 0x03	; 3
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	ba 95       	dec	r27
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <eMBFuncWriteMultipleCoils+0x2e>
     ff0:	21 15       	cp	r18, r1
     ff2:	31 05       	cpc	r19, r1
     ff4:	09 f0       	breq	.+2      	; 0xff8 <eMBFuncWriteMultipleCoils+0x3e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
     ff8:	9a 01       	movw	r18, r20
     ffa:	21 50       	subi	r18, 0x01	; 1
     ffc:	30 40       	sbci	r19, 0x00	; 0
     ffe:	97 e0       	ldi	r25, 0x07	; 7
    1000:	20 3b       	cpi	r18, 0xB0	; 176
    1002:	39 07       	cpc	r19, r25
    1004:	b8 f4       	brcc	.+46     	; 0x1034 <eMBFuncWriteMultipleCoils+0x7a>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
    1006:	8a 17       	cp	r24, r26
    1008:	a9 f4       	brne	.+42     	; 0x1034 <eMBFuncWriteMultipleCoils+0x7a>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    100a:	97 2f       	mov	r25, r23
    100c:	80 e0       	ldi	r24, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	68 2b       	or	r22, r24
    1012:	79 2b       	or	r23, r25
        usRegAddress++;
    1014:	6f 5f       	subi	r22, 0xFF	; 255
    1016:	7f 4f       	sbci	r23, 0xFF	; 255

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
    1018:	cf 01       	movw	r24, r30
    101a:	06 96       	adiw	r24, 0x06	; 6
    101c:	21 e0       	ldi	r18, 0x01	; 1
    101e:	72 d9       	rcall	.-3356   	; 0x304 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1020:	88 23       	and	r24, r24
    1022:	11 f0       	breq	.+4      	; 0x1028 <eMBFuncWriteMultipleCoils+0x6e>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1024:	33 df       	rcall	.-410    	; 0xe8c <prveMBError2Exception>
    1026:	07 c0       	rjmp	.+14     	; 0x1036 <eMBFuncWriteMultipleCoils+0x7c>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    1028:	85 e0       	ldi	r24, 0x05	; 5
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	99 83       	std	Y+1, r25	; 0x01
    102e:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <eMBFuncWriteMultipleCoils+0x7c>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1034:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	fc 01       	movw	r30, r24
    1044:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    1046:	88 81       	ld	r24, Y
    1048:	99 81       	ldd	r25, Y+1	; 0x01
    104a:	85 30       	cpi	r24, 0x05	; 5
    104c:	91 05       	cpc	r25, r1
    104e:	09 f0       	breq	.+2      	; 0x1052 <eMBFuncReadDiscreteInputs+0x16>
    1050:	46 c0       	rjmp	.+140    	; 0x10de <eMBFuncReadDiscreteInputs+0xa2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1052:	cf 01       	movw	r24, r30
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	71 81       	ldd	r23, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1058:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
    105a:	33 81       	ldd	r19, Z+3	; 0x03
    105c:	20 e0       	ldi	r18, 0x00	; 0
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
    105e:	44 81       	ldd	r20, Z+4	; 0x04
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	42 2b       	or	r20, r18
    1064:	53 2b       	or	r21, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
    1066:	9a 01       	movw	r18, r20
    1068:	21 50       	subi	r18, 0x01	; 1
    106a:	30 40       	sbci	r19, 0x00	; 0
    106c:	a7 e0       	ldi	r26, 0x07	; 7
    106e:	2f 3c       	cpi	r18, 0xCF	; 207
    1070:	3a 07       	cpc	r19, r26
    1072:	a8 f5       	brcc	.+106    	; 0x10de <eMBFuncReadDiscreteInputs+0xa2>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    1074:	19 82       	std	Y+1, r1	; 0x01
    1076:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
    1078:	22 e0       	ldi	r18, 0x02	; 2
    107a:	20 83       	st	Z, r18
            *usLen += 1;
    107c:	28 81       	ld	r18, Y
    107e:	39 81       	ldd	r19, Y+1	; 0x01
    1080:	2f 5f       	subi	r18, 0xFF	; 255
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	39 83       	std	Y+1, r19	; 0x01
    1086:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
    1088:	da 01       	movw	r26, r20
    108a:	a7 70       	andi	r26, 0x07	; 7
    108c:	b0 70       	andi	r27, 0x00	; 0
    108e:	9a 01       	movw	r18, r20
    1090:	13 e0       	ldi	r17, 0x03	; 3
    1092:	36 95       	lsr	r19
    1094:	27 95       	ror	r18
    1096:	1a 95       	dec	r17
    1098:	e1 f7       	brne	.-8      	; 0x1092 <eMBFuncReadDiscreteInputs+0x56>
    109a:	10 97       	sbiw	r26, 0x00	; 0
    109c:	19 f0       	breq	.+6      	; 0x10a4 <eMBFuncReadDiscreteInputs+0x68>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
    109e:	12 2f       	mov	r17, r18
    10a0:	1f 5f       	subi	r17, 0xFF	; 255
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <eMBFuncReadDiscreteInputs+0x6a>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
    10a4:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
    10a6:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
    10a8:	28 81       	ld	r18, Y
    10aa:	39 81       	ldd	r19, Y+1	; 0x01
    10ac:	2f 5f       	subi	r18, 0xFF	; 255
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	39 83       	std	Y+1, r19	; 0x01
    10b2:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    10b4:	37 2f       	mov	r19, r23
    10b6:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	62 2b       	or	r22, r18
    10bc:	73 2b       	or	r23, r19
        usRegAddress++;
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	21 d9       	rcall	.-3518   	; 0x308 <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    10c6:	88 23       	and	r24, r24
    10c8:	11 f0       	breq	.+4      	; 0x10ce <eMBFuncReadDiscreteInputs+0x92>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    10ca:	e0 de       	rcall	.-576    	; 0xe8c <prveMBError2Exception>
    10cc:	09 c0       	rjmp	.+18     	; 0x10e0 <eMBFuncReadDiscreteInputs+0xa4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    10ce:	88 81       	ld	r24, Y
    10d0:	99 81       	ldd	r25, Y+1	; 0x01
    10d2:	81 0f       	add	r24, r17
    10d4:	91 1d       	adc	r25, r1
    10d6:	99 83       	std	Y+1, r25	; 0x01
    10d8:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <eMBFuncReadDiscreteInputs+0xa4>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    10de:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	08 95       	ret

000010e8 <eMBSetSlaveID>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    eMBErrorCode    eStatus = MB_ENOERR;

    /* the first byte and second byte in the buffer is reserved for
     * the parameter ucSlaveID and the running flag. The rest of
     * the buffer is available for additional data. */
    if( usAdditionalLen + 2 < MB_FUNC_OTHER_REP_SLAVEID_BUF )
    10ec:	e9 01       	movw	r28, r18
    10ee:	22 96       	adiw	r28, 0x02	; 2
    10f0:	c0 32       	cpi	r28, 0x20	; 32
    10f2:	d1 05       	cpc	r29, r1
    10f4:	e8 f4       	brcc	.+58     	; 0x1130 <eMBSetSlaveID+0x48>
    {
        usMBSlaveIDLen = 0;
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
    10f6:	80 93 c9 00 	sts	0x00C9, r24
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
    10fa:	66 23       	and	r22, r22
    10fc:	11 f0       	breq	.+4      	; 0x1102 <eMBSetSlaveID+0x1a>
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <eMBSetSlaveID+0x1c>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	80 93 ca 00 	sts	0x00CA, r24
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	90 93 c8 00 	sts	0x00C8, r25
    1110:	80 93 c7 00 	sts	0x00C7, r24
        if( usAdditionalLen > 0 )
    1114:	21 15       	cp	r18, r1
    1116:	31 05       	cpc	r19, r1
    1118:	69 f0       	breq	.+26     	; 0x1134 <eMBSetSlaveID+0x4c>
        {
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
    111a:	eb ec       	ldi	r30, 0xCB	; 203
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	cf 01       	movw	r24, r30
    1120:	ba 01       	movw	r22, r20
    1122:	a9 01       	movw	r20, r18
    1124:	6c d0       	rcall	.+216    	; 0x11fe <memcpy>
                    ( size_t )usAdditionalLen );
            usMBSlaveIDLen += usAdditionalLen;
    1126:	d0 93 c8 00 	sts	0x00C8, r29
    112a:	c0 93 c7 00 	sts	0x00C7, r28
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <eMBSetSlaveID+0x4c>
        }
    }
    else
    {
        eStatus = MB_ENORES;
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <eMBSetSlaveID+0x4e>

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    1134:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENORES;
    }
    return eStatus;
}
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	08 95       	ret

0000113c <eMBFuncReportSlaveID>:

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
    114a:	c0 91 c7 00 	lds	r28, 0x00C7
    114e:	d0 91 c8 00 	lds	r29, 0x00C8
    1152:	ac 01       	movw	r20, r24
    1154:	4f 5f       	subi	r20, 0xFF	; 255
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
    1158:	29 ec       	ldi	r18, 0xC9	; 201
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	ca 01       	movw	r24, r20
    115e:	b9 01       	movw	r22, r18
    1160:	ae 01       	movw	r20, r28
    1162:	4d d0       	rcall	.+154    	; 0x11fe <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
    1164:	21 96       	adiw	r28, 0x01	; 1
    1166:	f8 01       	movw	r30, r16
    1168:	d1 83       	std	Z+1, r29	; 0x01
    116a:	c0 83       	st	Z, r28
    return MB_EX_NONE;
}
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	08 95       	ret

0000117c <__mulsi3>:
    117c:	62 9f       	mul	r22, r18
    117e:	d0 01       	movw	r26, r0
    1180:	73 9f       	mul	r23, r19
    1182:	f0 01       	movw	r30, r0
    1184:	82 9f       	mul	r24, r18
    1186:	e0 0d       	add	r30, r0
    1188:	f1 1d       	adc	r31, r1
    118a:	64 9f       	mul	r22, r20
    118c:	e0 0d       	add	r30, r0
    118e:	f1 1d       	adc	r31, r1
    1190:	92 9f       	mul	r25, r18
    1192:	f0 0d       	add	r31, r0
    1194:	83 9f       	mul	r24, r19
    1196:	f0 0d       	add	r31, r0
    1198:	74 9f       	mul	r23, r20
    119a:	f0 0d       	add	r31, r0
    119c:	65 9f       	mul	r22, r21
    119e:	f0 0d       	add	r31, r0
    11a0:	99 27       	eor	r25, r25
    11a2:	72 9f       	mul	r23, r18
    11a4:	b0 0d       	add	r27, r0
    11a6:	e1 1d       	adc	r30, r1
    11a8:	f9 1f       	adc	r31, r25
    11aa:	63 9f       	mul	r22, r19
    11ac:	b0 0d       	add	r27, r0
    11ae:	e1 1d       	adc	r30, r1
    11b0:	f9 1f       	adc	r31, r25
    11b2:	bd 01       	movw	r22, r26
    11b4:	cf 01       	movw	r24, r30
    11b6:	11 24       	eor	r1, r1
    11b8:	08 95       	ret

000011ba <__udivmodsi4>:
    11ba:	a1 e2       	ldi	r26, 0x21	; 33
    11bc:	1a 2e       	mov	r1, r26
    11be:	aa 1b       	sub	r26, r26
    11c0:	bb 1b       	sub	r27, r27
    11c2:	fd 01       	movw	r30, r26
    11c4:	0d c0       	rjmp	.+26     	; 0x11e0 <__udivmodsi4_ep>

000011c6 <__udivmodsi4_loop>:
    11c6:	aa 1f       	adc	r26, r26
    11c8:	bb 1f       	adc	r27, r27
    11ca:	ee 1f       	adc	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	a2 17       	cp	r26, r18
    11d0:	b3 07       	cpc	r27, r19
    11d2:	e4 07       	cpc	r30, r20
    11d4:	f5 07       	cpc	r31, r21
    11d6:	20 f0       	brcs	.+8      	; 0x11e0 <__udivmodsi4_ep>
    11d8:	a2 1b       	sub	r26, r18
    11da:	b3 0b       	sbc	r27, r19
    11dc:	e4 0b       	sbc	r30, r20
    11de:	f5 0b       	sbc	r31, r21

000011e0 <__udivmodsi4_ep>:
    11e0:	66 1f       	adc	r22, r22
    11e2:	77 1f       	adc	r23, r23
    11e4:	88 1f       	adc	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	1a 94       	dec	r1
    11ea:	69 f7       	brne	.-38     	; 0x11c6 <__udivmodsi4_loop>
    11ec:	60 95       	com	r22
    11ee:	70 95       	com	r23
    11f0:	80 95       	com	r24
    11f2:	90 95       	com	r25
    11f4:	9b 01       	movw	r18, r22
    11f6:	ac 01       	movw	r20, r24
    11f8:	bd 01       	movw	r22, r26
    11fa:	cf 01       	movw	r24, r30
    11fc:	08 95       	ret

000011fe <memcpy>:
    11fe:	fb 01       	movw	r30, r22
    1200:	dc 01       	movw	r26, r24
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <memcpy+0xa>
    1204:	01 90       	ld	r0, Z+
    1206:	0d 92       	st	X+, r0
    1208:	41 50       	subi	r20, 0x01	; 1
    120a:	50 40       	sbci	r21, 0x00	; 0
    120c:	d8 f7       	brcc	.-10     	; 0x1204 <memcpy+0x6>
    120e:	08 95       	ret

00001210 <_exit>:
    1210:	f8 94       	cli

00001212 <__stop_program>:
    1212:	ff cf       	rjmp	.-2      	; 0x1212 <__stop_program>
